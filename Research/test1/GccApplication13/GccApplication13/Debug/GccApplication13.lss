
GccApplication13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00001a4c  00001ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800204  00800204  00001ae4  2**0
                  ALLOC
  3 .stab         00002934  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000950  00000000  00000000  00004418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00004d68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000188a  00000000  00000000  00004e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003f1  00000000  00000000  000066f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d7  00000000  00000000  00006ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d4  00000000  00000000  000074bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d4  00000000  00000000  00007990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c56  00000000  00000000  00007e64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__vector_25>
      68:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      6c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      70:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      74:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      78:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      80:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      84:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      88:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      8c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      90:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      94:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      98:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      9c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      ac:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_45>
      b8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      bc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      cc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      dc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	sts	0x9b, r22
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	12 e0       	ldi	r17, 0x02	; 2
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	ec e4       	ldi	r30, 0x4C	; 76
     12a:	fa e1       	ldi	r31, 0x1A	; 26
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	0b bf       	out	0x3b, r16	; 59
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
     132:	07 90       	elpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a4 30       	cpi	r26, 0x04	; 4
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
     13c:	12 e0       	ldi	r17, 0x02	; 2
     13e:	a4 e0       	ldi	r26, 0x04	; 4
     140:	b2 e0       	ldi	r27, 0x02	; 2
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	aa 34       	cpi	r26, 0x4A	; 74
     148:	b1 07       	cpc	r27, r17
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	0e 94 1a 09 	call	0x1234	; 0x1234 <main>
     150:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <pid_right>:
	kd = Kd;
}

void pid_right(void)
{
	OCR5AH=0x00;
     158:	10 92 29 01 	sts	0x0129, r1
	OCR5AL += 100;
     15c:	e8 e2       	ldi	r30, 0x28	; 40
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	80 81       	ld	r24, Z
     162:	8c 59       	subi	r24, 0x9C	; 156
     164:	80 83       	st	Z, r24
	if(OCR5AL >= 255)
     166:	80 81       	ld	r24, Z
     168:	8f 3f       	cpi	r24, 0xFF	; 255
     16a:	11 f4       	brne	.+4      	; 0x170 <pid_right+0x18>
	{
		OCR5AL = 255;
     16c:	80 93 28 01 	sts	0x0128, r24
	}
	OCR5BH = 0x00;
     170:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL -= 50;
     174:	ea e2       	ldi	r30, 0x2A	; 42
     176:	f1 e0       	ldi	r31, 0x01	; 1
     178:	80 81       	ld	r24, Z
     17a:	82 53       	subi	r24, 0x32	; 50
     17c:	80 83       	st	Z, r24
	if(OCR5BL <= 0)
     17e:	80 81       	ld	r24, Z
     180:	88 23       	and	r24, r24
     182:	11 f4       	brne	.+4      	; 0x188 <pid_right+0x30>
	{
		OCR5BL = 0;
     184:	10 92 2a 01 	sts	0x012A, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     188:	86 e6       	ldi	r24, 0x66	; 102
     18a:	96 ee       	ldi	r25, 0xE6	; 230
     18c:	a0 e0       	ldi	r26, 0x00	; 0
     18e:	81 50       	subi	r24, 0x01	; 1
     190:	90 40       	sbci	r25, 0x00	; 0
     192:	a0 40       	sbci	r26, 0x00	; 0
     194:	e1 f7       	brne	.-8      	; 0x18e <pid_right+0x36>
	}
	_delay_ms(20);
}
     196:	08 95       	ret

00000198 <pid_left>:

void pid_left(void)
{
	OCR5BH=0x00;
     198:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL += 100;
     19c:	ea e2       	ldi	r30, 0x2A	; 42
     19e:	f1 e0       	ldi	r31, 0x01	; 1
     1a0:	80 81       	ld	r24, Z
     1a2:	8c 59       	subi	r24, 0x9C	; 156
     1a4:	80 83       	st	Z, r24
	if(OCR5BL >= 255)
     1a6:	80 81       	ld	r24, Z
     1a8:	8f 3f       	cpi	r24, 0xFF	; 255
     1aa:	11 f4       	brne	.+4      	; 0x1b0 <pid_left+0x18>
	{
		OCR5BL = 255;
     1ac:	80 93 2a 01 	sts	0x012A, r24
	}
	OCR5AH = 0x00;
     1b0:	10 92 29 01 	sts	0x0129, r1
	OCR5AL -= 50;
     1b4:	e8 e2       	ldi	r30, 0x28	; 40
     1b6:	f1 e0       	ldi	r31, 0x01	; 1
     1b8:	80 81       	ld	r24, Z
     1ba:	82 53       	subi	r24, 0x32	; 50
     1bc:	80 83       	st	Z, r24
	if(OCR5AL <= 0)
     1be:	80 81       	ld	r24, Z
     1c0:	88 23       	and	r24, r24
     1c2:	11 f4       	brne	.+4      	; 0x1c8 <pid_left+0x30>
	{
		OCR5AL = 0;
     1c4:	10 92 28 01 	sts	0x0128, r1
     1c8:	86 e6       	ldi	r24, 0x66	; 102
     1ca:	96 ee       	ldi	r25, 0xE6	; 230
     1cc:	a0 e0       	ldi	r26, 0x00	; 0
     1ce:	81 50       	subi	r24, 0x01	; 1
     1d0:	90 40       	sbci	r25, 0x00	; 0
     1d2:	a0 40       	sbci	r26, 0x00	; 0
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <pid_left+0x36>
	}
	_delay_ms(20);
}
     1d6:	08 95       	ret

000001d8 <timer4_init>:
volatile uint8_t tot_overflow;


void timer4_init(void)
{
	tot_overflow=0;
     1d8:	10 92 2c 02 	sts	0x022C, r1
	TCCR4B = 0x00; //stop
     1dc:	e1 ea       	ldi	r30, 0xA1	; 161
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	10 82       	st	Z, r1
	TCNT4H = 0xC6; //Counter higher 8 bit value
     1e2:	86 ec       	ldi	r24, 0xC6	; 198
     1e4:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //Counter lower 8 bit value
     1e8:	87 e6       	ldi	r24, 0x67	; 103
     1ea:	80 93 a4 00 	sts	0x00A4, r24
	OCR4AH = 0x00; //Output compare Register (OCR)- Not used
     1ee:	10 92 a9 00 	sts	0x00A9, r1
	OCR4AL = 0x00; //Output compare Register (OCR)- Not used
     1f2:	10 92 a8 00 	sts	0x00A8, r1
	OCR4BH = 0x00; //Output compare Register (OCR)- Not used
     1f6:	10 92 ab 00 	sts	0x00AB, r1
	OCR4BL = 0x00; //Output compare Register (OCR)- Not used
     1fa:	10 92 aa 00 	sts	0x00AA, r1
	OCR4CH = 0x00; //Output compare Register (OCR)- Not used
     1fe:	10 92 ad 00 	sts	0x00AD, r1
	OCR4CL = 0x00; //Output compare Register (OCR)- Not used
     202:	10 92 ac 00 	sts	0x00AC, r1
	ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
     206:	10 92 a7 00 	sts	0x00A7, r1
	ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
     20a:	10 92 a6 00 	sts	0x00A6, r1
	TCCR4A = 0x00;
     20e:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4C = 0x00;
     212:	10 92 a2 00 	sts	0x00A2, r1
	TCCR4B = 0x01; //start Timer
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	80 83       	st	Z, r24
}
     21a:	08 95       	ret

0000021c <__vector_45>:

// TIMER4 overflow interrupt service routine
// called whenever TCNT4 overflows
ISR(TIMER4_OVF_vect)
{
     21c:	1f 92       	push	r1
     21e:	0f 92       	push	r0
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	0f 92       	push	r0
     224:	11 24       	eor	r1, r1
     226:	8f 93       	push	r24
	// keep a track of number of overflows
	tot_overflow++;
     228:	80 91 2c 02 	lds	r24, 0x022C
     22c:	8f 5f       	subi	r24, 0xFF	; 255
     22e:	80 93 2c 02 	sts	0x022C, r24
	//TIMER4 has overflowed
	TCNT4H = 0xC6; //reload counter high value
     232:	86 ec       	ldi	r24, 0xC6	; 198
     234:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //reload counter low value
     238:	87 e6       	ldi	r24, 0x67	; 103
     23a:	80 93 a4 00 	sts	0x00A4, r24
}
     23e:	8f 91       	pop	r24
     240:	0f 90       	pop	r0
     242:	0f be       	out	0x3f, r0	; 63
     244:	0f 90       	pop	r0
     246:	1f 90       	pop	r1
     248:	18 95       	reti

0000024a <start_timer4>:

void start_timer4(void)
{
	cli(); //Clears the global interrupts
     24a:	f8 94       	cli
	timer4_init();
     24c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <timer4_init>
	TIMSK4 = 0x01; //timer4 overflow interrupt enable
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	80 93 72 00 	sts	0x0072, r24
	sei();   //Enables the global interrupts
     256:	78 94       	sei

}
     258:	08 95       	ret

0000025a <micros>:

int micros(void)
{
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791)/14745);
     262:	10 91 2c 02 	lds	r17, 0x022C
     266:	c0 91 a4 00 	lds	r28, 0x00A4
     26a:	d0 91 a5 00 	lds	r29, 0x00A5
	start_timer4();
     26e:	0e 94 25 01 	call	0x24a	; 0x24a <start_timer4>
}

int micros(void)
{
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791)/14745);
     272:	ce 01       	movw	r24, r28
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b0 e0       	ldi	r27, 0x00	; 0
     278:	bc 01       	movw	r22, r24
     27a:	cd 01       	movw	r24, r26
     27c:	67 56       	subi	r22, 0x67	; 103
     27e:	76 4c       	sbci	r23, 0xC6	; 198
     280:	80 40       	sbci	r24, 0x00	; 0
     282:	90 40       	sbci	r25, 0x00	; 0
     284:	29 e9       	ldi	r18, 0x99	; 153
     286:	39 e3       	ldi	r19, 0x39	; 57
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__divmodsi4>
     290:	da 01       	movw	r26, r20
     292:	c9 01       	movw	r24, r18
     294:	81 0f       	add	r24, r17
     296:	91 1d       	adc	r25, r1
     298:	a1 1d       	adc	r26, r1
     29a:	b1 1d       	adc	r27, r1
     29c:	8c 01       	movw	r16, r24
     29e:	9d 01       	movw	r18, r26
     2a0:	48 ee       	ldi	r20, 0xE8	; 232
     2a2:	53 e0       	ldi	r21, 0x03	; 3
     2a4:	04 9f       	mul	r16, r20
     2a6:	c0 01       	movw	r24, r0
     2a8:	05 9f       	mul	r16, r21
     2aa:	90 0d       	add	r25, r0
     2ac:	14 9f       	mul	r17, r20
     2ae:	90 0d       	add	r25, r0
     2b0:	11 24       	eor	r1, r1
	start_timer4();
	return time;

}
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	08 95       	ret

000002bc <millis>:
int millis(int mode)
{
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	8c 01       	movw	r16, r24
	int time=0;
	time=(tot_overflow + (TCNT4-50791)/14745);
     2c6:	c0 91 2c 02 	lds	r28, 0x022C
     2ca:	60 91 a4 00 	lds	r22, 0x00A4
     2ce:	70 91 a5 00 	lds	r23, 0x00A5
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	67 56       	subi	r22, 0x67	; 103
     2d8:	76 4c       	sbci	r23, 0xC6	; 198
     2da:	80 40       	sbci	r24, 0x00	; 0
     2dc:	90 40       	sbci	r25, 0x00	; 0
     2de:	29 e9       	ldi	r18, 0x99	; 153
     2e0:	39 e3       	ldi	r19, 0x39	; 57
     2e2:	40 e0       	ldi	r20, 0x00	; 0
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__divmodsi4>
     2ea:	d0 e0       	ldi	r29, 0x00	; 0
     2ec:	c2 0f       	add	r28, r18
     2ee:	d3 1f       	adc	r29, r19
	if (mode==0)
     2f0:	01 15       	cp	r16, r1
     2f2:	11 05       	cpc	r17, r1
     2f4:	11 f4       	brne	.+4      	; 0x2fa <millis+0x3e>
	{		
		start_timer4();
     2f6:	0e 94 25 01 	call	0x24a	; 0x24a <start_timer4>
	}	
	return time;

}
     2fa:	8c 2f       	mov	r24, r28
     2fc:	9d 2f       	mov	r25, r29
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	08 95       	ret

00000308 <lcd_set_4bit>:
     308:	86 e6       	ldi	r24, 0x66	; 102
     30a:	9e e0       	ldi	r25, 0x0E	; 14
     30c:	01 97       	sbiw	r24, 0x01	; 1
     30e:	f1 f7       	brne	.-4      	; 0x30c <lcd_set_4bit+0x4>
     310:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     312:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     314:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     316:	80 e3       	ldi	r24, 0x30	; 48
     318:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     31a:	42 9a       	sbi	0x08, 2	; 8
     31c:	ef ef       	ldi	r30, 0xFF	; 255
     31e:	f7 e4       	ldi	r31, 0x47	; 71
     320:	31 97       	sbiw	r30, 0x01	; 1
     322:	f1 f7       	brne	.-4      	; 0x320 <lcd_set_4bit+0x18>
     324:	00 c0       	rjmp	.+0      	; 0x326 <lcd_set_4bit+0x1e>
     326:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     328:	42 98       	cbi	0x08, 2	; 8
     32a:	e6 e6       	ldi	r30, 0x66	; 102
     32c:	fe e0       	ldi	r31, 0x0E	; 14
     32e:	31 97       	sbiw	r30, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <lcd_set_4bit+0x26>
     332:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     334:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     336:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     338:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     33a:	42 9a       	sbi	0x08, 2	; 8
     33c:	ef ef       	ldi	r30, 0xFF	; 255
     33e:	f7 e4       	ldi	r31, 0x47	; 71
     340:	31 97       	sbiw	r30, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <lcd_set_4bit+0x38>
     344:	00 c0       	rjmp	.+0      	; 0x346 <lcd_set_4bit+0x3e>
     346:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     348:	42 98       	cbi	0x08, 2	; 8
     34a:	e6 e6       	ldi	r30, 0x66	; 102
     34c:	fe e0       	ldi	r31, 0x0E	; 14
     34e:	31 97       	sbiw	r30, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <lcd_set_4bit+0x46>
     352:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     354:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     356:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     358:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     35a:	42 9a       	sbi	0x08, 2	; 8
     35c:	8f ef       	ldi	r24, 0xFF	; 255
     35e:	97 e4       	ldi	r25, 0x47	; 71
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	f1 f7       	brne	.-4      	; 0x360 <lcd_set_4bit+0x58>
     364:	00 c0       	rjmp	.+0      	; 0x366 <lcd_set_4bit+0x5e>
     366:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     368:	42 98       	cbi	0x08, 2	; 8
     36a:	e6 e6       	ldi	r30, 0x66	; 102
     36c:	fe e0       	ldi	r31, 0x0E	; 14
     36e:	31 97       	sbiw	r30, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <lcd_set_4bit+0x66>
     372:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     374:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     376:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     378:	80 e2       	ldi	r24, 0x20	; 32
     37a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     37c:	42 9a       	sbi	0x08, 2	; 8
     37e:	8f ef       	ldi	r24, 0xFF	; 255
     380:	97 e4       	ldi	r25, 0x47	; 71
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	f1 f7       	brne	.-4      	; 0x382 <lcd_set_4bit+0x7a>
     386:	00 c0       	rjmp	.+0      	; 0x388 <lcd_set_4bit+0x80>
     388:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     38a:	42 98       	cbi	0x08, 2	; 8
}
     38c:	08 95       	ret

0000038e <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     38e:	98 b1       	in	r25, 0x08	; 8
     390:	9f 70       	andi	r25, 0x0F	; 15
     392:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     394:	98 b1       	in	r25, 0x08	; 8
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     396:	28 2f       	mov	r18, r24
     398:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     39a:	92 2b       	or	r25, r18
     39c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     39e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     3a0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     3a2:	42 9a       	sbi	0x08, 2	; 8
     3a4:	ef ef       	ldi	r30, 0xFF	; 255
     3a6:	f7 e4       	ldi	r31, 0x47	; 71
     3a8:	31 97       	sbiw	r30, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <lcd_wr_command+0x1a>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <lcd_wr_command+0x20>
     3ae:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3b0:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     3b2:	98 b1       	in	r25, 0x08	; 8
     3b4:	9f 70       	andi	r25, 0x0F	; 15
     3b6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     3b8:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     3ba:	82 95       	swap	r24
     3bc:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     3be:	89 2b       	or	r24, r25
     3c0:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     3c2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     3c4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     3c6:	42 9a       	sbi	0x08, 2	; 8
     3c8:	8f ef       	ldi	r24, 0xFF	; 255
     3ca:	97 e4       	ldi	r25, 0x47	; 71
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_wr_command+0x3e>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <lcd_wr_command+0x44>
     3d2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3d4:	42 98       	cbi	0x08, 2	; 8
}
     3d6:	08 95       	ret

000003d8 <lcd_init>:
     3d8:	86 e6       	ldi	r24, 0x66	; 102
     3da:	9e e0       	ldi	r25, 0x0E	; 14
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	f1 f7       	brne	.-4      	; 0x3dc <lcd_init+0x4>
     3e0:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     3e2:	88 e2       	ldi	r24, 0x28	; 40
     3e4:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     3ee:	86 e0       	ldi	r24, 0x06	; 6
     3f0:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     3f4:	8e e0       	ldi	r24, 0x0E	; 14
     3f6:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     3fa:	80 e8       	ldi	r24, 0x80	; 128
     3fc:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_wr_command>
}
     400:	08 95       	ret

00000402 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     402:	98 b1       	in	r25, 0x08	; 8
     404:	9f 70       	andi	r25, 0x0F	; 15
     406:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     408:	98 b1       	in	r25, 0x08	; 8
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     40a:	28 2f       	mov	r18, r24
     40c:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     40e:	92 2b       	or	r25, r18
     410:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     412:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     414:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     416:	42 9a       	sbi	0x08, 2	; 8
     418:	ef ef       	ldi	r30, 0xFF	; 255
     41a:	f7 e4       	ldi	r31, 0x47	; 71
     41c:	31 97       	sbiw	r30, 0x01	; 1
     41e:	f1 f7       	brne	.-4      	; 0x41c <lcd_wr_char+0x1a>
     420:	00 c0       	rjmp	.+0      	; 0x422 <lcd_wr_char+0x20>
     422:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     424:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     426:	98 b1       	in	r25, 0x08	; 8
     428:	9f 70       	andi	r25, 0x0F	; 15
     42a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     42c:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     42e:	82 95       	swap	r24
     430:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     432:	89 2b       	or	r24, r25
     434:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     436:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     438:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     43a:	42 9a       	sbi	0x08, 2	; 8
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	97 e4       	ldi	r25, 0x47	; 71
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <lcd_wr_char+0x3e>
     444:	00 c0       	rjmp	.+0      	; 0x446 <lcd_wr_char+0x44>
     446:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     448:	42 98       	cbi	0x08, 2	; 8
}
     44a:	08 95       	ret

0000044c <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     44c:	80 e8       	ldi	r24, 0x80	; 128
     44e:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_wr_command>
}
     452:	08 95       	ret

00000454 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	ec 01       	movw	r28, r24
	while(*str != '\0')
     45a:	88 81       	ld	r24, Y
     45c:	88 23       	and	r24, r24
     45e:	31 f0       	breq	.+12     	; 0x46c <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     460:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     462:	0e 94 01 02 	call	0x402	; 0x402 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     466:	89 91       	ld	r24, Y+
     468:	88 23       	and	r24, r24
     46a:	d9 f7       	brne	.-10     	; 0x462 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
     472:	82 30       	cpi	r24, 0x02	; 2
     474:	79 f0       	breq	.+30     	; 0x494 <lcd_cursor+0x22>
     476:	83 30       	cpi	r24, 0x03	; 3
     478:	18 f4       	brcc	.+6      	; 0x480 <lcd_cursor+0xe>
     47a:	81 30       	cpi	r24, 0x01	; 1
     47c:	c9 f4       	brne	.+50     	; 0x4b0 <lcd_cursor+0x3e>
     47e:	05 c0       	rjmp	.+10     	; 0x48a <lcd_cursor+0x18>
     480:	83 30       	cpi	r24, 0x03	; 3
     482:	69 f0       	breq	.+26     	; 0x49e <lcd_cursor+0x2c>
     484:	84 30       	cpi	r24, 0x04	; 4
     486:	a1 f4       	brne	.+40     	; 0x4b0 <lcd_cursor+0x3e>
     488:	0f c0       	rjmp	.+30     	; 0x4a8 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     48a:	86 2f       	mov	r24, r22
     48c:	81 58       	subi	r24, 0x81	; 129
     48e:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_wr_command>
     492:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     494:	86 2f       	mov	r24, r22
     496:	81 54       	subi	r24, 0x41	; 65
     498:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_wr_command>
     49c:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     49e:	86 2f       	mov	r24, r22
     4a0:	8d 56       	subi	r24, 0x6D	; 109
     4a2:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_wr_command>
     4a6:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     4a8:	86 2f       	mov	r24, r22
     4aa:	8d 52       	subi	r24, 0x2D	; 45
     4ac:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_wr_command>
     4b0:	08 95       	ret

000004b2 <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	8a 01       	movw	r16, r20
     4bc:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     4be:	88 23       	and	r24, r24
     4c0:	11 f0       	breq	.+4      	; 0x4c6 <lcd_print+0x14>
     4c2:	66 23       	and	r22, r22
     4c4:	19 f4       	brne	.+6      	; 0x4cc <lcd_print+0x1a>
	{
		lcd_home();
     4c6:	0e 94 26 02 	call	0x44c	; 0x44c <lcd_home>
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     4cc:	0e 94 39 02 	call	0x472	; 0x472 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     4d0:	c5 30       	cpi	r28, 0x05	; 5
     4d2:	d1 05       	cpc	r29, r1
     4d4:	71 f4       	brne	.+28     	; 0x4f2 <lcd_print+0x40>
	{
		million=value/10000+48;
     4d6:	c8 01       	movw	r24, r16
     4d8:	60 e1       	ldi	r22, 0x10	; 16
     4da:	77 e2       	ldi	r23, 0x27	; 39
     4dc:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__udivmodhi4>
     4e0:	cb 01       	movw	r24, r22
     4e2:	c0 96       	adiw	r24, 0x30	; 48
     4e4:	90 93 27 02 	sts	0x0227, r25
     4e8:	80 93 26 02 	sts	0x0226, r24
		lcd_wr_char(million);
     4ec:	0e 94 01 02 	call	0x402	; 0x402 <lcd_wr_char>
     4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     4f2:	c4 30       	cpi	r28, 0x04	; 4
     4f4:	d1 05       	cpc	r29, r1
     4f6:	b9 f4       	brne	.+46     	; 0x526 <lcd_print+0x74>
	{
		temp = value/1000;
     4f8:	c8 01       	movw	r24, r16
     4fa:	68 ee       	ldi	r22, 0xE8	; 232
     4fc:	73 e0       	ldi	r23, 0x03	; 3
     4fe:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__udivmodhi4>
     502:	cb 01       	movw	r24, r22
     504:	70 93 29 02 	sts	0x0229, r23
     508:	60 93 28 02 	sts	0x0228, r22
		thousand = temp%10 + 48;
     50c:	6a e0       	ldi	r22, 0x0A	; 10
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__udivmodhi4>
     514:	c0 96       	adiw	r24, 0x30	; 48
     516:	90 93 45 02 	sts	0x0245, r25
     51a:	80 93 44 02 	sts	0x0244, r24
		lcd_wr_char(thousand);
     51e:	0e 94 01 02 	call	0x402	; 0x402 <lcd_wr_char>
		flag=1;
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	01 c0       	rjmp	.+2      	; 0x528 <lcd_print+0x76>
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     526:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     528:	c3 30       	cpi	r28, 0x03	; 3
     52a:	d1 05       	cpc	r29, r1
     52c:	11 f0       	breq	.+4      	; 0x532 <lcd_print+0x80>
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	b1 f4       	brne	.+44     	; 0x55e <lcd_print+0xac>
	{
		temp = value/100;
     532:	c8 01       	movw	r24, r16
     534:	64 e6       	ldi	r22, 0x64	; 100
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__udivmodhi4>
     53c:	cb 01       	movw	r24, r22
     53e:	70 93 29 02 	sts	0x0229, r23
     542:	60 93 28 02 	sts	0x0228, r22
		hundred = temp%10 + 48;
     546:	6a e0       	ldi	r22, 0x0A	; 10
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__udivmodhi4>
     54e:	c0 96       	adiw	r24, 0x30	; 48
     550:	90 93 3d 02 	sts	0x023D, r25
     554:	80 93 3c 02 	sts	0x023C, r24
		lcd_wr_char(hundred);
     558:	0e 94 01 02 	call	0x402	; 0x402 <lcd_wr_char>
		flag=1;
     55c:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     55e:	c2 30       	cpi	r28, 0x02	; 2
     560:	d1 05       	cpc	r29, r1
     562:	11 f0       	breq	.+4      	; 0x568 <lcd_print+0xb6>
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	b1 f4       	brne	.+44     	; 0x594 <lcd_print+0xe2>
	{
		temp = value/10;
     568:	2a e0       	ldi	r18, 0x0A	; 10
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	c8 01       	movw	r24, r16
     56e:	b9 01       	movw	r22, r18
     570:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__udivmodhi4>
     574:	cb 01       	movw	r24, r22
     576:	70 93 29 02 	sts	0x0229, r23
     57a:	60 93 28 02 	sts	0x0228, r22
		tens = temp%10 + 48;
     57e:	b9 01       	movw	r22, r18
     580:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__udivmodhi4>
     584:	c0 96       	adiw	r24, 0x30	; 48
     586:	90 93 32 02 	sts	0x0232, r25
     58a:	80 93 31 02 	sts	0x0231, r24
		lcd_wr_char(tens);
     58e:	0e 94 01 02 	call	0x402	; 0x402 <lcd_wr_char>
		flag=1;
     592:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     594:	c1 30       	cpi	r28, 0x01	; 1
     596:	d1 05       	cpc	r29, r1
     598:	11 f0       	breq	.+4      	; 0x59e <lcd_print+0xec>
     59a:	81 30       	cpi	r24, 0x01	; 1
     59c:	61 f4       	brne	.+24     	; 0x5b6 <lcd_print+0x104>
	{
		unit = value%10 + 48;
     59e:	c8 01       	movw	r24, r16
     5a0:	6a e0       	ldi	r22, 0x0A	; 10
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__udivmodhi4>
     5a8:	c0 96       	adiw	r24, 0x30	; 48
     5aa:	90 93 43 02 	sts	0x0243, r25
     5ae:	80 93 42 02 	sts	0x0242, r24
		lcd_wr_char(unit);
     5b2:	0e 94 01 02 	call	0x402	; 0x402 <lcd_wr_char>
	}
	if(digits>5)
     5b6:	c6 30       	cpi	r28, 0x06	; 6
     5b8:	d1 05       	cpc	r29, r1
     5ba:	1c f0       	brlt	.+6      	; 0x5c2 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     5bc:	85 e4       	ldi	r24, 0x45	; 69
     5be:	0e 94 01 02 	call	0x402	; 0x402 <lcd_wr_char>
	}
}
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	08 95       	ret

000005cc <display_clear>:
	

void display_clear(void)
{
	lcd_wr_command(0x01);
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_wr_command>
}	
     5d2:	08 95       	ret

000005d4 <lcd_port_config>:

//------------------------------------------------------------------------------
//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;      //all the LCD pin's direction set as output
     5d4:	87 b1       	in	r24, 0x07	; 7
     5d6:	87 6f       	ori	r24, 0xF7	; 247
     5d8:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;    // all the LCD pins are set to logic 0 except PORTC 7
     5da:	88 b1       	in	r24, 0x08	; 8
     5dc:	80 78       	andi	r24, 0x80	; 128
     5de:	88 b9       	out	0x08, r24	; 8
}
     5e0:	08 95       	ret

000005e2 <twi_init>:

//TWI initialize
// bit rate:72
void twi_init(void)
{
 TWCR = 0x00;   //disable twi
     5e2:	ec eb       	ldi	r30, 0xBC	; 188
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	10 82       	st	Z, r1
 TWBR = 0x10; //set bit rate
     5e8:	80 e1       	ldi	r24, 0x10	; 16
     5ea:	80 93 b8 00 	sts	0x00B8, r24
 TWSR = 0x00; //set prescale
     5ee:	10 92 b9 00 	sts	0x00B9, r1
 TWAR = 0x00; //set slave address
     5f2:	10 92 ba 00 	sts	0x00BA, r1
 TWCR = 0x04; //enable twi
     5f6:	84 e0       	ldi	r24, 0x04	; 4
     5f8:	80 83       	st	Z, r24
}
     5fa:	08 95       	ret

000005fc <write_byte>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
     5fc:	94 ea       	ldi	r25, 0xA4	; 164
     5fe:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     602:	ec eb       	ldi	r30, 0xBC	; 188
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	90 81       	ld	r25, Z
     608:	99 23       	and	r25, r25
     60a:	ec f7       	brge	.-6      	; 0x606 <write_byte+0xa>
     60c:	ef ef       	ldi	r30, 0xFF	; 255
     60e:	ff e8       	ldi	r31, 0x8F	; 143
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <write_byte+0x14>
     614:	00 c0       	rjmp	.+0      	; 0x616 <write_byte+0x1a>
     616:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLA_W;                                     // load SLA_W into TWDR Register
     618:	96 ea       	ldi	r25, 0xA6	; 166
     61a:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     61e:	94 e8       	ldi	r25, 0x84	; 132
     620:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     624:	ec eb       	ldi	r30, 0xBC	; 188
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	90 81       	ld	r25, Z
     62a:	99 23       	and	r25, r25
     62c:	ec f7       	brge	.-6      	; 0x628 <write_byte+0x2c>
     62e:	ef ef       	ldi	r30, 0xFF	; 255
     630:	ff e8       	ldi	r31, 0x8F	; 143
     632:	31 97       	sbiw	r30, 0x01	; 1
     634:	f1 f7       	brne	.-4      	; 0x632 <write_byte+0x36>
     636:	00 c0       	rjmp	.+0      	; 0x638 <write_byte+0x3c>
     638:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
     63a:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
     63e:	94 e8       	ldi	r25, 0x84	; 132
     640:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     644:	ec eb       	ldi	r30, 0xBC	; 188
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	90 81       	ld	r25, Z
     64a:	99 23       	and	r25, r25
     64c:	ec f7       	brge	.-6      	; 0x648 <write_byte+0x4c>
     64e:	ef ef       	ldi	r30, 0xFF	; 255
     650:	ff e8       	ldi	r31, 0x8F	; 143
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <write_byte+0x56>
     656:	00 c0       	rjmp	.+0      	; 0x658 <write_byte+0x5c>
     658:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
     65a:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
     65e:	84 e8       	ldi	r24, 0x84	; 132
     660:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     664:	ec eb       	ldi	r30, 0xBC	; 188
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	88 23       	and	r24, r24
     66c:	ec f7       	brge	.-6      	; 0x668 <write_byte+0x6c>
     66e:	8f ef       	ldi	r24, 0xFF	; 255
     670:	9f e8       	ldi	r25, 0x8F	; 143
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <write_byte+0x76>
     676:	00 c0       	rjmp	.+0      	; 0x678 <write_byte+0x7c>
     678:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
     67a:	84 e9       	ldi	r24, 0x94	; 148
     67c:	80 93 bc 00 	sts	0x00BC, r24
}
     680:	08 95       	ret

00000682 <read_byte>:
unsigned char read_byte(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
     682:	94 ea       	ldi	r25, 0xA4	; 164
     684:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     688:	ec eb       	ldi	r30, 0xBC	; 188
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	90 81       	ld	r25, Z
     68e:	99 23       	and	r25, r25
     690:	ec f7       	brge	.-6      	; 0x68c <read_byte+0xa>

 

 TWDR = SLA_W;									   // load SLA_W into TWDR Register
     692:	96 ea       	ldi	r25, 0xA6	; 166
     694:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     698:	94 e8       	ldi	r25, 0x84	; 132
     69a:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     69e:	ec eb       	ldi	r30, 0xBC	; 188
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	90 81       	ld	r25, Z
     6a4:	99 23       	and	r25, r25
     6a6:	ec f7       	brge	.-6      	; 0x6a2 <read_byte+0x20>

 TWDR = address;                                   // send address of register byte want to access register
     6a8:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     6ac:	84 e8       	ldi	r24, 0x84	; 132
     6ae:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     6b2:	ec eb       	ldi	r30, 0xBC	; 188
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	80 81       	ld	r24, Z
     6b8:	88 23       	and	r24, r24
     6ba:	ec f7       	brge	.-6      	; 0x6b6 <read_byte+0x34>
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
     6bc:	84 ea       	ldi	r24, 0xA4	; 164
     6be:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     6c2:	ec eb       	ldi	r30, 0xBC	; 188
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	80 81       	ld	r24, Z
     6c8:	88 23       	and	r24, r24
     6ca:	ec f7       	brge	.-6      	; 0x6c6 <read_byte+0x44>


 
 TWDR = SLA_R;									   // load SLA_R into TWDR Register
     6cc:	87 ea       	ldi	r24, 0xA7	; 167
     6ce:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     6d2:	84 e8       	ldi	r24, 0x84	; 132
     6d4:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     6d8:	ec eb       	ldi	r30, 0xBC	; 188
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	80 81       	ld	r24, Z
     6de:	88 23       	and	r24, r24
     6e0:	ec f7       	brge	.-6      	; 0x6dc <read_byte+0x5a>
 
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
     6e2:	84 e8       	ldi	r24, 0x84	; 132
     6e4:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     6e8:	ec eb       	ldi	r30, 0xBC	; 188
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	88 23       	and	r24, r24
     6f0:	ec f7       	brge	.-6      	; 0x6ec <read_byte+0x6a>
 rtc_recv_data = TWDR;
     6f2:	eb eb       	ldi	r30, 0xBB	; 187
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
 
 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
     6f8:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
     6fa:	94 e8       	ldi	r25, 0x84	; 132
     6fc:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     700:	ec eb       	ldi	r30, 0xBC	; 188
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	90 81       	ld	r25, Z
     706:	99 23       	and	r25, r25
     708:	ec f7       	brge	.-6      	; 0x704 <read_byte+0x82>
  
 return(rtc_recv_data);                            // return the read value to called function
}
     70a:	08 95       	ret

0000070c <init_devices>:


// initialise the devices 
void init_devices()
{
 cli();              // disable all interrupts 
     70c:	f8 94       	cli
 lcd_port_config();  // configure the LCD port 
     70e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <lcd_port_config>
 lcd_set_4bit();
     712:	0e 94 84 01 	call	0x308	; 0x308 <lcd_set_4bit>
 lcd_init();
     716:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_init>
 twi_init();         // configur the I2cC, i.e TWI module 
     71a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <twi_init>
 sei();              // re-enable interrupts
     71e:	78 94       	sei
 //all peripherals are now initialized
}
     720:	08 95       	ret

00000722 <pr_int>:

void pr_int(int a,int b,int c,int d) /* get negative values*/
{
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	c8 2f       	mov	r28, r24
     730:	d6 2f       	mov	r29, r22
     732:	8a 01       	movw	r16, r20
     734:	79 01       	movw	r14, r18
	if (c<0)
     736:	55 23       	and	r21, r21
     738:	a4 f4       	brge	.+40     	; 0x762 <pr_int+0x40>
	{
		lcd_cursor(a,b);
     73a:	0e 94 39 02 	call	0x472	; 0x472 <lcd_cursor>
		lcd_string("-");
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	92 e0       	ldi	r25, 0x02	; 2
     742:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_string>
		lcd_print(a,b+1,abs(c),d);
     746:	6d 2f       	mov	r22, r29
     748:	6f 5f       	subi	r22, 0xFF	; 255
     74a:	a8 01       	movw	r20, r16
     74c:	11 23       	and	r17, r17
     74e:	24 f4       	brge	.+8      	; 0x758 <pr_int+0x36>
     750:	44 27       	eor	r20, r20
     752:	55 27       	eor	r21, r21
     754:	40 1b       	sub	r20, r16
     756:	51 0b       	sbc	r21, r17
     758:	8c 2f       	mov	r24, r28
     75a:	97 01       	movw	r18, r14
     75c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_print>
     760:	0d c0       	rjmp	.+26     	; 0x77c <pr_int+0x5a>
	} 
	else
	{
		lcd_cursor(a,b);
     762:	0e 94 39 02 	call	0x472	; 0x472 <lcd_cursor>
		lcd_string("+");
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_string>
		lcd_print(a,b+1,c,d);
     76e:	6d 2f       	mov	r22, r29
     770:	6f 5f       	subi	r22, 0xFF	; 255
     772:	8c 2f       	mov	r24, r28
     774:	a8 01       	movw	r20, r16
     776:	97 01       	movw	r18, r14
     778:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_print>
	}
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	08 95       	ret

0000078a <sign>:
		return (n-65536);
	}
	else
		return n;
		
}
     78a:	08 95       	ret

0000078c <init_adxl>:
// Main Programme start here.
//-------------------------------------------------------------------------------
void init_adxl(void)
{   
 
 init_devices();
     78c:	0e 94 86 03 	call	0x70c	; 0x70c <init_devices>

	write_byte(0x0,0x2D);
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	6d e2       	ldi	r22, 0x2D	; 45
     794:	0e 94 fe 02 	call	0x5fc	; 0x5fc <write_byte>
	write_byte(0x8,0x2D);
     798:	88 e0       	ldi	r24, 0x08	; 8
     79a:	6d e2       	ldi	r22, 0x2D	; 45
     79c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <write_byte>
}
     7a0:	08 95       	ret

000007a2 <acc_angle>:

int acc_angle(void)
{
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
		int x_acc,y_acc,z_acc;
		//long x,y,z;
		float angle;
 
	  
	   x_byte1 = read_byte(X1);
     7b2:	82 e3       	ldi	r24, 0x32	; 50
     7b4:	0e 94 41 03 	call	0x682	; 0x682 <read_byte>
	   //x_byte1=(x_byte1*1000)/256;
	   //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte(X2);
     7b8:	83 e3       	ldi	r24, 0x33	; 51
     7ba:	0e 94 41 03 	call	0x682	; 0x682 <read_byte>
	   //lcd_print(2,1,abs(x_byte2),3);
	   
	   y_byte1 = read_byte(Y1);
     7be:	84 e3       	ldi	r24, 0x34	; 52
     7c0:	0e 94 41 03 	call	0x682	; 0x682 <read_byte>
     7c4:	08 2f       	mov	r16, r24
	   //lcd_print(1,6,y_byte1,3);
	   
	   y_byte2 = read_byte(Y2);
     7c6:	85 e3       	ldi	r24, 0x35	; 53
     7c8:	0e 94 41 03 	call	0x682	; 0x682 <read_byte>
     7cc:	d8 2f       	mov	r29, r24
	   //lcd_print(2,6,y_byte2,3);
	   
	   z_byte1 = read_byte(Z1);
     7ce:	86 e3       	ldi	r24, 0x36	; 54
     7d0:	0e 94 41 03 	call	0x682	; 0x682 <read_byte>
     7d4:	c8 2f       	mov	r28, r24
	   //lcd_print(1,10,z_byte1,3);
	   
	   z_byte2 = read_byte(Z2);
     7d6:	87 e3       	ldi	r24, 0x37	; 55
     7d8:	0e 94 41 03 	call	0x682	; 0x682 <read_byte>
     7dc:	c8 2e       	mov	r12, r24
	  x_acc=sign(x_byte);
	  
	  //pr_int(1,1,x_byte,3); 
	  
	  y_byte=y_byte2;
	  y_byte = (y_byte << 8);
     7de:	3d 2f       	mov	r19, r29
     7e0:	20 e0       	ldi	r18, 0x00	; 0
	  y_byte |= y_byte1;
     7e2:	80 2f       	mov	r24, r16
     7e4:	90 e0       	ldi	r25, 0x00	; 0
	  y_acc=sign(y_byte);
     7e6:	82 2b       	or	r24, r18
     7e8:	93 2b       	or	r25, r19
     7ea:	0e 94 c5 03 	call	0x78a	; 0x78a <sign>
     7ee:	8c 01       	movw	r16, r24
	  
	  //pr_int(2,5,y_byte,3); 	
	  
	  z_byte=z_byte2;
	  z_byte = (z_byte << 8);
     7f0:	3c 2d       	mov	r19, r12
     7f2:	20 e0       	ldi	r18, 0x00	; 0
	  z_byte |= z_byte1;
     7f4:	8c 2f       	mov	r24, r28
     7f6:	90 e0       	ldi	r25, 0x00	; 0
	  z_acc=sign(z_byte);
     7f8:	82 2b       	or	r24, r18
     7fa:	93 2b       	or	r25, r19
     7fc:	0e 94 c5 03 	call	0x78a	; 0x78a <sign>
     800:	ec 01       	movw	r28, r24
	  
	  
	  //pr_int(1,10,z_byte,3);  
	  
	  angle=(atan((y_acc*1.0)/(z_acc*1.0)));
     802:	b8 01       	movw	r22, r16
     804:	88 27       	eor	r24, r24
     806:	77 fd       	sbrc	r23, 7
     808:	80 95       	com	r24
     80a:	98 2f       	mov	r25, r24
     80c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__floatsisf>
     810:	6b 01       	movw	r12, r22
     812:	7c 01       	movw	r14, r24
     814:	be 01       	movw	r22, r28
     816:	88 27       	eor	r24, r24
     818:	77 fd       	sbrc	r23, 7
     81a:	80 95       	com	r24
     81c:	98 2f       	mov	r25, r24
     81e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__floatsisf>
     822:	9b 01       	movw	r18, r22
     824:	ac 01       	movw	r20, r24
     826:	c7 01       	movw	r24, r14
     828:	b6 01       	movw	r22, r12
     82a:	0e 94 df 0a 	call	0x15be	; 0x15be <__divsf3>
     82e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <atan>
	  angle *= 1800.0/3.14;
     832:	26 ee       	ldi	r18, 0xE6	; 230
     834:	3f e4       	ldi	r19, 0x4F	; 79
     836:	4f e0       	ldi	r20, 0x0F	; 15
     838:	54 e4       	ldi	r21, 0x44	; 68
     83a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
	  //pr_int(1,1,angle,3);
	  
	return angle;
     83e:	0e 94 47 0b 	call	0x168e	; 0x168e <__fixsfsi>
}
     842:	86 2f       	mov	r24, r22
     844:	97 2f       	mov	r25, r23
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	1f 91       	pop	r17
     84c:	0f 91       	pop	r16
     84e:	ff 90       	pop	r15
     850:	ef 90       	pop	r14
     852:	df 90       	pop	r13
     854:	cf 90       	pop	r12
     856:	08 95       	ret

00000858 <write_byte_gyro>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte_gyro(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
     858:	94 ea       	ldi	r25, 0xA4	; 164
     85a:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     85e:	ec eb       	ldi	r30, 0xBC	; 188
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	90 81       	ld	r25, Z
     864:	99 23       	and	r25, r25
     866:	ec f7       	brge	.-6      	; 0x862 <write_byte_gyro+0xa>
     868:	ef ef       	ldi	r30, 0xFF	; 255
     86a:	ff e8       	ldi	r31, 0x8F	; 143
     86c:	31 97       	sbiw	r30, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <write_byte_gyro+0x14>
     870:	00 c0       	rjmp	.+0      	; 0x872 <write_byte_gyro+0x1a>
     872:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLAVE_W;                                     // load SLA_W into TWDR Register
     874:	92 ed       	ldi	r25, 0xD2	; 210
     876:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     87a:	94 e8       	ldi	r25, 0x84	; 132
     87c:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     880:	ec eb       	ldi	r30, 0xBC	; 188
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	90 81       	ld	r25, Z
     886:	99 23       	and	r25, r25
     888:	ec f7       	brge	.-6      	; 0x884 <write_byte_gyro+0x2c>
     88a:	ef ef       	ldi	r30, 0xFF	; 255
     88c:	ff e8       	ldi	r31, 0x8F	; 143
     88e:	31 97       	sbiw	r30, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <write_byte_gyro+0x36>
     892:	00 c0       	rjmp	.+0      	; 0x894 <write_byte_gyro+0x3c>
     894:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
     896:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
     89a:	94 e8       	ldi	r25, 0x84	; 132
     89c:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8a0:	ec eb       	ldi	r30, 0xBC	; 188
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	90 81       	ld	r25, Z
     8a6:	99 23       	and	r25, r25
     8a8:	ec f7       	brge	.-6      	; 0x8a4 <write_byte_gyro+0x4c>
     8aa:	ef ef       	ldi	r30, 0xFF	; 255
     8ac:	ff e8       	ldi	r31, 0x8F	; 143
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <write_byte_gyro+0x56>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <write_byte_gyro+0x5c>
     8b4:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
     8b6:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
     8ba:	84 e8       	ldi	r24, 0x84	; 132
     8bc:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8c0:	ec eb       	ldi	r30, 0xBC	; 188
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	88 23       	and	r24, r24
     8c8:	ec f7       	brge	.-6      	; 0x8c4 <write_byte_gyro+0x6c>
     8ca:	8f ef       	ldi	r24, 0xFF	; 255
     8cc:	9f e8       	ldi	r25, 0x8F	; 143
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <write_byte_gyro+0x76>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <write_byte_gyro+0x7c>
     8d4:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
     8d6:	84 e9       	ldi	r24, 0x94	; 148
     8d8:	80 93 bc 00 	sts	0x00BC, r24
}
     8dc:	08 95       	ret

000008de <read_byte_gyro>:
unsigned char read_byte_gyro(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
     8de:	94 ea       	ldi	r25, 0xA4	; 164
     8e0:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8e4:	ec eb       	ldi	r30, 0xBC	; 188
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	90 81       	ld	r25, Z
     8ea:	99 23       	and	r25, r25
     8ec:	ec f7       	brge	.-6      	; 0x8e8 <read_byte_gyro+0xa>
 //_delay_ms(10);

 

 TWDR = SLAVE_W;									   // load SLA_W into TWDR Register
     8ee:	92 ed       	ldi	r25, 0xD2	; 210
     8f0:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     8f4:	94 e8       	ldi	r25, 0x84	; 132
     8f6:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8fa:	ec eb       	ldi	r30, 0xBC	; 188
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	90 81       	ld	r25, Z
     900:	99 23       	and	r25, r25
     902:	ec f7       	brge	.-6      	; 0x8fe <read_byte_gyro+0x20>
 //_delay_ms(10); 

 TWDR = address;                                   // send address of register byte want to access register
     904:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     908:	84 e8       	ldi	r24, 0x84	; 132
     90a:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     90e:	ec eb       	ldi	r30, 0xBC	; 188
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	80 81       	ld	r24, Z
     914:	88 23       	and	r24, r24
     916:	ec f7       	brge	.-6      	; 0x912 <read_byte_gyro+0x34>
// _delay_ms(10);
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
     918:	84 ea       	ldi	r24, 0xA4	; 164
     91a:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     91e:	ec eb       	ldi	r30, 0xBC	; 188
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	88 23       	and	r24, r24
     926:	ec f7       	brge	.-6      	; 0x922 <read_byte_gyro+0x44>
 //_delay_ms(10);


 
 TWDR = SLAVE_R;									   // load SLA_R into TWDR Register
     928:	83 ed       	ldi	r24, 0xD3	; 211
     92a:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     92e:	84 e8       	ldi	r24, 0x84	; 132
     930:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     934:	ec eb       	ldi	r30, 0xBC	; 188
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	88 23       	and	r24, r24
     93c:	ec f7       	brge	.-6      	; 0x938 <read_byte_gyro+0x5a>
 //_delay_ms(10);
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
     93e:	84 e8       	ldi	r24, 0x84	; 132
     940:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     944:	ec eb       	ldi	r30, 0xBC	; 188
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	80 81       	ld	r24, Z
     94a:	88 23       	and	r24, r24
     94c:	ec f7       	brge	.-6      	; 0x948 <read_byte_gyro+0x6a>
 rtc_recv_data = TWDR;
     94e:	eb eb       	ldi	r30, 0xBB	; 187
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
 //_delay_ms(10);
 

 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
     954:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
     956:	94 e8       	ldi	r25, 0x84	; 132
     958:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     95c:	ec eb       	ldi	r30, 0xBC	; 188
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	90 81       	ld	r25, Z
     962:	99 23       	and	r25, r25
     964:	ec f7       	brge	.-6      	; 0x960 <read_byte_gyro+0x82>
 //_delay_ms(10);
  
 return(rtc_recv_data);                            // return the read value to called function
}
     966:	08 95       	ret

00000968 <init_gyro>:

void init_gyro(void)
{   
 

	 write_byte_gyro(0x0F,0x20);       //Normal mode of control reg.1
     968:	8f e0       	ldi	r24, 0x0F	; 15
     96a:	60 e2       	ldi	r22, 0x20	; 32
     96c:	0e 94 2c 04 	call	0x858	; 0x858 <write_byte_gyro>
}
     970:	08 95       	ret

00000972 <comp_filter>:

//Complementary filter
float comp_filter(float newAngle,  float newRate) 
{   
     972:	4f 92       	push	r4
     974:	5f 92       	push	r5
     976:	6f 92       	push	r6
     978:	7f 92       	push	r7
     97a:	8f 92       	push	r8
     97c:	9f 92       	push	r9
     97e:	af 92       	push	r10
     980:	bf 92       	push	r11
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	00 d0       	rcall	.+0      	; 0x994 <comp_filter+0x22>
     994:	0f 92       	push	r0
     996:	cd b7       	in	r28, 0x3d	; 61
     998:	de b7       	in	r29, 0x3e	; 62
     99a:	29 83       	std	Y+1, r18	; 0x01
     99c:	3a 83       	std	Y+2, r19	; 0x02
     99e:	4b 83       	std	Y+3, r20	; 0x03
     9a0:	5c 83       	std	Y+4, r21	; 0x04
	float filterTerm2;
	float timeConstant;

	timeConstant=30; // default 1.0

	filterTerm0 = (newAngle - filterAngle) * timeConstant * timeConstant;
     9a2:	80 90 1e 02 	lds	r8, 0x021E
     9a6:	90 90 1f 02 	lds	r9, 0x021F
     9aa:	a0 90 20 02 	lds	r10, 0x0220
     9ae:	b0 90 21 02 	lds	r11, 0x0221
     9b2:	a5 01       	movw	r20, r10
     9b4:	94 01       	movw	r18, r8
     9b6:	0e 94 4e 0a 	call	0x149c	; 0x149c <__subsf3>
     9ba:	c6 2e       	mov	r12, r22
     9bc:	d7 2e       	mov	r13, r23
     9be:	f8 2e       	mov	r15, r24
     9c0:	e9 2e       	mov	r14, r25
	filterTerm2  += filterTerm0 * dt;
	filterTerm1 = filterTerm2 + ((newAngle - filterAngle) * 2 * timeConstant) + newRate;
     9c2:	38 2f       	mov	r19, r24
     9c4:	86 2f       	mov	r24, r22
     9c6:	9d 2d       	mov	r25, r13
     9c8:	af 2d       	mov	r26, r15
     9ca:	be 2d       	mov	r27, r14
     9cc:	bc 01       	movw	r22, r24
     9ce:	cd 01       	movw	r24, r26
     9d0:	0c 2d       	mov	r16, r12
     9d2:	1d 2d       	mov	r17, r13
     9d4:	23 2f       	mov	r18, r19
     9d6:	3b 2f       	mov	r19, r27
     9d8:	a9 01       	movw	r20, r18
     9da:	98 01       	movw	r18, r16
     9dc:	0e 94 4f 0a 	call	0x149e	; 0x149e <__addsf3>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 ef       	ldi	r20, 0xF0	; 240
     9e6:	51 e4       	ldi	r21, 0x41	; 65
     9e8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
     9ec:	2b 01       	movw	r4, r22
     9ee:	3c 01       	movw	r6, r24
	float filterTerm2;
	float timeConstant;

	timeConstant=30; // default 1.0

	filterTerm0 = (newAngle - filterAngle) * timeConstant * timeConstant;
     9f0:	80 2f       	mov	r24, r16
     9f2:	91 2f       	mov	r25, r17
     9f4:	af 2d       	mov	r26, r15
     9f6:	be 2d       	mov	r27, r14
     9f8:	bc 01       	movw	r22, r24
     9fa:	cd 01       	movw	r24, r26
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 ef       	ldi	r20, 0xF0	; 240
     a02:	51 e4       	ldi	r21, 0x41	; 65
     a04:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	40 ef       	ldi	r20, 0xF0	; 240
     a0e:	51 e4       	ldi	r21, 0x41	; 65
     a10:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
	filterTerm2  += filterTerm0 * dt;
     a14:	2a e0       	ldi	r18, 0x0A	; 10
     a16:	37 ed       	ldi	r19, 0xD7	; 215
     a18:	43 e2       	ldi	r20, 0x23	; 35
     a1a:	5c e3       	ldi	r21, 0x3C	; 60
     a1c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	a9 01       	movw	r20, r18
     a26:	0e 94 4f 0a 	call	0x149e	; 0x149e <__addsf3>
     a2a:	9b 01       	movw	r18, r22
     a2c:	ac 01       	movw	r20, r24
	filterTerm1 = filterTerm2 + ((newAngle - filterAngle) * 2 * timeConstant) + newRate;
     a2e:	c3 01       	movw	r24, r6
     a30:	b2 01       	movw	r22, r4
     a32:	0e 94 4f 0a 	call	0x149e	; 0x149e <__addsf3>
     a36:	29 81       	ldd	r18, Y+1	; 0x01
     a38:	3a 81       	ldd	r19, Y+2	; 0x02
     a3a:	4b 81       	ldd	r20, Y+3	; 0x03
     a3c:	5c 81       	ldd	r21, Y+4	; 0x04
     a3e:	0e 94 4f 0a 	call	0x149e	; 0x149e <__addsf3>
	filterAngle = (filterTerm1 * dt) + filterAngle;
     a42:	2a e0       	ldi	r18, 0x0A	; 10
     a44:	37 ed       	ldi	r19, 0xD7	; 215
     a46:	43 e2       	ldi	r20, 0x23	; 35
     a48:	5c e3       	ldi	r21, 0x3C	; 60
     a4a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
     a4e:	9b 01       	movw	r18, r22
     a50:	ac 01       	movw	r20, r24
     a52:	c5 01       	movw	r24, r10
     a54:	b4 01       	movw	r22, r8
     a56:	0e 94 4f 0a 	call	0x149e	; 0x149e <__addsf3>
     a5a:	26 2f       	mov	r18, r22
     a5c:	37 2f       	mov	r19, r23
     a5e:	f8 2f       	mov	r31, r24
     a60:	e9 2f       	mov	r30, r25
     a62:	46 2f       	mov	r20, r22
     a64:	57 2f       	mov	r21, r23
     a66:	68 2f       	mov	r22, r24
     a68:	79 2f       	mov	r23, r25
     a6a:	40 93 1e 02 	sts	0x021E, r20
     a6e:	50 93 1f 02 	sts	0x021F, r21
     a72:	60 93 20 02 	sts	0x0220, r22
     a76:	70 93 21 02 	sts	0x0221, r23

	return filterAngle; // This is actually the current angle, but is stored for the next iteration
}
     a7a:	82 2f       	mov	r24, r18
     a7c:	93 2f       	mov	r25, r19
     a7e:	af 2f       	mov	r26, r31
     a80:	be 2f       	mov	r27, r30
     a82:	bc 01       	movw	r22, r24
     a84:	cd 01       	movw	r24, r26
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	cf 90       	pop	r12
     a9e:	bf 90       	pop	r11
     aa0:	af 90       	pop	r10
     aa2:	9f 90       	pop	r9
     aa4:	8f 90       	pop	r8
     aa6:	7f 90       	pop	r7
     aa8:	6f 90       	pop	r6
     aaa:	5f 90       	pop	r5
     aac:	4f 90       	pop	r4
     aae:	08 95       	ret

00000ab0 <gyro_Rate>:
//-------------------------------------
// Main Programme start here.
//-------------------------------------------------------------------------------
float gyro_Rate(void)
{   
     ab0:	cf 93       	push	r28
  int16_t x_ang=0;
  int filt_ang=0;
 
	   
	   
	  x_byte1 = read_byte_gyro(XL);
     ab2:	88 e2       	ldi	r24, 0x28	; 40
     ab4:	0e 94 6f 04 	call	0x8de	; 0x8de <read_byte_gyro>
     ab8:	c8 2f       	mov	r28, r24
	  //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte_gyro(XH);
     aba:	89 e2       	ldi	r24, 0x29	; 41
     abc:	0e 94 6f 04 	call	0x8de	; 0x8de <read_byte_gyro>
	   //lcd_print(2,1,x_byte2,3);
	   
	   x_byte = x_byte2;   // to print 10 bit integer value on LCD
	   x_byte = (x_byte << 8);
     ac0:	38 2f       	mov	r19, r24
     ac2:	20 e0       	ldi	r18, 0x00	; 0
	   x_byte |= x_byte1;
     ac4:	8c 2f       	mov	r24, r28
     ac6:	90 e0       	ldi	r25, 0x00	; 0
	   x_ang = sign(x_byte);
     ac8:	82 2b       	or	r24, r18
     aca:	93 2b       	or	r25, r19
     acc:	0e 94 c5 03 	call	0x78a	; 0x78a <sign>
	   x_ang /=100;
     ad0:	64 e6       	ldi	r22, 0x64	; 100
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__divmodhi4>
	   return x_ang;
     ad8:	88 27       	eor	r24, r24
     ada:	77 fd       	sbrc	r23, 7
     adc:	80 95       	com	r24
     ade:	98 2f       	mov	r25, r24
     ae0:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__floatsisf>
}
     ae4:	46 2f       	mov	r20, r22
     ae6:	57 2f       	mov	r21, r23
     ae8:	68 2f       	mov	r22, r24
     aea:	79 2f       	mov	r23, r25
     aec:	cb 01       	movw	r24, r22
     aee:	ba 01       	movw	r22, r20
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <Compute>:
int para_flag=0;
double error =0;
double Setpoint=0;       //Balanced angle of the bot

void Compute()                          //Function for PID controller
{
     af4:	cf 92       	push	r12
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
	
	/*Compute all the working error variables*/
	error = Input - Setpoint;
     b04:	60 91 3e 02 	lds	r22, 0x023E
     b08:	70 91 3f 02 	lds	r23, 0x023F
     b0c:	80 91 40 02 	lds	r24, 0x0240
     b10:	90 91 41 02 	lds	r25, 0x0241
     b14:	20 91 04 02 	lds	r18, 0x0204
     b18:	30 91 05 02 	lds	r19, 0x0205
     b1c:	40 91 06 02 	lds	r20, 0x0206
     b20:	50 91 07 02 	lds	r21, 0x0207
     b24:	0e 94 4e 0a 	call	0x149c	; 0x149c <__subsf3>
     b28:	d6 2f       	mov	r29, r22
     b2a:	c7 2f       	mov	r28, r23
     b2c:	18 2f       	mov	r17, r24
     b2e:	09 2f       	mov	r16, r25
     b30:	86 2f       	mov	r24, r22
     b32:	9c 2f       	mov	r25, r28
     b34:	a1 2f       	mov	r26, r17
     b36:	b0 2f       	mov	r27, r16
     b38:	80 93 08 02 	sts	0x0208, r24
     b3c:	90 93 09 02 	sts	0x0209, r25
     b40:	a0 93 0a 02 	sts	0x020A, r26
     b44:	b0 93 0b 02 	sts	0x020B, r27
	Iterm += ki*0.01*error;            //Taking the sum of all previous errors to implement integral part of PID
     b48:	60 91 37 02 	lds	r22, 0x0237
     b4c:	70 91 38 02 	lds	r23, 0x0238
     b50:	80 91 39 02 	lds	r24, 0x0239
     b54:	90 91 3a 02 	lds	r25, 0x023A
     b58:	2a e0       	ldi	r18, 0x0A	; 10
     b5a:	37 ed       	ldi	r19, 0xD7	; 215
     b5c:	43 e2       	ldi	r20, 0x23	; 35
     b5e:	5c e3       	ldi	r21, 0x3C	; 60
     b60:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
     b64:	9b 01       	movw	r18, r22
     b66:	ac 01       	movw	r20, r24
     b68:	8d 2f       	mov	r24, r29
     b6a:	9c 2f       	mov	r25, r28
     b6c:	a1 2f       	mov	r26, r17
     b6e:	b0 2f       	mov	r27, r16
     b70:	bc 01       	movw	r22, r24
     b72:	cd 01       	movw	r24, r26
     b74:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
     b78:	20 91 16 02 	lds	r18, 0x0216
     b7c:	30 91 17 02 	lds	r19, 0x0217
     b80:	40 91 18 02 	lds	r20, 0x0218
     b84:	50 91 19 02 	lds	r21, 0x0219
     b88:	0e 94 4f 0a 	call	0x149e	; 0x149e <__addsf3>
     b8c:	06 2f       	mov	r16, r22
     b8e:	17 2f       	mov	r17, r23
     b90:	d8 2f       	mov	r29, r24
     b92:	c9 2f       	mov	r28, r25
     b94:	86 2f       	mov	r24, r22
     b96:	91 2f       	mov	r25, r17
     b98:	ad 2f       	mov	r26, r29
     b9a:	bc 2f       	mov	r27, r28
     b9c:	80 93 16 02 	sts	0x0216, r24
     ba0:	90 93 17 02 	sts	0x0217, r25
     ba4:	a0 93 18 02 	sts	0x0218, r26
     ba8:	b0 93 19 02 	sts	0x0219, r27
	if (Iterm >= 255)                 //Clamping te Integral part
     bac:	bc 01       	movw	r22, r24
     bae:	cd 01       	movw	r24, r26
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	4f e7       	ldi	r20, 0x7F	; 127
     bb6:	53 e4       	ldi	r21, 0x43	; 67
     bb8:	0e 94 4f 0c 	call	0x189e	; 0x189e <__gesf2>
     bbc:	88 23       	and	r24, r24
     bbe:	6c f0       	brlt	.+26     	; 0xbda <Compute+0xe6>
	{
		Iterm = 255;
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	af e7       	ldi	r26, 0x7F	; 127
     bc6:	b3 e4       	ldi	r27, 0x43	; 67
     bc8:	80 93 16 02 	sts	0x0216, r24
     bcc:	90 93 17 02 	sts	0x0217, r25
     bd0:	a0 93 18 02 	sts	0x0218, r26
     bd4:	b0 93 19 02 	sts	0x0219, r27
     bd8:	1a c0       	rjmp	.+52     	; 0xc0e <Compute+0x11a>
	}
	else if (Iterm <= -255)
     bda:	80 2f       	mov	r24, r16
     bdc:	91 2f       	mov	r25, r17
     bde:	ad 2f       	mov	r26, r29
     be0:	bc 2f       	mov	r27, r28
     be2:	bc 01       	movw	r22, r24
     be4:	cd 01       	movw	r24, r26
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	4f e7       	ldi	r20, 0x7F	; 127
     bec:	53 ec       	ldi	r21, 0xC3	; 195
     bee:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__cmpsf2>
     bf2:	18 16       	cp	r1, r24
     bf4:	64 f0       	brlt	.+24     	; 0xc0e <Compute+0x11a>
	{
		Iterm = -255;
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	af e7       	ldi	r26, 0x7F	; 127
     bfc:	b3 ec       	ldi	r27, 0xC3	; 195
     bfe:	80 93 16 02 	sts	0x0216, r24
     c02:	90 93 17 02 	sts	0x0217, r25
     c06:	a0 93 18 02 	sts	0x0218, r26
     c0a:	b0 93 19 02 	sts	0x0219, r27
	}
	
	if(millis(1)>=10)           //condition to take differences after regular interval of time.
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 5e 01 	call	0x2bc	; 0x2bc <millis>
     c16:	8a 30       	cpi	r24, 0x0A	; 10
     c18:	91 05       	cpc	r25, r1
     c1a:	4c f1       	brlt	.+82     	; 0xc6e <Compute+0x17a>
	{
		dErr= (error - lastErr);   //Differential term of PID
     c1c:	c0 90 08 02 	lds	r12, 0x0208
     c20:	d0 90 09 02 	lds	r13, 0x0209
     c24:	e0 90 0a 02 	lds	r14, 0x020A
     c28:	f0 90 0b 02 	lds	r15, 0x020B
     c2c:	c7 01       	movw	r24, r14
     c2e:	b6 01       	movw	r22, r12
     c30:	20 91 33 02 	lds	r18, 0x0233
     c34:	30 91 34 02 	lds	r19, 0x0234
     c38:	40 91 35 02 	lds	r20, 0x0235
     c3c:	50 91 36 02 	lds	r21, 0x0236
     c40:	0e 94 4e 0a 	call	0x149c	; 0x149c <__subsf3>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	80 93 12 02 	sts	0x0212, r24
     c4c:	90 93 13 02 	sts	0x0213, r25
     c50:	a0 93 14 02 	sts	0x0214, r26
     c54:	b0 93 15 02 	sts	0x0215, r27
		lastErr=error;
     c58:	c0 92 33 02 	sts	0x0233, r12
     c5c:	d0 92 34 02 	sts	0x0234, r13
     c60:	e0 92 35 02 	sts	0x0235, r14
     c64:	f0 92 36 02 	sts	0x0236, r15
		start_timer4();
     c68:	0e 94 25 01 	call	0x24a	; 0x24a <start_timer4>
     c6c:	0b c0       	rjmp	.+22     	; 0xc84 <Compute+0x190>
	}
	else
	{
		dErr=0;
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	dc 01       	movw	r26, r24
     c74:	80 93 12 02 	sts	0x0212, r24
     c78:	90 93 13 02 	sts	0x0213, r25
     c7c:	a0 93 14 02 	sts	0x0214, r26
     c80:	b0 93 15 02 	sts	0x0215, r27
	}
	
	Output = kp*error + Iterm + kd*0.1*dErr;                      //Compute PID Output
     c84:	60 91 46 02 	lds	r22, 0x0246
     c88:	70 91 47 02 	lds	r23, 0x0247
     c8c:	80 91 48 02 	lds	r24, 0x0248
     c90:	90 91 49 02 	lds	r25, 0x0249
     c94:	20 91 08 02 	lds	r18, 0x0208
     c98:	30 91 09 02 	lds	r19, 0x0209
     c9c:	40 91 0a 02 	lds	r20, 0x020A
     ca0:	50 91 0b 02 	lds	r21, 0x020B
     ca4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
     ca8:	20 91 16 02 	lds	r18, 0x0216
     cac:	30 91 17 02 	lds	r19, 0x0217
     cb0:	40 91 18 02 	lds	r20, 0x0218
     cb4:	50 91 19 02 	lds	r21, 0x0219
     cb8:	0e 94 4f 0a 	call	0x149e	; 0x149e <__addsf3>
     cbc:	6b 01       	movw	r12, r22
     cbe:	7c 01       	movw	r14, r24
     cc0:	60 91 22 02 	lds	r22, 0x0222
     cc4:	70 91 23 02 	lds	r23, 0x0223
     cc8:	80 91 24 02 	lds	r24, 0x0224
     ccc:	90 91 25 02 	lds	r25, 0x0225
     cd0:	2d ec       	ldi	r18, 0xCD	; 205
     cd2:	3c ec       	ldi	r19, 0xCC	; 204
     cd4:	4c ec       	ldi	r20, 0xCC	; 204
     cd6:	5d e3       	ldi	r21, 0x3D	; 61
     cd8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
     cdc:	20 91 12 02 	lds	r18, 0x0212
     ce0:	30 91 13 02 	lds	r19, 0x0213
     ce4:	40 91 14 02 	lds	r20, 0x0214
     ce8:	50 91 15 02 	lds	r21, 0x0215
     cec:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
     cf0:	9b 01       	movw	r18, r22
     cf2:	ac 01       	movw	r20, r24
     cf4:	c7 01       	movw	r24, r14
     cf6:	b6 01       	movw	r22, r12
     cf8:	0e 94 4f 0a 	call	0x149e	; 0x149e <__addsf3>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	80 93 2d 02 	sts	0x022D, r24
     d04:	90 93 2e 02 	sts	0x022E, r25
     d08:	a0 93 2f 02 	sts	0x022F, r26
     d0c:	b0 93 30 02 	sts	0x0230, r27
}
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	df 90       	pop	r13
     d1e:	cf 90       	pop	r12
     d20:	08 95       	ret

00000d22 <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00;                //disable while setting baud rate
     d22:	e1 ec       	ldi	r30, 0xC1	; 193
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	10 82       	st	Z, r1
	UCSR0A = 0x00;
     d28:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
     d2c:	86 e0       	ldi	r24, 0x06	; 6
     d2e:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 0x5F;                // 14745600 Hzset baud rate lo
     d32:	8f e5       	ldi	r24, 0x5F	; 95
     d34:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00;                //set baud rate hi
     d38:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
     d3c:	88 e9       	ldi	r24, 0x98	; 152
     d3e:	80 83       	st	Z, r24
}
     d40:	08 95       	ret

00000d42 <__vector_25>:

ISR(USART0_RX_vect)
{
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	0b b6       	in	r0, 0x3b	; 59
     d4c:	0f 92       	push	r0
     d4e:	11 24       	eor	r1, r1
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	2f 93       	push	r18
     d56:	3f 93       	push	r19
     d58:	4f 93       	push	r20
     d5a:	5f 93       	push	r21
     d5c:	6f 93       	push	r22
     d5e:	7f 93       	push	r23
     d60:	8f 93       	push	r24
     d62:	9f 93       	push	r25
     d64:	af 93       	push	r26
     d66:	bf 93       	push	r27
     d68:	ef 93       	push	r30
     d6a:	ff 93       	push	r31
	data = UDR0;
     d6c:	80 91 c6 00 	lds	r24, 0x00C6
     d70:	80 93 3b 02 	sts	0x023B, r24
	if (data == 55)
     d74:	87 33       	cpi	r24, 0x37	; 55
     d76:	b9 f4       	brne	.+46     	; 0xda6 <__vector_25+0x64>
	{
		para = kp;
     d78:	80 91 46 02 	lds	r24, 0x0246
     d7c:	90 91 47 02 	lds	r25, 0x0247
     d80:	a0 91 48 02 	lds	r26, 0x0248
     d84:	b0 91 49 02 	lds	r27, 0x0249
     d88:	80 93 0e 02 	sts	0x020E, r24
     d8c:	90 93 0f 02 	sts	0x020F, r25
     d90:	a0 93 10 02 	sts	0x0210, r26
     d94:	b0 93 11 02 	sts	0x0211, r27
		para_flag=1;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	90 93 0d 02 	sts	0x020D, r25
     da0:	80 93 0c 02 	sts	0x020C, r24
     da4:	54 c0       	rjmp	.+168    	; 0xe4e <__vector_25+0x10c>
		
	}
	else if (data == 56)
     da6:	88 33       	cpi	r24, 0x38	; 56
     da8:	b9 f4       	brne	.+46     	; 0xdd8 <__vector_25+0x96>
	{
		para = ki;
     daa:	80 91 37 02 	lds	r24, 0x0237
     dae:	90 91 38 02 	lds	r25, 0x0238
     db2:	a0 91 39 02 	lds	r26, 0x0239
     db6:	b0 91 3a 02 	lds	r27, 0x023A
     dba:	80 93 0e 02 	sts	0x020E, r24
     dbe:	90 93 0f 02 	sts	0x020F, r25
     dc2:	a0 93 10 02 	sts	0x0210, r26
     dc6:	b0 93 11 02 	sts	0x0211, r27
		para_flag=2;
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	90 93 0d 02 	sts	0x020D, r25
     dd2:	80 93 0c 02 	sts	0x020C, r24
     dd6:	3b c0       	rjmp	.+118    	; 0xe4e <__vector_25+0x10c>
	}
	else if (data == 57)
     dd8:	89 33       	cpi	r24, 0x39	; 57
     dda:	b9 f4       	brne	.+46     	; 0xe0a <__vector_25+0xc8>
	{
		para = kd;
     ddc:	80 91 22 02 	lds	r24, 0x0222
     de0:	90 91 23 02 	lds	r25, 0x0223
     de4:	a0 91 24 02 	lds	r26, 0x0224
     de8:	b0 91 25 02 	lds	r27, 0x0225
     dec:	80 93 0e 02 	sts	0x020E, r24
     df0:	90 93 0f 02 	sts	0x020F, r25
     df4:	a0 93 10 02 	sts	0x0210, r26
     df8:	b0 93 11 02 	sts	0x0211, r27
		para_flag=3;
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	90 93 0d 02 	sts	0x020D, r25
     e04:	80 93 0c 02 	sts	0x020C, r24
     e08:	22 c0       	rjmp	.+68     	; 0xe4e <__vector_25+0x10c>
	}
	else if (data == 48)
     e0a:	80 33       	cpi	r24, 0x30	; 48
     e0c:	b9 f4       	brne	.+46     	; 0xe3c <__vector_25+0xfa>
	{
		para = Setpoint;
     e0e:	80 91 04 02 	lds	r24, 0x0204
     e12:	90 91 05 02 	lds	r25, 0x0205
     e16:	a0 91 06 02 	lds	r26, 0x0206
     e1a:	b0 91 07 02 	lds	r27, 0x0207
     e1e:	80 93 0e 02 	sts	0x020E, r24
     e22:	90 93 0f 02 	sts	0x020F, r25
     e26:	a0 93 10 02 	sts	0x0210, r26
     e2a:	b0 93 11 02 	sts	0x0211, r27
		para_flag=4;
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	90 93 0d 02 	sts	0x020D, r25
     e36:	80 93 0c 02 	sts	0x020C, r24
     e3a:	09 c0       	rjmp	.+18     	; 0xe4e <__vector_25+0x10c>
	}
	else if (data == 97)
     e3c:	81 36       	cpi	r24, 0x61	; 97
     e3e:	19 f4       	brne	.+6      	; 0xe46 <__vector_25+0x104>
	{
		pid_left();
     e40:	0e 94 cc 00 	call	0x198	; 0x198 <pid_left>
     e44:	04 c0       	rjmp	.+8      	; 0xe4e <__vector_25+0x10c>
	}
	else if (data == 100)
     e46:	84 36       	cpi	r24, 0x64	; 100
     e48:	11 f4       	brne	.+4      	; 0xe4e <__vector_25+0x10c>
	{
		pid_right();
     e4a:	0e 94 ac 00 	call	0x158	; 0x158 <pid_right>
	}
	
	
	
	if (data==49)
     e4e:	80 91 3b 02 	lds	r24, 0x023B
     e52:	81 33       	cpi	r24, 0x31	; 49
     e54:	c9 f4       	brne	.+50     	; 0xe88 <__vector_25+0x146>
	{
		para++;
     e56:	60 91 0e 02 	lds	r22, 0x020E
     e5a:	70 91 0f 02 	lds	r23, 0x020F
     e5e:	80 91 10 02 	lds	r24, 0x0210
     e62:	90 91 11 02 	lds	r25, 0x0211
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e8       	ldi	r20, 0x80	; 128
     e6c:	5f e3       	ldi	r21, 0x3F	; 63
     e6e:	0e 94 4f 0a 	call	0x149e	; 0x149e <__addsf3>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	80 93 0e 02 	sts	0x020E, r24
     e7a:	90 93 0f 02 	sts	0x020F, r25
     e7e:	a0 93 10 02 	sts	0x0210, r26
     e82:	b0 93 11 02 	sts	0x0211, r27
     e86:	86 c0       	rjmp	.+268    	; 0xf94 <__vector_25+0x252>
	}
	else if (data==50)
     e88:	82 33       	cpi	r24, 0x32	; 50
     e8a:	c9 f4       	brne	.+50     	; 0xebe <__vector_25+0x17c>
	{
		para += 5;
     e8c:	60 91 0e 02 	lds	r22, 0x020E
     e90:	70 91 0f 02 	lds	r23, 0x020F
     e94:	80 91 10 02 	lds	r24, 0x0210
     e98:	90 91 11 02 	lds	r25, 0x0211
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 ea       	ldi	r20, 0xA0	; 160
     ea2:	50 e4       	ldi	r21, 0x40	; 64
     ea4:	0e 94 4f 0a 	call	0x149e	; 0x149e <__addsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	80 93 0e 02 	sts	0x020E, r24
     eb0:	90 93 0f 02 	sts	0x020F, r25
     eb4:	a0 93 10 02 	sts	0x0210, r26
     eb8:	b0 93 11 02 	sts	0x0211, r27
     ebc:	6b c0       	rjmp	.+214    	; 0xf94 <__vector_25+0x252>
	}
	else if (data==52)
     ebe:	84 33       	cpi	r24, 0x34	; 52
     ec0:	c9 f4       	brne	.+50     	; 0xef4 <__vector_25+0x1b2>
	{
		para--;
     ec2:	60 91 0e 02 	lds	r22, 0x020E
     ec6:	70 91 0f 02 	lds	r23, 0x020F
     eca:	80 91 10 02 	lds	r24, 0x0210
     ece:	90 91 11 02 	lds	r25, 0x0211
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e8       	ldi	r20, 0x80	; 128
     ed8:	5f e3       	ldi	r21, 0x3F	; 63
     eda:	0e 94 4e 0a 	call	0x149c	; 0x149c <__subsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	80 93 0e 02 	sts	0x020E, r24
     ee6:	90 93 0f 02 	sts	0x020F, r25
     eea:	a0 93 10 02 	sts	0x0210, r26
     eee:	b0 93 11 02 	sts	0x0211, r27
     ef2:	50 c0       	rjmp	.+160    	; 0xf94 <__vector_25+0x252>
	}
	else if (data==53)
     ef4:	85 33       	cpi	r24, 0x35	; 53
     ef6:	c9 f4       	brne	.+50     	; 0xf2a <__vector_25+0x1e8>
	{
		para -= 5;
     ef8:	60 91 0e 02 	lds	r22, 0x020E
     efc:	70 91 0f 02 	lds	r23, 0x020F
     f00:	80 91 10 02 	lds	r24, 0x0210
     f04:	90 91 11 02 	lds	r25, 0x0211
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 ea       	ldi	r20, 0xA0	; 160
     f0e:	50 e4       	ldi	r21, 0x40	; 64
     f10:	0e 94 4e 0a 	call	0x149c	; 0x149c <__subsf3>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	80 93 0e 02 	sts	0x020E, r24
     f1c:	90 93 0f 02 	sts	0x020F, r25
     f20:	a0 93 10 02 	sts	0x0210, r26
     f24:	b0 93 11 02 	sts	0x0211, r27
     f28:	35 c0       	rjmp	.+106    	; 0xf94 <__vector_25+0x252>
	}
	else if (data == 51)
     f2a:	83 33       	cpi	r24, 0x33	; 51
     f2c:	c9 f4       	brne	.+50     	; 0xf60 <__vector_25+0x21e>
	{
		para += 0.1;
     f2e:	60 91 0e 02 	lds	r22, 0x020E
     f32:	70 91 0f 02 	lds	r23, 0x020F
     f36:	80 91 10 02 	lds	r24, 0x0210
     f3a:	90 91 11 02 	lds	r25, 0x0211
     f3e:	2d ec       	ldi	r18, 0xCD	; 205
     f40:	3c ec       	ldi	r19, 0xCC	; 204
     f42:	4c ec       	ldi	r20, 0xCC	; 204
     f44:	5d e3       	ldi	r21, 0x3D	; 61
     f46:	0e 94 4f 0a 	call	0x149e	; 0x149e <__addsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	80 93 0e 02 	sts	0x020E, r24
     f52:	90 93 0f 02 	sts	0x020F, r25
     f56:	a0 93 10 02 	sts	0x0210, r26
     f5a:	b0 93 11 02 	sts	0x0211, r27
     f5e:	1a c0       	rjmp	.+52     	; 0xf94 <__vector_25+0x252>
	}
	else if (data == 54)
     f60:	86 33       	cpi	r24, 0x36	; 54
     f62:	c1 f4       	brne	.+48     	; 0xf94 <__vector_25+0x252>
	{
		para -=0.1;
     f64:	60 91 0e 02 	lds	r22, 0x020E
     f68:	70 91 0f 02 	lds	r23, 0x020F
     f6c:	80 91 10 02 	lds	r24, 0x0210
     f70:	90 91 11 02 	lds	r25, 0x0211
     f74:	2d ec       	ldi	r18, 0xCD	; 205
     f76:	3c ec       	ldi	r19, 0xCC	; 204
     f78:	4c ec       	ldi	r20, 0xCC	; 204
     f7a:	5d e3       	ldi	r21, 0x3D	; 61
     f7c:	0e 94 4e 0a 	call	0x149c	; 0x149c <__subsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	80 93 0e 02 	sts	0x020E, r24
     f88:	90 93 0f 02 	sts	0x020F, r25
     f8c:	a0 93 10 02 	sts	0x0210, r26
     f90:	b0 93 11 02 	sts	0x0211, r27
	}
	
	
	if (para_flag == 1)
     f94:	80 91 0c 02 	lds	r24, 0x020C
     f98:	90 91 0d 02 	lds	r25, 0x020D
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	91 05       	cpc	r25, r1
     fa0:	11 f5       	brne	.+68     	; 0xfe6 <__vector_25+0x2a4>
	{
		kp = para;
     fa2:	60 91 0e 02 	lds	r22, 0x020E
     fa6:	70 91 0f 02 	lds	r23, 0x020F
     faa:	80 91 10 02 	lds	r24, 0x0210
     fae:	90 91 11 02 	lds	r25, 0x0211
     fb2:	60 93 46 02 	sts	0x0246, r22
     fb6:	70 93 47 02 	sts	0x0247, r23
     fba:	80 93 48 02 	sts	0x0248, r24
     fbe:	90 93 49 02 	sts	0x0249, r25
		lcd_print(1,1,kp*10,4);
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e2       	ldi	r20, 0x20	; 32
     fc8:	51 e4       	ldi	r21, 0x41	; 65
     fca:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
     fce:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     fd2:	8b 01       	movw	r16, r22
     fd4:	9c 01       	movw	r18, r24
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	61 e0       	ldi	r22, 0x01	; 1
     fda:	a8 01       	movw	r20, r16
     fdc:	24 e0       	ldi	r18, 0x04	; 4
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_print>
     fe4:	70 c0       	rjmp	.+224    	; 0x10c6 <__vector_25+0x384>
	}
	else if (para_flag == 2)
     fe6:	82 30       	cpi	r24, 0x02	; 2
     fe8:	91 05       	cpc	r25, r1
     fea:	11 f5       	brne	.+68     	; 0x1030 <__vector_25+0x2ee>
	{
		ki = para;
     fec:	60 91 0e 02 	lds	r22, 0x020E
     ff0:	70 91 0f 02 	lds	r23, 0x020F
     ff4:	80 91 10 02 	lds	r24, 0x0210
     ff8:	90 91 11 02 	lds	r25, 0x0211
     ffc:	60 93 37 02 	sts	0x0237, r22
    1000:	70 93 38 02 	sts	0x0238, r23
    1004:	80 93 39 02 	sts	0x0239, r24
    1008:	90 93 3a 02 	sts	0x023A, r25
		lcd_print(1,6,ki*10,4);
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e2       	ldi	r20, 0x20	; 32
    1012:	51 e4       	ldi	r21, 0x41	; 65
    1014:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
    1018:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
    101c:	8b 01       	movw	r16, r22
    101e:	9c 01       	movw	r18, r24
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	66 e0       	ldi	r22, 0x06	; 6
    1024:	a8 01       	movw	r20, r16
    1026:	24 e0       	ldi	r18, 0x04	; 4
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_print>
    102e:	4b c0       	rjmp	.+150    	; 0x10c6 <__vector_25+0x384>
	}
	else if (para_flag == 3)
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	91 05       	cpc	r25, r1
    1034:	11 f5       	brne	.+68     	; 0x107a <__vector_25+0x338>
	{
		kd = para;
    1036:	60 91 0e 02 	lds	r22, 0x020E
    103a:	70 91 0f 02 	lds	r23, 0x020F
    103e:	80 91 10 02 	lds	r24, 0x0210
    1042:	90 91 11 02 	lds	r25, 0x0211
    1046:	60 93 22 02 	sts	0x0222, r22
    104a:	70 93 23 02 	sts	0x0223, r23
    104e:	80 93 24 02 	sts	0x0224, r24
    1052:	90 93 25 02 	sts	0x0225, r25
		lcd_print(1,11,kd*10,4);
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e2       	ldi	r20, 0x20	; 32
    105c:	51 e4       	ldi	r21, 0x41	; 65
    105e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
    1062:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
    1066:	8b 01       	movw	r16, r22
    1068:	9c 01       	movw	r18, r24
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	6b e0       	ldi	r22, 0x0B	; 11
    106e:	a8 01       	movw	r20, r16
    1070:	24 e0       	ldi	r18, 0x04	; 4
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_print>
    1078:	26 c0       	rjmp	.+76     	; 0x10c6 <__vector_25+0x384>
	}
	else if (para_flag == 4)
    107a:	84 30       	cpi	r24, 0x04	; 4
    107c:	91 05       	cpc	r25, r1
    107e:	19 f5       	brne	.+70     	; 0x10c6 <__vector_25+0x384>
	{
		Setpoint = para;
    1080:	60 91 0e 02 	lds	r22, 0x020E
    1084:	70 91 0f 02 	lds	r23, 0x020F
    1088:	80 91 10 02 	lds	r24, 0x0210
    108c:	90 91 11 02 	lds	r25, 0x0211
    1090:	60 93 04 02 	sts	0x0204, r22
    1094:	70 93 05 02 	sts	0x0205, r23
    1098:	80 93 06 02 	sts	0x0206, r24
    109c:	90 93 07 02 	sts	0x0207, r25
		pr_int(2,1,Setpoint*10,3);
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e2       	ldi	r20, 0x20	; 32
    10a6:	51 e4       	ldi	r21, 0x41	; 65
    10a8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
    10ac:	0e 94 47 0b 	call	0x168e	; 0x168e <__fixsfsi>
    10b0:	8b 01       	movw	r16, r22
    10b2:	9c 01       	movw	r18, r24
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	a8 01       	movw	r20, r16
    10be:	23 e0       	ldi	r18, 0x03	; 3
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	0e 94 91 03 	call	0x722	; 0x722 <pr_int>
	}
	
}
    10c6:	ff 91       	pop	r31
    10c8:	ef 91       	pop	r30
    10ca:	bf 91       	pop	r27
    10cc:	af 91       	pop	r26
    10ce:	9f 91       	pop	r25
    10d0:	8f 91       	pop	r24
    10d2:	7f 91       	pop	r23
    10d4:	6f 91       	pop	r22
    10d6:	5f 91       	pop	r21
    10d8:	4f 91       	pop	r20
    10da:	3f 91       	pop	r19
    10dc:	2f 91       	pop	r18
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	0f 90       	pop	r0
    10e4:	0b be       	out	0x3b, r0	; 59
    10e6:	0f 90       	pop	r0
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	0f 90       	pop	r0
    10ec:	1f 90       	pop	r1
    10ee:	18 95       	reti

000010f0 <motion_pin_config>:



void motion_pin_config (void)
{
	DDRL = DDRL | 0xE4;    //set direction of the PORTL2.5,6,7 pins as output
    10f0:	aa e0       	ldi	r26, 0x0A	; 10
    10f2:	b1 e0       	ldi	r27, 0x01	; 1
    10f4:	8c 91       	ld	r24, X
    10f6:	84 6e       	ori	r24, 0xE4	; 228
    10f8:	8c 93       	st	X, r24
	PORTL = PORTL & 0x18;  //set initial value of the PORTL2.5,6,7 pins to logic 0
    10fa:	eb e0       	ldi	r30, 0x0B	; 11
    10fc:	f1 e0       	ldi	r31, 0x01	; 1
    10fe:	80 81       	ld	r24, Z
    1100:	88 71       	andi	r24, 0x18	; 24
    1102:	80 83       	st	Z, r24
	DDRL = DDRL | 0x18;    //Setting PL3 and PL4 pins as output for PWM generation
    1104:	8c 91       	ld	r24, X
    1106:	88 61       	ori	r24, 0x18	; 24
    1108:	8c 93       	st	X, r24
	PORTL = PORTL | 0x18;  //PL3 and PL4 pins are for velocity control using PWM
    110a:	80 81       	ld	r24, Z
    110c:	88 61       	ori	r24, 0x18	; 24
    110e:	80 83       	st	Z, r24
}
    1110:	08 95       	ret

00001112 <port_init>:

//Function to initialize ports
void port_init()
{
	motion_pin_config();
    1112:	0e 94 78 08 	call	0x10f0	; 0x10f0 <motion_pin_config>
}
    1116:	08 95       	ret

00001118 <timer5_init>:
// TIMER5 initialize - prescale:1024
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// timer5 value: 56.250Hz
void timer5_init(void)
{
	TCCR5B = 0x00; //stop
    1118:	e1 e2       	ldi	r30, 0x21	; 33
    111a:	f1 e0       	ldi	r31, 0x01	; 1
    111c:	10 82       	st	Z, r1
	TCNT5H = 0xFF; //setup
    111e:	8f ef       	ldi	r24, 0xFF	; 255
    1120:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;
    112a:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;
    112e:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
    1132:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;
    1136:	80 93 2a 01 	sts	0x012A, r24
	TCCR5A = 0xA1;
    113a:	81 ea       	ldi	r24, 0xA1	; 161
    113c:	80 93 20 01 	sts	0x0120, r24
	TCCR5C = 0x00;
    1140:	10 92 22 01 	sts	0x0122, r1
	TCCR5B = 0x0D; //start Timer
    1144:	8d e0       	ldi	r24, 0x0D	; 13
    1146:	80 83       	st	Z, r24
}
    1148:	08 95       	ret

0000114a <set_PWM_value>:

// Function for robot velocity control
void set_PWM_value(unsigned char value) 	//set 8 bit PWM value
{
	OCR5AH = 0x00;
    114a:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = value;  //motor A
    114e:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
    1152:	10 92 2b 01 	sts	0x012B, r1
	if(value<=240)    //Modification to make velocity of two motors equal
    1156:	81 3f       	cpi	r24, 0xF1	; 241
    1158:	20 f4       	brcc	.+8      	; 0x1162 <set_PWM_value+0x18>
	{
		OCR5BL = value+15;    //motor B
    115a:	81 5f       	subi	r24, 0xF1	; 241
    115c:	80 93 2a 01 	sts	0x012A, r24
    1160:	08 95       	ret
	}
	else
	{
		OCR5BL = 255;
    1162:	8f ef       	ldi	r24, 0xFF	; 255
    1164:	80 93 2a 01 	sts	0x012A, r24
    1168:	08 95       	ret

0000116a <motion_set>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortLRestore = 0;

	PortLRestore = PORTL; 			// reading the PORTL's original status
    116a:	eb e0       	ldi	r30, 0x0B	; 11
    116c:	f1 e0       	ldi	r31, 0x01	; 1
    116e:	90 81       	ld	r25, Z
	PortLRestore &= 0x18; 			// setting lower direction nibbel to 0
    1170:	98 71       	andi	r25, 0x18	; 24
	PortLRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTL status
    1172:	89 2b       	or	r24, r25
	PORTL = PortLRestore; 			// setting the command to the port
    1174:	80 83       	st	Z, r24
}
    1176:	08 95       	ret

00001178 <forward>:

void forward (void) 		//both inputs forward
{
	motion_set(0xA0);
    1178:	80 ea       	ldi	r24, 0xA0	; 160
    117a:	0e 94 b5 08 	call	0x116a	; 0x116a <motion_set>
}
    117e:	08 95       	ret

00001180 <back>:

void back (void) 			//both inputs backward
{
	motion_set(0x44);
    1180:	84 e4       	ldi	r24, 0x44	; 68
    1182:	0e 94 b5 08 	call	0x116a	; 0x116a <motion_set>
}
    1186:	08 95       	ret

00001188 <left>:

void left (void) 			//input12 backward, input34 forward
{
	motion_set(0x84);
    1188:	84 e8       	ldi	r24, 0x84	; 132
    118a:	0e 94 b5 08 	call	0x116a	; 0x116a <motion_set>
}
    118e:	08 95       	ret

00001190 <right>:



void right (void) 			//input34 backward, input12 forward
{
	motion_set(0x60);
    1190:	80 e6       	ldi	r24, 0x60	; 96
    1192:	0e 94 b5 08 	call	0x116a	; 0x116a <motion_set>
}
    1196:	08 95       	ret

00001198 <soft_left>:

void soft_left (void) 		//input12 stationary, input34 forward
{
	motion_set(0x80);
    1198:	80 e8       	ldi	r24, 0x80	; 128
    119a:	0e 94 b5 08 	call	0x116a	; 0x116a <motion_set>
}
    119e:	08 95       	ret

000011a0 <soft_right>:

void soft_right (void)      //input12 forward, input34 stationary
{
	motion_set(0x20);
    11a0:	80 e2       	ldi	r24, 0x20	; 32
    11a2:	0e 94 b5 08 	call	0x116a	; 0x116a <motion_set>
}
    11a6:	08 95       	ret

000011a8 <soft_left_2>:

void soft_left_2 (void)     //input12 backward, input34 stationary
{
	motion_set(0x40);
    11a8:	80 e4       	ldi	r24, 0x40	; 64
    11aa:	0e 94 b5 08 	call	0x116a	; 0x116a <motion_set>
}
    11ae:	08 95       	ret

000011b0 <soft_right_2>:

void soft_right_2 (void)    //input12 stationary, input34 backward
{
	motion_set(0x04);
    11b0:	84 e0       	ldi	r24, 0x04	; 4
    11b2:	0e 94 b5 08 	call	0x116a	; 0x116a <motion_set>
}
    11b6:	08 95       	ret

000011b8 <stop>:

void stop (void)            // both input stationary
{
	motion_set(0x00);
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	0e 94 b5 08 	call	0x116a	; 0x116a <motion_set>
}
    11be:	08 95       	ret

000011c0 <init_devices1>:

void init_devices1 (void)
{
	cli(); //Clears the global interrupts
    11c0:	f8 94       	cli
	
	lcd_port_config();  // configure the LCD port
    11c2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <lcd_port_config>
	lcd_set_4bit();
    11c6:	0e 94 84 01 	call	0x308	; 0x308 <lcd_set_4bit>
	lcd_init();
    11ca:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_init>
	port_init();
    11ce:	0e 94 89 08 	call	0x1112	; 0x1112 <port_init>
	timer5_init();
    11d2:	0e 94 8c 08 	call	0x1118	; 0x1118 <timer5_init>
	sei(); //Enables the global interrupts
    11d6:	78 94       	sei
}
    11d8:	08 95       	ret

000011da <SetTunings>:

void SetTunings(double Kp, double Ki, double Kd)   //Function to set tuning parameters of PID
{
    11da:	8f 92       	push	r8
    11dc:	9f 92       	push	r9
    11de:	af 92       	push	r10
    11e0:	bf 92       	push	r11
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	4b 01       	movw	r8, r22
    11ec:	5c 01       	movw	r10, r24
    11ee:	da 01       	movw	r26, r20
    11f0:	c9 01       	movw	r24, r18
	kp = Kp;
    11f2:	80 92 46 02 	sts	0x0246, r8
    11f6:	90 92 47 02 	sts	0x0247, r9
    11fa:	a0 92 48 02 	sts	0x0248, r10
    11fe:	b0 92 49 02 	sts	0x0249, r11
	ki = Ki;
    1202:	80 93 37 02 	sts	0x0237, r24
    1206:	90 93 38 02 	sts	0x0238, r25
    120a:	a0 93 39 02 	sts	0x0239, r26
    120e:	b0 93 3a 02 	sts	0x023A, r27
	kd = Kd;
    1212:	e0 92 22 02 	sts	0x0222, r14
    1216:	f0 92 23 02 	sts	0x0223, r15
    121a:	00 93 24 02 	sts	0x0224, r16
    121e:	10 93 25 02 	sts	0x0225, r17
}
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
    122e:	9f 90       	pop	r9
    1230:	8f 90       	pop	r8
    1232:	08 95       	ret

00001234 <main>:
{
	int acc_Angle;
	int gyro_Angle;
	int filt_Angle;
	unsigned int pwm_value;
	init_adxl();               //Initialise accelerometer
    1234:	0e 94 c6 03 	call	0x78c	; 0x78c <init_adxl>
	init_gyro();               //Initialise gyroscope
    1238:	0e 94 b4 04 	call	0x968	; 0x968 <init_gyro>
	init_devices1();
    123c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <init_devices1>
	uart0_init();              //Initailize UART1 for serial communiaction
    1240:	0e 94 91 06 	call	0xd22	; 0xd22 <uart0_init>
	start_timer4();            //Timer for timing calculations
    1244:	0e 94 25 01 	call	0x24a	; 0x24a <start_timer4>
	
	SetTunings(9.1,8,5);
    1248:	6a e9       	ldi	r22, 0x9A	; 154
    124a:	79 e9       	ldi	r23, 0x99	; 153
    124c:	81 e1       	ldi	r24, 0x11	; 17
    124e:	91 e4       	ldi	r25, 0x41	; 65
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	51 e4       	ldi	r21, 0x41	; 65
    1258:	0f 2e       	mov	r0, r31
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	ef 2e       	mov	r14, r31
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	ff 2e       	mov	r15, r31
    1262:	f0 ea       	ldi	r31, 0xA0	; 160
    1264:	0f 2f       	mov	r16, r31
    1266:	f0 e4       	ldi	r31, 0x40	; 64
    1268:	1f 2f       	mov	r17, r31
    126a:	f0 2d       	mov	r31, r0
    126c:	0e 94 ed 08 	call	0x11da	; 0x11da <SetTunings>
	lcd_print(1,1,kp*10,4);
    1270:	60 91 46 02 	lds	r22, 0x0246
    1274:	70 91 47 02 	lds	r23, 0x0247
    1278:	80 91 48 02 	lds	r24, 0x0248
    127c:	90 91 49 02 	lds	r25, 0x0249
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e2       	ldi	r20, 0x20	; 32
    1286:	51 e4       	ldi	r21, 0x41	; 65
    1288:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
    128c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
    1290:	8b 01       	movw	r16, r22
    1292:	9c 01       	movw	r18, r24
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	61 e0       	ldi	r22, 0x01	; 1
    1298:	a8 01       	movw	r20, r16
    129a:	24 e0       	ldi	r18, 0x04	; 4
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_print>
	lcd_print(1,6,ki*10,4);
    12a2:	60 91 37 02 	lds	r22, 0x0237
    12a6:	70 91 38 02 	lds	r23, 0x0238
    12aa:	80 91 39 02 	lds	r24, 0x0239
    12ae:	90 91 3a 02 	lds	r25, 0x023A
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e2       	ldi	r20, 0x20	; 32
    12b8:	51 e4       	ldi	r21, 0x41	; 65
    12ba:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
    12be:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
    12c2:	8b 01       	movw	r16, r22
    12c4:	9c 01       	movw	r18, r24
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	66 e0       	ldi	r22, 0x06	; 6
    12ca:	a8 01       	movw	r20, r16
    12cc:	24 e0       	ldi	r18, 0x04	; 4
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_print>
	lcd_print(1,11,kd*10,4);
    12d4:	60 91 22 02 	lds	r22, 0x0222
    12d8:	70 91 23 02 	lds	r23, 0x0223
    12dc:	80 91 24 02 	lds	r24, 0x0224
    12e0:	90 91 25 02 	lds	r25, 0x0225
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e2       	ldi	r20, 0x20	; 32
    12ea:	51 e4       	ldi	r21, 0x41	; 65
    12ec:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
    12f0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
    12f4:	8b 01       	movw	r16, r22
    12f6:	9c 01       	movw	r18, r24
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	6b e0       	ldi	r22, 0x0B	; 11
    12fc:	a8 01       	movw	r20, r16
    12fe:	24 e0       	ldi	r18, 0x04	; 4
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_print>
		{
			pwm_value = (-Output)+THRESHOLD;
			if(pwm_value>=255)
			{
				
				pwm_value=255;
    1306:	0f 2e       	mov	r0, r31
    1308:	ff ef       	ldi	r31, 0xFF	; 255
    130a:	4f 2e       	mov	r4, r31
    130c:	55 24       	eor	r5, r5
    130e:	f0 2d       	mov	r31, r0
		{
			stop();
		}
		
		//_delay_ms(20);
		UDR0=0xFF;
    1310:	06 ec       	ldi	r16, 0xC6	; 198
    1312:	10 e0       	ldi	r17, 0x00	; 0
    1314:	77 24       	eor	r7, r7
    1316:	7a 94       	dec	r7
	lcd_print(1,6,ki*10,4);
	lcd_print(1,11,kd*10,4);
	
	while(1)
	{
		acc_Angle = 0.1*acc_angle();        //Accelerometer angle
    1318:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <acc_angle>
    131c:	ec 01       	movw	r28, r24
		gyro_Angle=gyro_Rate();           //Anugular rate from Gyroscope
    131e:	0e 94 58 05 	call	0xab0	; 0xab0 <gyro_Rate>
    1322:	6b 01       	movw	r12, r22
    1324:	7c 01       	movw	r14, r24
	lcd_print(1,6,ki*10,4);
	lcd_print(1,11,kd*10,4);
	
	while(1)
	{
		acc_Angle = 0.1*acc_angle();        //Accelerometer angle
    1326:	be 01       	movw	r22, r28
    1328:	88 27       	eor	r24, r24
    132a:	77 fd       	sbrc	r23, 7
    132c:	80 95       	com	r24
    132e:	98 2f       	mov	r25, r24
    1330:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__floatsisf>
    1334:	2d ec       	ldi	r18, 0xCD	; 205
    1336:	3c ec       	ldi	r19, 0xCC	; 204
    1338:	4c ec       	ldi	r20, 0xCC	; 204
    133a:	5d e3       	ldi	r21, 0x3D	; 61
    133c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
    1340:	0e 94 47 0b 	call	0x168e	; 0x168e <__fixsfsi>
		gyro_Angle=gyro_Rate();           //Anugular rate from Gyroscope
		filt_Angle=comp_filter(acc_Angle,gyro_Angle);  //Filtered angle after passing through Complementary filter
    1344:	88 27       	eor	r24, r24
    1346:	77 fd       	sbrc	r23, 7
    1348:	80 95       	com	r24
    134a:	98 2f       	mov	r25, r24
    134c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__floatsisf>
    1350:	4b 01       	movw	r8, r22
    1352:	5c 01       	movw	r10, r24
	lcd_print(1,11,kd*10,4);
	
	while(1)
	{
		acc_Angle = 0.1*acc_angle();        //Accelerometer angle
		gyro_Angle=gyro_Rate();           //Anugular rate from Gyroscope
    1354:	c7 01       	movw	r24, r14
    1356:	b6 01       	movw	r22, r12
    1358:	0e 94 47 0b 	call	0x168e	; 0x168e <__fixsfsi>
		filt_Angle=comp_filter(acc_Angle,gyro_Angle);  //Filtered angle after passing through Complementary filter
    135c:	88 27       	eor	r24, r24
    135e:	77 fd       	sbrc	r23, 7
    1360:	80 95       	com	r24
    1362:	98 2f       	mov	r25, r24
    1364:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__floatsisf>
    1368:	9b 01       	movw	r18, r22
    136a:	ac 01       	movw	r20, r24
    136c:	c5 01       	movw	r24, r10
    136e:	b4 01       	movw	r22, r8
    1370:	0e 94 b9 04 	call	0x972	; 0x972 <comp_filter>
    1374:	0e 94 47 0b 	call	0x168e	; 0x168e <__fixsfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	ec 01       	movw	r28, r24
		Input=filt_Angle;                      //Input for error calculation of PID
    137e:	be 01       	movw	r22, r28
    1380:	88 27       	eor	r24, r24
    1382:	77 fd       	sbrc	r23, 7
    1384:	80 95       	com	r24
    1386:	98 2f       	mov	r25, r24
    1388:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__floatsisf>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	80 93 3e 02 	sts	0x023E, r24
    1394:	90 93 3f 02 	sts	0x023F, r25
    1398:	a0 93 40 02 	sts	0x0240, r26
    139c:	b0 93 41 02 	sts	0x0241, r27
		                             
		Compute();                                  //Calling PID
    13a0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <Compute>
		if (Output>0)                               //Mapping PID output to velocity of motors
    13a4:	c0 90 2d 02 	lds	r12, 0x022D
    13a8:	d0 90 2e 02 	lds	r13, 0x022E
    13ac:	e0 90 2f 02 	lds	r14, 0x022F
    13b0:	f0 90 30 02 	lds	r15, 0x0230
    13b4:	c7 01       	movw	r24, r14
    13b6:	b6 01       	movw	r22, r12
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	a9 01       	movw	r20, r18
    13be:	0e 94 4f 0c 	call	0x189e	; 0x189e <__gesf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	ac f4       	brge	.+42     	; 0x13f0 <main+0x1bc>
		{
			pwm_value = (Output+THRESHOLD);
    13c6:	c7 01       	movw	r24, r14
    13c8:	b6 01       	movw	r22, r12
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 ea       	ldi	r20, 0xA0	; 160
    13d0:	51 e4       	ldi	r21, 0x41	; 65
    13d2:	0e 94 4f 0a 	call	0x149e	; 0x149e <__addsf3>
    13d6:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
			if(pwm_value>=255)
    13de:	8f 3f       	cpi	r24, 0xFF	; 255
    13e0:	91 05       	cpc	r25, r1
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <main+0x1b2>
			{
				
				pwm_value=255;
    13e4:	c2 01       	movw	r24, r4
			}
			set_PWM_value(pwm_value);
    13e6:	0e 94 a5 08 	call	0x114a	; 0x114a <set_PWM_value>
			forward();
    13ea:	0e 94 bc 08 	call	0x1178	; 0x1178 <forward>
    13ee:	2f c0       	rjmp	.+94     	; 0x144e <main+0x21a>
		}
		else if(Output<0)
    13f0:	c7 01       	movw	r24, r14
    13f2:	b6 01       	movw	r22, r12
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	a9 01       	movw	r20, r18
    13fa:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__cmpsf2>
    13fe:	88 23       	and	r24, r24
    1400:	ac f4       	brge	.+42     	; 0x142c <main+0x1f8>
		{
			pwm_value = (-Output)+THRESHOLD;
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	80 ea       	ldi	r24, 0xA0	; 160
    1408:	91 e4       	ldi	r25, 0x41	; 65
    140a:	a7 01       	movw	r20, r14
    140c:	96 01       	movw	r18, r12
    140e:	0e 94 4e 0a 	call	0x149c	; 0x149c <__subsf3>
    1412:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
			if(pwm_value>=255)
    141a:	8f 3f       	cpi	r24, 0xFF	; 255
    141c:	91 05       	cpc	r25, r1
    141e:	08 f0       	brcs	.+2      	; 0x1422 <main+0x1ee>
			{
				
				pwm_value=255;
    1420:	c2 01       	movw	r24, r4
			}
			set_PWM_value(pwm_value);
    1422:	0e 94 a5 08 	call	0x114a	; 0x114a <set_PWM_value>
			back();
    1426:	0e 94 c0 08 	call	0x1180	; 0x1180 <back>
    142a:	11 c0       	rjmp	.+34     	; 0x144e <main+0x21a>
		}
		else if(Input==0)
    142c:	60 91 3e 02 	lds	r22, 0x023E
    1430:	70 91 3f 02 	lds	r23, 0x023F
    1434:	80 91 40 02 	lds	r24, 0x0240
    1438:	90 91 41 02 	lds	r25, 0x0241
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	a9 01       	movw	r20, r18
    1442:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__cmpsf2>
    1446:	88 23       	and	r24, r24
    1448:	11 f4       	brne	.+4      	; 0x144e <main+0x21a>
		{
			stop();
    144a:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <stop>
		}
		
		//_delay_ms(20);
		UDR0=0xFF;
    144e:	f8 01       	movw	r30, r16
    1450:	70 82       	st	Z, r7
    1452:	86 e6       	ldi	r24, 0x66	; 102
    1454:	9e e0       	ldi	r25, 0x0E	; 14
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <main+0x222>
    145a:	00 00       	nop
		_delay_ms(1);
		UDR0=(uint8_t)(filt_Angle+100);
    145c:	cc 59       	subi	r28, 0x9C	; 156
    145e:	c0 83       	st	Z, r28
    1460:	86 e6       	ldi	r24, 0x66	; 102
    1462:	9e e0       	ldi	r25, 0x0E	; 14
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <main+0x230>
    1468:	00 00       	nop
		_delay_ms(1);
		uint8_t op=(Output/2)+127;
    146a:	60 91 2d 02 	lds	r22, 0x022D
    146e:	70 91 2e 02 	lds	r23, 0x022E
    1472:	80 91 2f 02 	lds	r24, 0x022F
    1476:	90 91 30 02 	lds	r25, 0x0230
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	5f e3       	ldi	r21, 0x3F	; 63
    1482:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	4e ef       	ldi	r20, 0xFE	; 254
    148c:	52 e4       	ldi	r21, 0x42	; 66
    148e:	0e 94 4f 0a 	call	0x149e	; 0x149e <__addsf3>
    1492:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
		UDR0=op; 
    1496:	f8 01       	movw	r30, r16
    1498:	60 83       	st	Z, r22
	    acc_Angle=0; 
	}
    149a:	3e cf       	rjmp	.-388    	; 0x1318 <main+0xe4>

0000149c <__subsf3>:
    149c:	50 58       	subi	r21, 0x80	; 128

0000149e <__addsf3>:
    149e:	bb 27       	eor	r27, r27
    14a0:	aa 27       	eor	r26, r26
    14a2:	0e d0       	rcall	.+28     	; 0x14c0 <__addsf3x>
    14a4:	c2 c1       	rjmp	.+900    	; 0x182a <__fp_round>
    14a6:	b3 d1       	rcall	.+870    	; 0x180e <__fp_pscA>
    14a8:	30 f0       	brcs	.+12     	; 0x14b6 <__addsf3+0x18>
    14aa:	b8 d1       	rcall	.+880    	; 0x181c <__fp_pscB>
    14ac:	20 f0       	brcs	.+8      	; 0x14b6 <__addsf3+0x18>
    14ae:	31 f4       	brne	.+12     	; 0x14bc <__addsf3+0x1e>
    14b0:	9f 3f       	cpi	r25, 0xFF	; 255
    14b2:	11 f4       	brne	.+4      	; 0x14b8 <__addsf3+0x1a>
    14b4:	1e f4       	brtc	.+6      	; 0x14bc <__addsf3+0x1e>
    14b6:	83 c1       	rjmp	.+774    	; 0x17be <__fp_nan>
    14b8:	0e f4       	brtc	.+2      	; 0x14bc <__addsf3+0x1e>
    14ba:	e0 95       	com	r30
    14bc:	e7 fb       	bst	r30, 7
    14be:	79 c1       	rjmp	.+754    	; 0x17b2 <__fp_inf>

000014c0 <__addsf3x>:
    14c0:	e9 2f       	mov	r30, r25
    14c2:	c4 d1       	rcall	.+904    	; 0x184c <__fp_split3>
    14c4:	80 f3       	brcs	.-32     	; 0x14a6 <__addsf3+0x8>
    14c6:	ba 17       	cp	r27, r26
    14c8:	62 07       	cpc	r22, r18
    14ca:	73 07       	cpc	r23, r19
    14cc:	84 07       	cpc	r24, r20
    14ce:	95 07       	cpc	r25, r21
    14d0:	18 f0       	brcs	.+6      	; 0x14d8 <__addsf3x+0x18>
    14d2:	71 f4       	brne	.+28     	; 0x14f0 <__addsf3x+0x30>
    14d4:	9e f5       	brtc	.+102    	; 0x153c <__addsf3x+0x7c>
    14d6:	dc c1       	rjmp	.+952    	; 0x1890 <__fp_zero>
    14d8:	0e f4       	brtc	.+2      	; 0x14dc <__addsf3x+0x1c>
    14da:	e0 95       	com	r30
    14dc:	0b 2e       	mov	r0, r27
    14de:	ba 2f       	mov	r27, r26
    14e0:	a0 2d       	mov	r26, r0
    14e2:	0b 01       	movw	r0, r22
    14e4:	b9 01       	movw	r22, r18
    14e6:	90 01       	movw	r18, r0
    14e8:	0c 01       	movw	r0, r24
    14ea:	ca 01       	movw	r24, r20
    14ec:	a0 01       	movw	r20, r0
    14ee:	11 24       	eor	r1, r1
    14f0:	ff 27       	eor	r31, r31
    14f2:	59 1b       	sub	r21, r25
    14f4:	99 f0       	breq	.+38     	; 0x151c <__addsf3x+0x5c>
    14f6:	59 3f       	cpi	r21, 0xF9	; 249
    14f8:	50 f4       	brcc	.+20     	; 0x150e <__addsf3x+0x4e>
    14fa:	50 3e       	cpi	r21, 0xE0	; 224
    14fc:	68 f1       	brcs	.+90     	; 0x1558 <__addsf3x+0x98>
    14fe:	1a 16       	cp	r1, r26
    1500:	f0 40       	sbci	r31, 0x00	; 0
    1502:	a2 2f       	mov	r26, r18
    1504:	23 2f       	mov	r18, r19
    1506:	34 2f       	mov	r19, r20
    1508:	44 27       	eor	r20, r20
    150a:	58 5f       	subi	r21, 0xF8	; 248
    150c:	f3 cf       	rjmp	.-26     	; 0x14f4 <__addsf3x+0x34>
    150e:	46 95       	lsr	r20
    1510:	37 95       	ror	r19
    1512:	27 95       	ror	r18
    1514:	a7 95       	ror	r26
    1516:	f0 40       	sbci	r31, 0x00	; 0
    1518:	53 95       	inc	r21
    151a:	c9 f7       	brne	.-14     	; 0x150e <__addsf3x+0x4e>
    151c:	7e f4       	brtc	.+30     	; 0x153c <__addsf3x+0x7c>
    151e:	1f 16       	cp	r1, r31
    1520:	ba 0b       	sbc	r27, r26
    1522:	62 0b       	sbc	r22, r18
    1524:	73 0b       	sbc	r23, r19
    1526:	84 0b       	sbc	r24, r20
    1528:	ba f0       	brmi	.+46     	; 0x1558 <__addsf3x+0x98>
    152a:	91 50       	subi	r25, 0x01	; 1
    152c:	a1 f0       	breq	.+40     	; 0x1556 <__addsf3x+0x96>
    152e:	ff 0f       	add	r31, r31
    1530:	bb 1f       	adc	r27, r27
    1532:	66 1f       	adc	r22, r22
    1534:	77 1f       	adc	r23, r23
    1536:	88 1f       	adc	r24, r24
    1538:	c2 f7       	brpl	.-16     	; 0x152a <__addsf3x+0x6a>
    153a:	0e c0       	rjmp	.+28     	; 0x1558 <__addsf3x+0x98>
    153c:	ba 0f       	add	r27, r26
    153e:	62 1f       	adc	r22, r18
    1540:	73 1f       	adc	r23, r19
    1542:	84 1f       	adc	r24, r20
    1544:	48 f4       	brcc	.+18     	; 0x1558 <__addsf3x+0x98>
    1546:	87 95       	ror	r24
    1548:	77 95       	ror	r23
    154a:	67 95       	ror	r22
    154c:	b7 95       	ror	r27
    154e:	f7 95       	ror	r31
    1550:	9e 3f       	cpi	r25, 0xFE	; 254
    1552:	08 f0       	brcs	.+2      	; 0x1556 <__addsf3x+0x96>
    1554:	b3 cf       	rjmp	.-154    	; 0x14bc <__addsf3+0x1e>
    1556:	93 95       	inc	r25
    1558:	88 0f       	add	r24, r24
    155a:	08 f0       	brcs	.+2      	; 0x155e <__addsf3x+0x9e>
    155c:	99 27       	eor	r25, r25
    155e:	ee 0f       	add	r30, r30
    1560:	97 95       	ror	r25
    1562:	87 95       	ror	r24
    1564:	08 95       	ret

00001566 <atan>:
    1566:	df 93       	push	r29
    1568:	dd 27       	eor	r29, r29
    156a:	b9 2f       	mov	r27, r25
    156c:	bf 77       	andi	r27, 0x7F	; 127
    156e:	40 e8       	ldi	r20, 0x80	; 128
    1570:	5f e3       	ldi	r21, 0x3F	; 63
    1572:	16 16       	cp	r1, r22
    1574:	17 06       	cpc	r1, r23
    1576:	48 07       	cpc	r20, r24
    1578:	5b 07       	cpc	r21, r27
    157a:	10 f4       	brcc	.+4      	; 0x1580 <atan+0x1a>
    157c:	d9 2f       	mov	r29, r25
    157e:	93 d1       	rcall	.+806    	; 0x18a6 <inverse>
    1580:	9f 93       	push	r25
    1582:	8f 93       	push	r24
    1584:	7f 93       	push	r23
    1586:	6f 93       	push	r22
    1588:	f8 d1       	rcall	.+1008   	; 0x197a <square>
    158a:	e4 ee       	ldi	r30, 0xE4	; 228
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	1a d1       	rcall	.+564    	; 0x17c4 <__fp_powser>
    1590:	4c d1       	rcall	.+664    	; 0x182a <__fp_round>
    1592:	2f 91       	pop	r18
    1594:	3f 91       	pop	r19
    1596:	4f 91       	pop	r20
    1598:	5f 91       	pop	r21
    159a:	98 d1       	rcall	.+816    	; 0x18cc <__mulsf3x>
    159c:	dd 23       	and	r29, r29
    159e:	49 f0       	breq	.+18     	; 0x15b2 <atan+0x4c>
    15a0:	90 58       	subi	r25, 0x80	; 128
    15a2:	a2 ea       	ldi	r26, 0xA2	; 162
    15a4:	2a ed       	ldi	r18, 0xDA	; 218
    15a6:	3f e0       	ldi	r19, 0x0F	; 15
    15a8:	49 ec       	ldi	r20, 0xC9	; 201
    15aa:	5f e3       	ldi	r21, 0x3F	; 63
    15ac:	d0 78       	andi	r29, 0x80	; 128
    15ae:	5d 27       	eor	r21, r29
    15b0:	87 df       	rcall	.-242    	; 0x14c0 <__addsf3x>
    15b2:	df 91       	pop	r29
    15b4:	3a c1       	rjmp	.+628    	; 0x182a <__fp_round>

000015b6 <__cmpsf2>:
    15b6:	d9 d0       	rcall	.+434    	; 0x176a <__fp_cmp>
    15b8:	08 f4       	brcc	.+2      	; 0x15bc <__cmpsf2+0x6>
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	08 95       	ret

000015be <__divsf3>:
    15be:	0c d0       	rcall	.+24     	; 0x15d8 <__divsf3x>
    15c0:	34 c1       	rjmp	.+616    	; 0x182a <__fp_round>
    15c2:	2c d1       	rcall	.+600    	; 0x181c <__fp_pscB>
    15c4:	40 f0       	brcs	.+16     	; 0x15d6 <__divsf3+0x18>
    15c6:	23 d1       	rcall	.+582    	; 0x180e <__fp_pscA>
    15c8:	30 f0       	brcs	.+12     	; 0x15d6 <__divsf3+0x18>
    15ca:	21 f4       	brne	.+8      	; 0x15d4 <__divsf3+0x16>
    15cc:	5f 3f       	cpi	r21, 0xFF	; 255
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <__divsf3+0x18>
    15d0:	f0 c0       	rjmp	.+480    	; 0x17b2 <__fp_inf>
    15d2:	51 11       	cpse	r21, r1
    15d4:	5e c1       	rjmp	.+700    	; 0x1892 <__fp_szero>
    15d6:	f3 c0       	rjmp	.+486    	; 0x17be <__fp_nan>

000015d8 <__divsf3x>:
    15d8:	39 d1       	rcall	.+626    	; 0x184c <__fp_split3>
    15da:	98 f3       	brcs	.-26     	; 0x15c2 <__divsf3+0x4>

000015dc <__divsf3_pse>:
    15dc:	99 23       	and	r25, r25
    15de:	c9 f3       	breq	.-14     	; 0x15d2 <__divsf3+0x14>
    15e0:	55 23       	and	r21, r21
    15e2:	b1 f3       	breq	.-20     	; 0x15d0 <__divsf3+0x12>
    15e4:	95 1b       	sub	r25, r21
    15e6:	55 0b       	sbc	r21, r21
    15e8:	bb 27       	eor	r27, r27
    15ea:	aa 27       	eor	r26, r26
    15ec:	62 17       	cp	r22, r18
    15ee:	73 07       	cpc	r23, r19
    15f0:	84 07       	cpc	r24, r20
    15f2:	38 f0       	brcs	.+14     	; 0x1602 <__divsf3_pse+0x26>
    15f4:	9f 5f       	subi	r25, 0xFF	; 255
    15f6:	5f 4f       	sbci	r21, 0xFF	; 255
    15f8:	22 0f       	add	r18, r18
    15fa:	33 1f       	adc	r19, r19
    15fc:	44 1f       	adc	r20, r20
    15fe:	aa 1f       	adc	r26, r26
    1600:	a9 f3       	breq	.-22     	; 0x15ec <__divsf3_pse+0x10>
    1602:	33 d0       	rcall	.+102    	; 0x166a <__divsf3_pse+0x8e>
    1604:	0e 2e       	mov	r0, r30
    1606:	3a f0       	brmi	.+14     	; 0x1616 <__divsf3_pse+0x3a>
    1608:	e0 e8       	ldi	r30, 0x80	; 128
    160a:	30 d0       	rcall	.+96     	; 0x166c <__divsf3_pse+0x90>
    160c:	91 50       	subi	r25, 0x01	; 1
    160e:	50 40       	sbci	r21, 0x00	; 0
    1610:	e6 95       	lsr	r30
    1612:	00 1c       	adc	r0, r0
    1614:	ca f7       	brpl	.-14     	; 0x1608 <__divsf3_pse+0x2c>
    1616:	29 d0       	rcall	.+82     	; 0x166a <__divsf3_pse+0x8e>
    1618:	fe 2f       	mov	r31, r30
    161a:	27 d0       	rcall	.+78     	; 0x166a <__divsf3_pse+0x8e>
    161c:	66 0f       	add	r22, r22
    161e:	77 1f       	adc	r23, r23
    1620:	88 1f       	adc	r24, r24
    1622:	bb 1f       	adc	r27, r27
    1624:	26 17       	cp	r18, r22
    1626:	37 07       	cpc	r19, r23
    1628:	48 07       	cpc	r20, r24
    162a:	ab 07       	cpc	r26, r27
    162c:	b0 e8       	ldi	r27, 0x80	; 128
    162e:	09 f0       	breq	.+2      	; 0x1632 <__divsf3_pse+0x56>
    1630:	bb 0b       	sbc	r27, r27
    1632:	80 2d       	mov	r24, r0
    1634:	bf 01       	movw	r22, r30
    1636:	ff 27       	eor	r31, r31
    1638:	93 58       	subi	r25, 0x83	; 131
    163a:	5f 4f       	sbci	r21, 0xFF	; 255
    163c:	2a f0       	brmi	.+10     	; 0x1648 <__divsf3_pse+0x6c>
    163e:	9e 3f       	cpi	r25, 0xFE	; 254
    1640:	51 05       	cpc	r21, r1
    1642:	68 f0       	brcs	.+26     	; 0x165e <__divsf3_pse+0x82>
    1644:	b6 c0       	rjmp	.+364    	; 0x17b2 <__fp_inf>
    1646:	25 c1       	rjmp	.+586    	; 0x1892 <__fp_szero>
    1648:	5f 3f       	cpi	r21, 0xFF	; 255
    164a:	ec f3       	brlt	.-6      	; 0x1646 <__divsf3_pse+0x6a>
    164c:	98 3e       	cpi	r25, 0xE8	; 232
    164e:	dc f3       	brlt	.-10     	; 0x1646 <__divsf3_pse+0x6a>
    1650:	86 95       	lsr	r24
    1652:	77 95       	ror	r23
    1654:	67 95       	ror	r22
    1656:	b7 95       	ror	r27
    1658:	f7 95       	ror	r31
    165a:	9f 5f       	subi	r25, 0xFF	; 255
    165c:	c9 f7       	brne	.-14     	; 0x1650 <__divsf3_pse+0x74>
    165e:	88 0f       	add	r24, r24
    1660:	91 1d       	adc	r25, r1
    1662:	96 95       	lsr	r25
    1664:	87 95       	ror	r24
    1666:	97 f9       	bld	r25, 7
    1668:	08 95       	ret
    166a:	e1 e0       	ldi	r30, 0x01	; 1
    166c:	66 0f       	add	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	88 1f       	adc	r24, r24
    1672:	bb 1f       	adc	r27, r27
    1674:	62 17       	cp	r22, r18
    1676:	73 07       	cpc	r23, r19
    1678:	84 07       	cpc	r24, r20
    167a:	ba 07       	cpc	r27, r26
    167c:	20 f0       	brcs	.+8      	; 0x1686 <__divsf3_pse+0xaa>
    167e:	62 1b       	sub	r22, r18
    1680:	73 0b       	sbc	r23, r19
    1682:	84 0b       	sbc	r24, r20
    1684:	ba 0b       	sbc	r27, r26
    1686:	ee 1f       	adc	r30, r30
    1688:	88 f7       	brcc	.-30     	; 0x166c <__divsf3_pse+0x90>
    168a:	e0 95       	com	r30
    168c:	08 95       	ret

0000168e <__fixsfsi>:
    168e:	04 d0       	rcall	.+8      	; 0x1698 <__fixunssfsi>
    1690:	68 94       	set
    1692:	b1 11       	cpse	r27, r1
    1694:	fe c0       	rjmp	.+508    	; 0x1892 <__fp_szero>
    1696:	08 95       	ret

00001698 <__fixunssfsi>:
    1698:	e1 d0       	rcall	.+450    	; 0x185c <__fp_splitA>
    169a:	88 f0       	brcs	.+34     	; 0x16be <__fixunssfsi+0x26>
    169c:	9f 57       	subi	r25, 0x7F	; 127
    169e:	90 f0       	brcs	.+36     	; 0x16c4 <__fixunssfsi+0x2c>
    16a0:	b9 2f       	mov	r27, r25
    16a2:	99 27       	eor	r25, r25
    16a4:	b7 51       	subi	r27, 0x17	; 23
    16a6:	a0 f0       	brcs	.+40     	; 0x16d0 <__fixunssfsi+0x38>
    16a8:	d1 f0       	breq	.+52     	; 0x16de <__fixunssfsi+0x46>
    16aa:	66 0f       	add	r22, r22
    16ac:	77 1f       	adc	r23, r23
    16ae:	88 1f       	adc	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	1a f0       	brmi	.+6      	; 0x16ba <__fixunssfsi+0x22>
    16b4:	ba 95       	dec	r27
    16b6:	c9 f7       	brne	.-14     	; 0x16aa <__fixunssfsi+0x12>
    16b8:	12 c0       	rjmp	.+36     	; 0x16de <__fixunssfsi+0x46>
    16ba:	b1 30       	cpi	r27, 0x01	; 1
    16bc:	81 f0       	breq	.+32     	; 0x16de <__fixunssfsi+0x46>
    16be:	e8 d0       	rcall	.+464    	; 0x1890 <__fp_zero>
    16c0:	b1 e0       	ldi	r27, 0x01	; 1
    16c2:	08 95       	ret
    16c4:	e5 c0       	rjmp	.+458    	; 0x1890 <__fp_zero>
    16c6:	67 2f       	mov	r22, r23
    16c8:	78 2f       	mov	r23, r24
    16ca:	88 27       	eor	r24, r24
    16cc:	b8 5f       	subi	r27, 0xF8	; 248
    16ce:	39 f0       	breq	.+14     	; 0x16de <__fixunssfsi+0x46>
    16d0:	b9 3f       	cpi	r27, 0xF9	; 249
    16d2:	cc f3       	brlt	.-14     	; 0x16c6 <__fixunssfsi+0x2e>
    16d4:	86 95       	lsr	r24
    16d6:	77 95       	ror	r23
    16d8:	67 95       	ror	r22
    16da:	b3 95       	inc	r27
    16dc:	d9 f7       	brne	.-10     	; 0x16d4 <__fixunssfsi+0x3c>
    16de:	3e f4       	brtc	.+14     	; 0x16ee <__fixunssfsi+0x56>
    16e0:	90 95       	com	r25
    16e2:	80 95       	com	r24
    16e4:	70 95       	com	r23
    16e6:	61 95       	neg	r22
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ea:	8f 4f       	sbci	r24, 0xFF	; 255
    16ec:	9f 4f       	sbci	r25, 0xFF	; 255
    16ee:	08 95       	ret

000016f0 <__floatunsisf>:
    16f0:	e8 94       	clt
    16f2:	09 c0       	rjmp	.+18     	; 0x1706 <__floatsisf+0x12>

000016f4 <__floatsisf>:
    16f4:	97 fb       	bst	r25, 7
    16f6:	3e f4       	brtc	.+14     	; 0x1706 <__floatsisf+0x12>
    16f8:	90 95       	com	r25
    16fa:	80 95       	com	r24
    16fc:	70 95       	com	r23
    16fe:	61 95       	neg	r22
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	8f 4f       	sbci	r24, 0xFF	; 255
    1704:	9f 4f       	sbci	r25, 0xFF	; 255
    1706:	99 23       	and	r25, r25
    1708:	a9 f0       	breq	.+42     	; 0x1734 <__floatsisf+0x40>
    170a:	f9 2f       	mov	r31, r25
    170c:	96 e9       	ldi	r25, 0x96	; 150
    170e:	bb 27       	eor	r27, r27
    1710:	93 95       	inc	r25
    1712:	f6 95       	lsr	r31
    1714:	87 95       	ror	r24
    1716:	77 95       	ror	r23
    1718:	67 95       	ror	r22
    171a:	b7 95       	ror	r27
    171c:	f1 11       	cpse	r31, r1
    171e:	f8 cf       	rjmp	.-16     	; 0x1710 <__floatsisf+0x1c>
    1720:	fa f4       	brpl	.+62     	; 0x1760 <__floatsisf+0x6c>
    1722:	bb 0f       	add	r27, r27
    1724:	11 f4       	brne	.+4      	; 0x172a <__floatsisf+0x36>
    1726:	60 ff       	sbrs	r22, 0
    1728:	1b c0       	rjmp	.+54     	; 0x1760 <__floatsisf+0x6c>
    172a:	6f 5f       	subi	r22, 0xFF	; 255
    172c:	7f 4f       	sbci	r23, 0xFF	; 255
    172e:	8f 4f       	sbci	r24, 0xFF	; 255
    1730:	9f 4f       	sbci	r25, 0xFF	; 255
    1732:	16 c0       	rjmp	.+44     	; 0x1760 <__floatsisf+0x6c>
    1734:	88 23       	and	r24, r24
    1736:	11 f0       	breq	.+4      	; 0x173c <__floatsisf+0x48>
    1738:	96 e9       	ldi	r25, 0x96	; 150
    173a:	11 c0       	rjmp	.+34     	; 0x175e <__floatsisf+0x6a>
    173c:	77 23       	and	r23, r23
    173e:	21 f0       	breq	.+8      	; 0x1748 <__floatsisf+0x54>
    1740:	9e e8       	ldi	r25, 0x8E	; 142
    1742:	87 2f       	mov	r24, r23
    1744:	76 2f       	mov	r23, r22
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <__floatsisf+0x5e>
    1748:	66 23       	and	r22, r22
    174a:	71 f0       	breq	.+28     	; 0x1768 <__floatsisf+0x74>
    174c:	96 e8       	ldi	r25, 0x86	; 134
    174e:	86 2f       	mov	r24, r22
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	2a f0       	brmi	.+10     	; 0x1760 <__floatsisf+0x6c>
    1756:	9a 95       	dec	r25
    1758:	66 0f       	add	r22, r22
    175a:	77 1f       	adc	r23, r23
    175c:	88 1f       	adc	r24, r24
    175e:	da f7       	brpl	.-10     	; 0x1756 <__floatsisf+0x62>
    1760:	88 0f       	add	r24, r24
    1762:	96 95       	lsr	r25
    1764:	87 95       	ror	r24
    1766:	97 f9       	bld	r25, 7
    1768:	08 95       	ret

0000176a <__fp_cmp>:
    176a:	99 0f       	add	r25, r25
    176c:	00 08       	sbc	r0, r0
    176e:	55 0f       	add	r21, r21
    1770:	aa 0b       	sbc	r26, r26
    1772:	e0 e8       	ldi	r30, 0x80	; 128
    1774:	fe ef       	ldi	r31, 0xFE	; 254
    1776:	16 16       	cp	r1, r22
    1778:	17 06       	cpc	r1, r23
    177a:	e8 07       	cpc	r30, r24
    177c:	f9 07       	cpc	r31, r25
    177e:	c0 f0       	brcs	.+48     	; 0x17b0 <__fp_cmp+0x46>
    1780:	12 16       	cp	r1, r18
    1782:	13 06       	cpc	r1, r19
    1784:	e4 07       	cpc	r30, r20
    1786:	f5 07       	cpc	r31, r21
    1788:	98 f0       	brcs	.+38     	; 0x17b0 <__fp_cmp+0x46>
    178a:	62 1b       	sub	r22, r18
    178c:	73 0b       	sbc	r23, r19
    178e:	84 0b       	sbc	r24, r20
    1790:	95 0b       	sbc	r25, r21
    1792:	39 f4       	brne	.+14     	; 0x17a2 <__fp_cmp+0x38>
    1794:	0a 26       	eor	r0, r26
    1796:	61 f0       	breq	.+24     	; 0x17b0 <__fp_cmp+0x46>
    1798:	23 2b       	or	r18, r19
    179a:	24 2b       	or	r18, r20
    179c:	25 2b       	or	r18, r21
    179e:	21 f4       	brne	.+8      	; 0x17a8 <__fp_cmp+0x3e>
    17a0:	08 95       	ret
    17a2:	0a 26       	eor	r0, r26
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <__fp_cmp+0x3e>
    17a6:	a1 40       	sbci	r26, 0x01	; 1
    17a8:	a6 95       	lsr	r26
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	81 1d       	adc	r24, r1
    17ae:	81 1d       	adc	r24, r1
    17b0:	08 95       	ret

000017b2 <__fp_inf>:
    17b2:	97 f9       	bld	r25, 7
    17b4:	9f 67       	ori	r25, 0x7F	; 127
    17b6:	80 e8       	ldi	r24, 0x80	; 128
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	08 95       	ret

000017be <__fp_nan>:
    17be:	9f ef       	ldi	r25, 0xFF	; 255
    17c0:	80 ec       	ldi	r24, 0xC0	; 192
    17c2:	08 95       	ret

000017c4 <__fp_powser>:
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	1f 93       	push	r17
    17ca:	0f 93       	push	r16
    17cc:	ff 92       	push	r15
    17ce:	ef 92       	push	r14
    17d0:	df 92       	push	r13
    17d2:	7b 01       	movw	r14, r22
    17d4:	8c 01       	movw	r16, r24
    17d6:	68 94       	set
    17d8:	05 c0       	rjmp	.+10     	; 0x17e4 <__fp_powser+0x20>
    17da:	da 2e       	mov	r13, r26
    17dc:	ef 01       	movw	r28, r30
    17de:	76 d0       	rcall	.+236    	; 0x18cc <__mulsf3x>
    17e0:	fe 01       	movw	r30, r28
    17e2:	e8 94       	clt
    17e4:	a5 91       	lpm	r26, Z+
    17e6:	25 91       	lpm	r18, Z+
    17e8:	35 91       	lpm	r19, Z+
    17ea:	45 91       	lpm	r20, Z+
    17ec:	55 91       	lpm	r21, Z+
    17ee:	ae f3       	brts	.-22     	; 0x17da <__fp_powser+0x16>
    17f0:	ef 01       	movw	r28, r30
    17f2:	66 de       	rcall	.-820    	; 0x14c0 <__addsf3x>
    17f4:	fe 01       	movw	r30, r28
    17f6:	97 01       	movw	r18, r14
    17f8:	a8 01       	movw	r20, r16
    17fa:	da 94       	dec	r13
    17fc:	79 f7       	brne	.-34     	; 0x17dc <__fp_powser+0x18>
    17fe:	df 90       	pop	r13
    1800:	ef 90       	pop	r14
    1802:	ff 90       	pop	r15
    1804:	0f 91       	pop	r16
    1806:	1f 91       	pop	r17
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <__fp_pscA>:
    180e:	00 24       	eor	r0, r0
    1810:	0a 94       	dec	r0
    1812:	16 16       	cp	r1, r22
    1814:	17 06       	cpc	r1, r23
    1816:	18 06       	cpc	r1, r24
    1818:	09 06       	cpc	r0, r25
    181a:	08 95       	ret

0000181c <__fp_pscB>:
    181c:	00 24       	eor	r0, r0
    181e:	0a 94       	dec	r0
    1820:	12 16       	cp	r1, r18
    1822:	13 06       	cpc	r1, r19
    1824:	14 06       	cpc	r1, r20
    1826:	05 06       	cpc	r0, r21
    1828:	08 95       	ret

0000182a <__fp_round>:
    182a:	09 2e       	mov	r0, r25
    182c:	03 94       	inc	r0
    182e:	00 0c       	add	r0, r0
    1830:	11 f4       	brne	.+4      	; 0x1836 <__fp_round+0xc>
    1832:	88 23       	and	r24, r24
    1834:	52 f0       	brmi	.+20     	; 0x184a <__fp_round+0x20>
    1836:	bb 0f       	add	r27, r27
    1838:	40 f4       	brcc	.+16     	; 0x184a <__fp_round+0x20>
    183a:	bf 2b       	or	r27, r31
    183c:	11 f4       	brne	.+4      	; 0x1842 <__fp_round+0x18>
    183e:	60 ff       	sbrs	r22, 0
    1840:	04 c0       	rjmp	.+8      	; 0x184a <__fp_round+0x20>
    1842:	6f 5f       	subi	r22, 0xFF	; 255
    1844:	7f 4f       	sbci	r23, 0xFF	; 255
    1846:	8f 4f       	sbci	r24, 0xFF	; 255
    1848:	9f 4f       	sbci	r25, 0xFF	; 255
    184a:	08 95       	ret

0000184c <__fp_split3>:
    184c:	57 fd       	sbrc	r21, 7
    184e:	90 58       	subi	r25, 0x80	; 128
    1850:	44 0f       	add	r20, r20
    1852:	55 1f       	adc	r21, r21
    1854:	59 f0       	breq	.+22     	; 0x186c <__fp_splitA+0x10>
    1856:	5f 3f       	cpi	r21, 0xFF	; 255
    1858:	71 f0       	breq	.+28     	; 0x1876 <__fp_splitA+0x1a>
    185a:	47 95       	ror	r20

0000185c <__fp_splitA>:
    185c:	88 0f       	add	r24, r24
    185e:	97 fb       	bst	r25, 7
    1860:	99 1f       	adc	r25, r25
    1862:	61 f0       	breq	.+24     	; 0x187c <__fp_splitA+0x20>
    1864:	9f 3f       	cpi	r25, 0xFF	; 255
    1866:	79 f0       	breq	.+30     	; 0x1886 <__fp_splitA+0x2a>
    1868:	87 95       	ror	r24
    186a:	08 95       	ret
    186c:	12 16       	cp	r1, r18
    186e:	13 06       	cpc	r1, r19
    1870:	14 06       	cpc	r1, r20
    1872:	55 1f       	adc	r21, r21
    1874:	f2 cf       	rjmp	.-28     	; 0x185a <__fp_split3+0xe>
    1876:	46 95       	lsr	r20
    1878:	f1 df       	rcall	.-30     	; 0x185c <__fp_splitA>
    187a:	08 c0       	rjmp	.+16     	; 0x188c <__fp_splitA+0x30>
    187c:	16 16       	cp	r1, r22
    187e:	17 06       	cpc	r1, r23
    1880:	18 06       	cpc	r1, r24
    1882:	99 1f       	adc	r25, r25
    1884:	f1 cf       	rjmp	.-30     	; 0x1868 <__fp_splitA+0xc>
    1886:	86 95       	lsr	r24
    1888:	71 05       	cpc	r23, r1
    188a:	61 05       	cpc	r22, r1
    188c:	08 94       	sec
    188e:	08 95       	ret

00001890 <__fp_zero>:
    1890:	e8 94       	clt

00001892 <__fp_szero>:
    1892:	bb 27       	eor	r27, r27
    1894:	66 27       	eor	r22, r22
    1896:	77 27       	eor	r23, r23
    1898:	cb 01       	movw	r24, r22
    189a:	97 f9       	bld	r25, 7
    189c:	08 95       	ret

0000189e <__gesf2>:
    189e:	65 df       	rcall	.-310    	; 0x176a <__fp_cmp>
    18a0:	08 f4       	brcc	.+2      	; 0x18a4 <__gesf2+0x6>
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	08 95       	ret

000018a6 <inverse>:
    18a6:	9b 01       	movw	r18, r22
    18a8:	ac 01       	movw	r20, r24
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	80 e8       	ldi	r24, 0x80	; 128
    18b0:	9f e3       	ldi	r25, 0x3F	; 63
    18b2:	85 ce       	rjmp	.-758    	; 0x15be <__divsf3>

000018b4 <__mulsf3>:
    18b4:	0b d0       	rcall	.+22     	; 0x18cc <__mulsf3x>
    18b6:	b9 cf       	rjmp	.-142    	; 0x182a <__fp_round>
    18b8:	aa df       	rcall	.-172    	; 0x180e <__fp_pscA>
    18ba:	28 f0       	brcs	.+10     	; 0x18c6 <__mulsf3+0x12>
    18bc:	af df       	rcall	.-162    	; 0x181c <__fp_pscB>
    18be:	18 f0       	brcs	.+6      	; 0x18c6 <__mulsf3+0x12>
    18c0:	95 23       	and	r25, r21
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <__mulsf3+0x12>
    18c4:	76 cf       	rjmp	.-276    	; 0x17b2 <__fp_inf>
    18c6:	7b cf       	rjmp	.-266    	; 0x17be <__fp_nan>
    18c8:	11 24       	eor	r1, r1
    18ca:	e3 cf       	rjmp	.-58     	; 0x1892 <__fp_szero>

000018cc <__mulsf3x>:
    18cc:	bf df       	rcall	.-130    	; 0x184c <__fp_split3>
    18ce:	a0 f3       	brcs	.-24     	; 0x18b8 <__mulsf3+0x4>

000018d0 <__mulsf3_pse>:
    18d0:	95 9f       	mul	r25, r21
    18d2:	d1 f3       	breq	.-12     	; 0x18c8 <__mulsf3+0x14>
    18d4:	95 0f       	add	r25, r21
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	55 1f       	adc	r21, r21
    18da:	62 9f       	mul	r22, r18
    18dc:	f0 01       	movw	r30, r0
    18de:	72 9f       	mul	r23, r18
    18e0:	bb 27       	eor	r27, r27
    18e2:	f0 0d       	add	r31, r0
    18e4:	b1 1d       	adc	r27, r1
    18e6:	63 9f       	mul	r22, r19
    18e8:	aa 27       	eor	r26, r26
    18ea:	f0 0d       	add	r31, r0
    18ec:	b1 1d       	adc	r27, r1
    18ee:	aa 1f       	adc	r26, r26
    18f0:	64 9f       	mul	r22, r20
    18f2:	66 27       	eor	r22, r22
    18f4:	b0 0d       	add	r27, r0
    18f6:	a1 1d       	adc	r26, r1
    18f8:	66 1f       	adc	r22, r22
    18fa:	82 9f       	mul	r24, r18
    18fc:	22 27       	eor	r18, r18
    18fe:	b0 0d       	add	r27, r0
    1900:	a1 1d       	adc	r26, r1
    1902:	62 1f       	adc	r22, r18
    1904:	73 9f       	mul	r23, r19
    1906:	b0 0d       	add	r27, r0
    1908:	a1 1d       	adc	r26, r1
    190a:	62 1f       	adc	r22, r18
    190c:	83 9f       	mul	r24, r19
    190e:	a0 0d       	add	r26, r0
    1910:	61 1d       	adc	r22, r1
    1912:	22 1f       	adc	r18, r18
    1914:	74 9f       	mul	r23, r20
    1916:	33 27       	eor	r19, r19
    1918:	a0 0d       	add	r26, r0
    191a:	61 1d       	adc	r22, r1
    191c:	23 1f       	adc	r18, r19
    191e:	84 9f       	mul	r24, r20
    1920:	60 0d       	add	r22, r0
    1922:	21 1d       	adc	r18, r1
    1924:	82 2f       	mov	r24, r18
    1926:	76 2f       	mov	r23, r22
    1928:	6a 2f       	mov	r22, r26
    192a:	11 24       	eor	r1, r1
    192c:	9f 57       	subi	r25, 0x7F	; 127
    192e:	50 40       	sbci	r21, 0x00	; 0
    1930:	8a f0       	brmi	.+34     	; 0x1954 <__mulsf3_pse+0x84>
    1932:	e1 f0       	breq	.+56     	; 0x196c <__mulsf3_pse+0x9c>
    1934:	88 23       	and	r24, r24
    1936:	4a f0       	brmi	.+18     	; 0x194a <__mulsf3_pse+0x7a>
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	bb 1f       	adc	r27, r27
    193e:	66 1f       	adc	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	88 1f       	adc	r24, r24
    1944:	91 50       	subi	r25, 0x01	; 1
    1946:	50 40       	sbci	r21, 0x00	; 0
    1948:	a9 f7       	brne	.-22     	; 0x1934 <__mulsf3_pse+0x64>
    194a:	9e 3f       	cpi	r25, 0xFE	; 254
    194c:	51 05       	cpc	r21, r1
    194e:	70 f0       	brcs	.+28     	; 0x196c <__mulsf3_pse+0x9c>
    1950:	30 cf       	rjmp	.-416    	; 0x17b2 <__fp_inf>
    1952:	9f cf       	rjmp	.-194    	; 0x1892 <__fp_szero>
    1954:	5f 3f       	cpi	r21, 0xFF	; 255
    1956:	ec f3       	brlt	.-6      	; 0x1952 <__mulsf3_pse+0x82>
    1958:	98 3e       	cpi	r25, 0xE8	; 232
    195a:	dc f3       	brlt	.-10     	; 0x1952 <__mulsf3_pse+0x82>
    195c:	86 95       	lsr	r24
    195e:	77 95       	ror	r23
    1960:	67 95       	ror	r22
    1962:	b7 95       	ror	r27
    1964:	f7 95       	ror	r31
    1966:	e7 95       	ror	r30
    1968:	9f 5f       	subi	r25, 0xFF	; 255
    196a:	c1 f7       	brne	.-16     	; 0x195c <__mulsf3_pse+0x8c>
    196c:	fe 2b       	or	r31, r30
    196e:	88 0f       	add	r24, r24
    1970:	91 1d       	adc	r25, r1
    1972:	96 95       	lsr	r25
    1974:	87 95       	ror	r24
    1976:	97 f9       	bld	r25, 7
    1978:	08 95       	ret

0000197a <square>:
    197a:	9b 01       	movw	r18, r22
    197c:	ac 01       	movw	r20, r24
    197e:	9a cf       	rjmp	.-204    	; 0x18b4 <__mulsf3>

00001980 <__udivmodhi4>:
    1980:	aa 1b       	sub	r26, r26
    1982:	bb 1b       	sub	r27, r27
    1984:	51 e1       	ldi	r21, 0x11	; 17
    1986:	07 c0       	rjmp	.+14     	; 0x1996 <__udivmodhi4_ep>

00001988 <__udivmodhi4_loop>:
    1988:	aa 1f       	adc	r26, r26
    198a:	bb 1f       	adc	r27, r27
    198c:	a6 17       	cp	r26, r22
    198e:	b7 07       	cpc	r27, r23
    1990:	10 f0       	brcs	.+4      	; 0x1996 <__udivmodhi4_ep>
    1992:	a6 1b       	sub	r26, r22
    1994:	b7 0b       	sbc	r27, r23

00001996 <__udivmodhi4_ep>:
    1996:	88 1f       	adc	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	5a 95       	dec	r21
    199c:	a9 f7       	brne	.-22     	; 0x1988 <__udivmodhi4_loop>
    199e:	80 95       	com	r24
    19a0:	90 95       	com	r25
    19a2:	bc 01       	movw	r22, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	08 95       	ret

000019a8 <__divmodhi4>:
    19a8:	97 fb       	bst	r25, 7
    19aa:	09 2e       	mov	r0, r25
    19ac:	07 26       	eor	r0, r23
    19ae:	0a d0       	rcall	.+20     	; 0x19c4 <__divmodhi4_neg1>
    19b0:	77 fd       	sbrc	r23, 7
    19b2:	04 d0       	rcall	.+8      	; 0x19bc <__divmodhi4_neg2>
    19b4:	e5 df       	rcall	.-54     	; 0x1980 <__udivmodhi4>
    19b6:	06 d0       	rcall	.+12     	; 0x19c4 <__divmodhi4_neg1>
    19b8:	00 20       	and	r0, r0
    19ba:	1a f4       	brpl	.+6      	; 0x19c2 <__divmodhi4_exit>

000019bc <__divmodhi4_neg2>:
    19bc:	70 95       	com	r23
    19be:	61 95       	neg	r22
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255

000019c2 <__divmodhi4_exit>:
    19c2:	08 95       	ret

000019c4 <__divmodhi4_neg1>:
    19c4:	f6 f7       	brtc	.-4      	; 0x19c2 <__divmodhi4_exit>
    19c6:	90 95       	com	r25
    19c8:	81 95       	neg	r24
    19ca:	9f 4f       	sbci	r25, 0xFF	; 255
    19cc:	08 95       	ret

000019ce <__divmodsi4>:
    19ce:	97 fb       	bst	r25, 7
    19d0:	09 2e       	mov	r0, r25
    19d2:	05 26       	eor	r0, r21
    19d4:	0e d0       	rcall	.+28     	; 0x19f2 <__divmodsi4_neg1>
    19d6:	57 fd       	sbrc	r21, 7
    19d8:	04 d0       	rcall	.+8      	; 0x19e2 <__divmodsi4_neg2>
    19da:	14 d0       	rcall	.+40     	; 0x1a04 <__udivmodsi4>
    19dc:	0a d0       	rcall	.+20     	; 0x19f2 <__divmodsi4_neg1>
    19de:	00 1c       	adc	r0, r0
    19e0:	38 f4       	brcc	.+14     	; 0x19f0 <__divmodsi4_exit>

000019e2 <__divmodsi4_neg2>:
    19e2:	50 95       	com	r21
    19e4:	40 95       	com	r20
    19e6:	30 95       	com	r19
    19e8:	21 95       	neg	r18
    19ea:	3f 4f       	sbci	r19, 0xFF	; 255
    19ec:	4f 4f       	sbci	r20, 0xFF	; 255
    19ee:	5f 4f       	sbci	r21, 0xFF	; 255

000019f0 <__divmodsi4_exit>:
    19f0:	08 95       	ret

000019f2 <__divmodsi4_neg1>:
    19f2:	f6 f7       	brtc	.-4      	; 0x19f0 <__divmodsi4_exit>
    19f4:	90 95       	com	r25
    19f6:	80 95       	com	r24
    19f8:	70 95       	com	r23
    19fa:	61 95       	neg	r22
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1a00:	9f 4f       	sbci	r25, 0xFF	; 255
    1a02:	08 95       	ret

00001a04 <__udivmodsi4>:
    1a04:	a1 e2       	ldi	r26, 0x21	; 33
    1a06:	1a 2e       	mov	r1, r26
    1a08:	aa 1b       	sub	r26, r26
    1a0a:	bb 1b       	sub	r27, r27
    1a0c:	fd 01       	movw	r30, r26
    1a0e:	0d c0       	rjmp	.+26     	; 0x1a2a <__udivmodsi4_ep>

00001a10 <__udivmodsi4_loop>:
    1a10:	aa 1f       	adc	r26, r26
    1a12:	bb 1f       	adc	r27, r27
    1a14:	ee 1f       	adc	r30, r30
    1a16:	ff 1f       	adc	r31, r31
    1a18:	a2 17       	cp	r26, r18
    1a1a:	b3 07       	cpc	r27, r19
    1a1c:	e4 07       	cpc	r30, r20
    1a1e:	f5 07       	cpc	r31, r21
    1a20:	20 f0       	brcs	.+8      	; 0x1a2a <__udivmodsi4_ep>
    1a22:	a2 1b       	sub	r26, r18
    1a24:	b3 0b       	sbc	r27, r19
    1a26:	e4 0b       	sbc	r30, r20
    1a28:	f5 0b       	sbc	r31, r21

00001a2a <__udivmodsi4_ep>:
    1a2a:	66 1f       	adc	r22, r22
    1a2c:	77 1f       	adc	r23, r23
    1a2e:	88 1f       	adc	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	1a 94       	dec	r1
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <__udivmodsi4_loop>
    1a36:	60 95       	com	r22
    1a38:	70 95       	com	r23
    1a3a:	80 95       	com	r24
    1a3c:	90 95       	com	r25
    1a3e:	9b 01       	movw	r18, r22
    1a40:	ac 01       	movw	r20, r24
    1a42:	bd 01       	movw	r22, r26
    1a44:	cf 01       	movw	r24, r30
    1a46:	08 95       	ret

00001a48 <_exit>:
    1a48:	f8 94       	cli

00001a4a <__stop_program>:
    1a4a:	ff cf       	rjmp	.-2      	; 0x1a4a <__stop_program>
