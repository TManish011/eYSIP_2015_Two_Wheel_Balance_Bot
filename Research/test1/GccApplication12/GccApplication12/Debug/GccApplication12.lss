
GccApplication12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000019e8  00001a7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800204  00800204  00001a80  2**0
                  ALLOC
  3 .stab         00002934  00000000  00000000  00001a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000950  00000000  00000000  000043b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00004d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001886  00000000  00000000  00004e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003f1  00000000  00000000  0000668e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ca  00000000  00000000  00006a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d4  00000000  00000000  0000744c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d4  00000000  00000000  00007920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c42  00000000  00000000  00007df4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 77 06 	jmp	0xcee	; 0xcee <__vector_25>
      68:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      6c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      70:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      74:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      78:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      80:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      84:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      88:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      8c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      90:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      94:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      98:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      9c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      ac:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b4:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_45>
      b8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      bc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      cc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      dc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	sts	0x9b, r22
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	12 e0       	ldi	r17, 0x02	; 2
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	e8 ee       	ldi	r30, 0xE8	; 232
     12a:	f9 e1       	ldi	r31, 0x19	; 25
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	0b bf       	out	0x3b, r16	; 59
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
     132:	07 90       	elpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a4 30       	cpi	r26, 0x04	; 4
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
     13c:	12 e0       	ldi	r17, 0x02	; 2
     13e:	a4 e0       	ldi	r26, 0x04	; 4
     140:	b2 e0       	ldi	r27, 0x02	; 2
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	aa 34       	cpi	r26, 0x4A	; 74
     148:	b1 07       	cpc	r27, r17
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <main>
     150:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <pid_right>:
	kd = Kd;
}

void pid_right(void)
{
	OCR5AH=0x00;
     158:	10 92 29 01 	sts	0x0129, r1
	OCR5AL=0x00;
     15c:	10 92 28 01 	sts	0x0128, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	9f e8       	ldi	r25, 0x8F	; 143
     164:	01 97       	sbiw	r24, 0x01	; 1
     166:	f1 f7       	brne	.-4      	; 0x164 <pid_right+0xc>
     168:	00 c0       	rjmp	.+0      	; 0x16a <pid_right+0x12>
     16a:	00 00       	nop
	_delay_ms(10);
}
     16c:	08 95       	ret

0000016e <pid_left>:

void pid_left(void)
{
	OCR5BH = 0x00;
     16e:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0x00;
     172:	10 92 2a 01 	sts	0x012A, r1
     176:	8f ef       	ldi	r24, 0xFF	; 255
     178:	9f e8       	ldi	r25, 0x8F	; 143
     17a:	01 97       	sbiw	r24, 0x01	; 1
     17c:	f1 f7       	brne	.-4      	; 0x17a <pid_left+0xc>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <pid_left+0x12>
     180:	00 00       	nop
	_delay_ms(10);
}
     182:	08 95       	ret

00000184 <timer4_init>:
volatile uint8_t tot_overflow;


void timer4_init(void)
{
	tot_overflow=0;
     184:	10 92 2c 02 	sts	0x022C, r1
	TCCR4B = 0x00; //stop
     188:	e1 ea       	ldi	r30, 0xA1	; 161
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	10 82       	st	Z, r1
	TCNT4H = 0xC6; //Counter higher 8 bit value
     18e:	86 ec       	ldi	r24, 0xC6	; 198
     190:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //Counter lower 8 bit value
     194:	87 e6       	ldi	r24, 0x67	; 103
     196:	80 93 a4 00 	sts	0x00A4, r24
	OCR4AH = 0x00; //Output compare Register (OCR)- Not used
     19a:	10 92 a9 00 	sts	0x00A9, r1
	OCR4AL = 0x00; //Output compare Register (OCR)- Not used
     19e:	10 92 a8 00 	sts	0x00A8, r1
	OCR4BH = 0x00; //Output compare Register (OCR)- Not used
     1a2:	10 92 ab 00 	sts	0x00AB, r1
	OCR4BL = 0x00; //Output compare Register (OCR)- Not used
     1a6:	10 92 aa 00 	sts	0x00AA, r1
	OCR4CH = 0x00; //Output compare Register (OCR)- Not used
     1aa:	10 92 ad 00 	sts	0x00AD, r1
	OCR4CL = 0x00; //Output compare Register (OCR)- Not used
     1ae:	10 92 ac 00 	sts	0x00AC, r1
	ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
     1b2:	10 92 a7 00 	sts	0x00A7, r1
	ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
     1b6:	10 92 a6 00 	sts	0x00A6, r1
	TCCR4A = 0x00;
     1ba:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4C = 0x00;
     1be:	10 92 a2 00 	sts	0x00A2, r1
	TCCR4B = 0x01; //start Timer
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	80 83       	st	Z, r24
}
     1c6:	08 95       	ret

000001c8 <__vector_45>:

// TIMER4 overflow interrupt service routine
// called whenever TCNT4 overflows
ISR(TIMER4_OVF_vect)
{
     1c8:	1f 92       	push	r1
     1ca:	0f 92       	push	r0
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	0f 92       	push	r0
     1d0:	11 24       	eor	r1, r1
     1d2:	8f 93       	push	r24
	// keep a track of number of overflows
	tot_overflow++;
     1d4:	80 91 2c 02 	lds	r24, 0x022C
     1d8:	8f 5f       	subi	r24, 0xFF	; 255
     1da:	80 93 2c 02 	sts	0x022C, r24
	//TIMER4 has overflowed
	TCNT4H = 0xC6; //reload counter high value
     1de:	86 ec       	ldi	r24, 0xC6	; 198
     1e0:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //reload counter low value
     1e4:	87 e6       	ldi	r24, 0x67	; 103
     1e6:	80 93 a4 00 	sts	0x00A4, r24
}
     1ea:	8f 91       	pop	r24
     1ec:	0f 90       	pop	r0
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	0f 90       	pop	r0
     1f2:	1f 90       	pop	r1
     1f4:	18 95       	reti

000001f6 <start_timer4>:

void start_timer4(void)
{
	cli(); //Clears the global interrupts
     1f6:	f8 94       	cli
	timer4_init();
     1f8:	0e 94 c2 00 	call	0x184	; 0x184 <timer4_init>
	TIMSK4 = 0x01; //timer4 overflow interrupt enable
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 72 00 	sts	0x0072, r24
	sei();   //Enables the global interrupts
     202:	78 94       	sei

}
     204:	08 95       	ret

00000206 <micros>:

int micros(void)
{
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791)/14745);
     20e:	10 91 2c 02 	lds	r17, 0x022C
     212:	c0 91 a4 00 	lds	r28, 0x00A4
     216:	d0 91 a5 00 	lds	r29, 0x00A5
	start_timer4();
     21a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <start_timer4>
}

int micros(void)
{
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791)/14745);
     21e:	ce 01       	movw	r24, r28
     220:	a0 e0       	ldi	r26, 0x00	; 0
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	bc 01       	movw	r22, r24
     226:	cd 01       	movw	r24, r26
     228:	67 56       	subi	r22, 0x67	; 103
     22a:	76 4c       	sbci	r23, 0xC6	; 198
     22c:	80 40       	sbci	r24, 0x00	; 0
     22e:	90 40       	sbci	r25, 0x00	; 0
     230:	29 e9       	ldi	r18, 0x99	; 153
     232:	39 e3       	ldi	r19, 0x39	; 57
     234:	40 e0       	ldi	r20, 0x00	; 0
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	0e 94 b5 0c 	call	0x196a	; 0x196a <__divmodsi4>
     23c:	da 01       	movw	r26, r20
     23e:	c9 01       	movw	r24, r18
     240:	81 0f       	add	r24, r17
     242:	91 1d       	adc	r25, r1
     244:	a1 1d       	adc	r26, r1
     246:	b1 1d       	adc	r27, r1
     248:	8c 01       	movw	r16, r24
     24a:	9d 01       	movw	r18, r26
     24c:	48 ee       	ldi	r20, 0xE8	; 232
     24e:	53 e0       	ldi	r21, 0x03	; 3
     250:	04 9f       	mul	r16, r20
     252:	c0 01       	movw	r24, r0
     254:	05 9f       	mul	r16, r21
     256:	90 0d       	add	r25, r0
     258:	14 9f       	mul	r17, r20
     25a:	90 0d       	add	r25, r0
     25c:	11 24       	eor	r1, r1
	start_timer4();
	return time;

}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	08 95       	ret

00000268 <millis>:
int millis(int mode)
{
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	8c 01       	movw	r16, r24
	int time=0;
	time=(tot_overflow + (TCNT4-50791)/14745);
     272:	c0 91 2c 02 	lds	r28, 0x022C
     276:	60 91 a4 00 	lds	r22, 0x00A4
     27a:	70 91 a5 00 	lds	r23, 0x00A5
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	67 56       	subi	r22, 0x67	; 103
     284:	76 4c       	sbci	r23, 0xC6	; 198
     286:	80 40       	sbci	r24, 0x00	; 0
     288:	90 40       	sbci	r25, 0x00	; 0
     28a:	29 e9       	ldi	r18, 0x99	; 153
     28c:	39 e3       	ldi	r19, 0x39	; 57
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	0e 94 b5 0c 	call	0x196a	; 0x196a <__divmodsi4>
     296:	d0 e0       	ldi	r29, 0x00	; 0
     298:	c2 0f       	add	r28, r18
     29a:	d3 1f       	adc	r29, r19
	if (mode==0)
     29c:	01 15       	cp	r16, r1
     29e:	11 05       	cpc	r17, r1
     2a0:	11 f4       	brne	.+4      	; 0x2a6 <millis+0x3e>
	{		
		start_timer4();
     2a2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <start_timer4>
	}	
	return time;

}
     2a6:	8c 2f       	mov	r24, r28
     2a8:	9d 2f       	mov	r25, r29
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	08 95       	ret

000002b4 <lcd_set_4bit>:
     2b4:	86 e6       	ldi	r24, 0x66	; 102
     2b6:	9e e0       	ldi	r25, 0x0E	; 14
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <lcd_set_4bit+0x4>
     2bc:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2be:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2c0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     2c2:	80 e3       	ldi	r24, 0x30	; 48
     2c4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2c6:	42 9a       	sbi	0x08, 2	; 8
     2c8:	ef ef       	ldi	r30, 0xFF	; 255
     2ca:	f7 e4       	ldi	r31, 0x47	; 71
     2cc:	31 97       	sbiw	r30, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <lcd_set_4bit+0x18>
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <lcd_set_4bit+0x1e>
     2d2:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2d4:	42 98       	cbi	0x08, 2	; 8
     2d6:	e6 e6       	ldi	r30, 0x66	; 102
     2d8:	fe e0       	ldi	r31, 0x0E	; 14
     2da:	31 97       	sbiw	r30, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_set_4bit+0x26>
     2de:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2e0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2e2:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     2e4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2e6:	42 9a       	sbi	0x08, 2	; 8
     2e8:	ef ef       	ldi	r30, 0xFF	; 255
     2ea:	f7 e4       	ldi	r31, 0x47	; 71
     2ec:	31 97       	sbiw	r30, 0x01	; 1
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <lcd_set_4bit+0x38>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <lcd_set_4bit+0x3e>
     2f2:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2f4:	42 98       	cbi	0x08, 2	; 8
     2f6:	e6 e6       	ldi	r30, 0x66	; 102
     2f8:	fe e0       	ldi	r31, 0x0E	; 14
     2fa:	31 97       	sbiw	r30, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_set_4bit+0x46>
     2fe:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     300:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     302:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     304:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     306:	42 9a       	sbi	0x08, 2	; 8
     308:	8f ef       	ldi	r24, 0xFF	; 255
     30a:	97 e4       	ldi	r25, 0x47	; 71
     30c:	01 97       	sbiw	r24, 0x01	; 1
     30e:	f1 f7       	brne	.-4      	; 0x30c <lcd_set_4bit+0x58>
     310:	00 c0       	rjmp	.+0      	; 0x312 <lcd_set_4bit+0x5e>
     312:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     314:	42 98       	cbi	0x08, 2	; 8
     316:	e6 e6       	ldi	r30, 0x66	; 102
     318:	fe e0       	ldi	r31, 0x0E	; 14
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <lcd_set_4bit+0x66>
     31e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     320:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     322:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     324:	80 e2       	ldi	r24, 0x20	; 32
     326:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     328:	42 9a       	sbi	0x08, 2	; 8
     32a:	8f ef       	ldi	r24, 0xFF	; 255
     32c:	97 e4       	ldi	r25, 0x47	; 71
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <lcd_set_4bit+0x7a>
     332:	00 c0       	rjmp	.+0      	; 0x334 <lcd_set_4bit+0x80>
     334:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     336:	42 98       	cbi	0x08, 2	; 8
}
     338:	08 95       	ret

0000033a <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     33a:	98 b1       	in	r25, 0x08	; 8
     33c:	9f 70       	andi	r25, 0x0F	; 15
     33e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     340:	98 b1       	in	r25, 0x08	; 8
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     342:	28 2f       	mov	r18, r24
     344:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     346:	92 2b       	or	r25, r18
     348:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     34a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     34c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     34e:	42 9a       	sbi	0x08, 2	; 8
     350:	ef ef       	ldi	r30, 0xFF	; 255
     352:	f7 e4       	ldi	r31, 0x47	; 71
     354:	31 97       	sbiw	r30, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <lcd_wr_command+0x1a>
     358:	00 c0       	rjmp	.+0      	; 0x35a <lcd_wr_command+0x20>
     35a:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     35c:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     35e:	98 b1       	in	r25, 0x08	; 8
     360:	9f 70       	andi	r25, 0x0F	; 15
     362:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     364:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     366:	82 95       	swap	r24
     368:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     36a:	89 2b       	or	r24, r25
     36c:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     36e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     370:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     372:	42 9a       	sbi	0x08, 2	; 8
     374:	8f ef       	ldi	r24, 0xFF	; 255
     376:	97 e4       	ldi	r25, 0x47	; 71
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <lcd_wr_command+0x3e>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <lcd_wr_command+0x44>
     37e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     380:	42 98       	cbi	0x08, 2	; 8
}
     382:	08 95       	ret

00000384 <lcd_init>:
     384:	86 e6       	ldi	r24, 0x66	; 102
     386:	9e e0       	ldi	r25, 0x0E	; 14
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	f1 f7       	brne	.-4      	; 0x388 <lcd_init+0x4>
     38c:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     38e:	88 e2       	ldi	r24, 0x28	; 40
     390:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     39a:	86 e0       	ldi	r24, 0x06	; 6
     39c:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     3a0:	8e e0       	ldi	r24, 0x0E	; 14
     3a2:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     3a6:	80 e8       	ldi	r24, 0x80	; 128
     3a8:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_wr_command>
}
     3ac:	08 95       	ret

000003ae <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     3ae:	98 b1       	in	r25, 0x08	; 8
     3b0:	9f 70       	andi	r25, 0x0F	; 15
     3b2:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     3b4:	98 b1       	in	r25, 0x08	; 8
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     3b6:	28 2f       	mov	r18, r24
     3b8:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     3ba:	92 2b       	or	r25, r18
     3bc:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     3be:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     3c0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     3c2:	42 9a       	sbi	0x08, 2	; 8
     3c4:	ef ef       	ldi	r30, 0xFF	; 255
     3c6:	f7 e4       	ldi	r31, 0x47	; 71
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <lcd_wr_char+0x1a>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <lcd_wr_char+0x20>
     3ce:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3d0:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     3d2:	98 b1       	in	r25, 0x08	; 8
     3d4:	9f 70       	andi	r25, 0x0F	; 15
     3d6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     3d8:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     3da:	82 95       	swap	r24
     3dc:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     3de:	89 2b       	or	r24, r25
     3e0:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     3e2:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     3e4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     3e6:	42 9a       	sbi	0x08, 2	; 8
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
     3ea:	97 e4       	ldi	r25, 0x47	; 71
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_wr_char+0x3e>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <lcd_wr_char+0x44>
     3f2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3f4:	42 98       	cbi	0x08, 2	; 8
}
     3f6:	08 95       	ret

000003f8 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     3f8:	80 e8       	ldi	r24, 0x80	; 128
     3fa:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_wr_command>
}
     3fe:	08 95       	ret

00000400 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	ec 01       	movw	r28, r24
	while(*str != '\0')
     406:	88 81       	ld	r24, Y
     408:	88 23       	and	r24, r24
     40a:	31 f0       	breq	.+12     	; 0x418 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     40c:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     40e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     412:	89 91       	ld	r24, Y+
     414:	88 23       	and	r24, r24
     416:	d9 f7       	brne	.-10     	; 0x40e <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret

0000041e <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
     41e:	82 30       	cpi	r24, 0x02	; 2
     420:	79 f0       	breq	.+30     	; 0x440 <lcd_cursor+0x22>
     422:	83 30       	cpi	r24, 0x03	; 3
     424:	18 f4       	brcc	.+6      	; 0x42c <lcd_cursor+0xe>
     426:	81 30       	cpi	r24, 0x01	; 1
     428:	c9 f4       	brne	.+50     	; 0x45c <lcd_cursor+0x3e>
     42a:	05 c0       	rjmp	.+10     	; 0x436 <lcd_cursor+0x18>
     42c:	83 30       	cpi	r24, 0x03	; 3
     42e:	69 f0       	breq	.+26     	; 0x44a <lcd_cursor+0x2c>
     430:	84 30       	cpi	r24, 0x04	; 4
     432:	a1 f4       	brne	.+40     	; 0x45c <lcd_cursor+0x3e>
     434:	0f c0       	rjmp	.+30     	; 0x454 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     436:	86 2f       	mov	r24, r22
     438:	81 58       	subi	r24, 0x81	; 129
     43a:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_wr_command>
     43e:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     440:	86 2f       	mov	r24, r22
     442:	81 54       	subi	r24, 0x41	; 65
     444:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_wr_command>
     448:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     44a:	86 2f       	mov	r24, r22
     44c:	8d 56       	subi	r24, 0x6D	; 109
     44e:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_wr_command>
     452:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     454:	86 2f       	mov	r24, r22
     456:	8d 52       	subi	r24, 0x2D	; 45
     458:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_wr_command>
     45c:	08 95       	ret

0000045e <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	8a 01       	movw	r16, r20
     468:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     46a:	88 23       	and	r24, r24
     46c:	11 f0       	breq	.+4      	; 0x472 <lcd_print+0x14>
     46e:	66 23       	and	r22, r22
     470:	19 f4       	brne	.+6      	; 0x478 <lcd_print+0x1a>
	{
		lcd_home();
     472:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_home>
     476:	02 c0       	rjmp	.+4      	; 0x47c <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     478:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_cursor>
	}
	if(digits==5 || flag==1)
     47c:	c5 30       	cpi	r28, 0x05	; 5
     47e:	d1 05       	cpc	r29, r1
     480:	71 f4       	brne	.+28     	; 0x49e <lcd_print+0x40>
	{
		million=value/10000+48;
     482:	c8 01       	movw	r24, r16
     484:	60 e1       	ldi	r22, 0x10	; 16
     486:	77 e2       	ldi	r23, 0x27	; 39
     488:	0e 94 8e 0c 	call	0x191c	; 0x191c <__udivmodhi4>
     48c:	cb 01       	movw	r24, r22
     48e:	c0 96       	adiw	r24, 0x30	; 48
     490:	90 93 27 02 	sts	0x0227, r25
     494:	80 93 26 02 	sts	0x0226, r24
		lcd_wr_char(million);
     498:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_wr_char>
     49c:	03 c0       	rjmp	.+6      	; 0x4a4 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     49e:	c4 30       	cpi	r28, 0x04	; 4
     4a0:	d1 05       	cpc	r29, r1
     4a2:	b9 f4       	brne	.+46     	; 0x4d2 <lcd_print+0x74>
	{
		temp = value/1000;
     4a4:	c8 01       	movw	r24, r16
     4a6:	68 ee       	ldi	r22, 0xE8	; 232
     4a8:	73 e0       	ldi	r23, 0x03	; 3
     4aa:	0e 94 8e 0c 	call	0x191c	; 0x191c <__udivmodhi4>
     4ae:	cb 01       	movw	r24, r22
     4b0:	70 93 29 02 	sts	0x0229, r23
     4b4:	60 93 28 02 	sts	0x0228, r22
		thousand = temp%10 + 48;
     4b8:	6a e0       	ldi	r22, 0x0A	; 10
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	0e 94 8e 0c 	call	0x191c	; 0x191c <__udivmodhi4>
     4c0:	c0 96       	adiw	r24, 0x30	; 48
     4c2:	90 93 45 02 	sts	0x0245, r25
     4c6:	80 93 44 02 	sts	0x0244, r24
		lcd_wr_char(thousand);
     4ca:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_wr_char>
		flag=1;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <lcd_print+0x76>
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     4d2:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     4d4:	c3 30       	cpi	r28, 0x03	; 3
     4d6:	d1 05       	cpc	r29, r1
     4d8:	11 f0       	breq	.+4      	; 0x4de <lcd_print+0x80>
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	b1 f4       	brne	.+44     	; 0x50a <lcd_print+0xac>
	{
		temp = value/100;
     4de:	c8 01       	movw	r24, r16
     4e0:	64 e6       	ldi	r22, 0x64	; 100
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	0e 94 8e 0c 	call	0x191c	; 0x191c <__udivmodhi4>
     4e8:	cb 01       	movw	r24, r22
     4ea:	70 93 29 02 	sts	0x0229, r23
     4ee:	60 93 28 02 	sts	0x0228, r22
		hundred = temp%10 + 48;
     4f2:	6a e0       	ldi	r22, 0x0A	; 10
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	0e 94 8e 0c 	call	0x191c	; 0x191c <__udivmodhi4>
     4fa:	c0 96       	adiw	r24, 0x30	; 48
     4fc:	90 93 3d 02 	sts	0x023D, r25
     500:	80 93 3c 02 	sts	0x023C, r24
		lcd_wr_char(hundred);
     504:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_wr_char>
		flag=1;
     508:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     50a:	c2 30       	cpi	r28, 0x02	; 2
     50c:	d1 05       	cpc	r29, r1
     50e:	11 f0       	breq	.+4      	; 0x514 <lcd_print+0xb6>
     510:	81 30       	cpi	r24, 0x01	; 1
     512:	b1 f4       	brne	.+44     	; 0x540 <lcd_print+0xe2>
	{
		temp = value/10;
     514:	2a e0       	ldi	r18, 0x0A	; 10
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	c8 01       	movw	r24, r16
     51a:	b9 01       	movw	r22, r18
     51c:	0e 94 8e 0c 	call	0x191c	; 0x191c <__udivmodhi4>
     520:	cb 01       	movw	r24, r22
     522:	70 93 29 02 	sts	0x0229, r23
     526:	60 93 28 02 	sts	0x0228, r22
		tens = temp%10 + 48;
     52a:	b9 01       	movw	r22, r18
     52c:	0e 94 8e 0c 	call	0x191c	; 0x191c <__udivmodhi4>
     530:	c0 96       	adiw	r24, 0x30	; 48
     532:	90 93 32 02 	sts	0x0232, r25
     536:	80 93 31 02 	sts	0x0231, r24
		lcd_wr_char(tens);
     53a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_wr_char>
		flag=1;
     53e:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     540:	c1 30       	cpi	r28, 0x01	; 1
     542:	d1 05       	cpc	r29, r1
     544:	11 f0       	breq	.+4      	; 0x54a <lcd_print+0xec>
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	61 f4       	brne	.+24     	; 0x562 <lcd_print+0x104>
	{
		unit = value%10 + 48;
     54a:	c8 01       	movw	r24, r16
     54c:	6a e0       	ldi	r22, 0x0A	; 10
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	0e 94 8e 0c 	call	0x191c	; 0x191c <__udivmodhi4>
     554:	c0 96       	adiw	r24, 0x30	; 48
     556:	90 93 43 02 	sts	0x0243, r25
     55a:	80 93 42 02 	sts	0x0242, r24
		lcd_wr_char(unit);
     55e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_wr_char>
	}
	if(digits>5)
     562:	c6 30       	cpi	r28, 0x06	; 6
     564:	d1 05       	cpc	r29, r1
     566:	1c f0       	brlt	.+6      	; 0x56e <lcd_print+0x110>
	{
		lcd_wr_char('E');
     568:	85 e4       	ldi	r24, 0x45	; 69
     56a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_wr_char>
	}
}
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	08 95       	ret

00000578 <display_clear>:
	

void display_clear(void)
{
	lcd_wr_command(0x01);
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_wr_command>
}	
     57e:	08 95       	ret

00000580 <lcd_port_config>:

//------------------------------------------------------------------------------
//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;      //all the LCD pin's direction set as output
     580:	87 b1       	in	r24, 0x07	; 7
     582:	87 6f       	ori	r24, 0xF7	; 247
     584:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;    // all the LCD pins are set to logic 0 except PORTC 7
     586:	88 b1       	in	r24, 0x08	; 8
     588:	80 78       	andi	r24, 0x80	; 128
     58a:	88 b9       	out	0x08, r24	; 8
}
     58c:	08 95       	ret

0000058e <twi_init>:

//TWI initialize
// bit rate:72
void twi_init(void)
{
 TWCR = 0x00;   //disable twi
     58e:	ec eb       	ldi	r30, 0xBC	; 188
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	10 82       	st	Z, r1
 TWBR = 0x10; //set bit rate
     594:	80 e1       	ldi	r24, 0x10	; 16
     596:	80 93 b8 00 	sts	0x00B8, r24
 TWSR = 0x00; //set prescale
     59a:	10 92 b9 00 	sts	0x00B9, r1
 TWAR = 0x00; //set slave address
     59e:	10 92 ba 00 	sts	0x00BA, r1
 TWCR = 0x04; //enable twi
     5a2:	84 e0       	ldi	r24, 0x04	; 4
     5a4:	80 83       	st	Z, r24
}
     5a6:	08 95       	ret

000005a8 <write_byte>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
     5a8:	94 ea       	ldi	r25, 0xA4	; 164
     5aa:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5ae:	ec eb       	ldi	r30, 0xBC	; 188
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	90 81       	ld	r25, Z
     5b4:	99 23       	and	r25, r25
     5b6:	ec f7       	brge	.-6      	; 0x5b2 <write_byte+0xa>
     5b8:	ef ef       	ldi	r30, 0xFF	; 255
     5ba:	ff e8       	ldi	r31, 0x8F	; 143
     5bc:	31 97       	sbiw	r30, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <write_byte+0x14>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <write_byte+0x1a>
     5c2:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLA_W;                                     // load SLA_W into TWDR Register
     5c4:	96 ea       	ldi	r25, 0xA6	; 166
     5c6:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     5ca:	94 e8       	ldi	r25, 0x84	; 132
     5cc:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5d0:	ec eb       	ldi	r30, 0xBC	; 188
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	90 81       	ld	r25, Z
     5d6:	99 23       	and	r25, r25
     5d8:	ec f7       	brge	.-6      	; 0x5d4 <write_byte+0x2c>
     5da:	ef ef       	ldi	r30, 0xFF	; 255
     5dc:	ff e8       	ldi	r31, 0x8F	; 143
     5de:	31 97       	sbiw	r30, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <write_byte+0x36>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <write_byte+0x3c>
     5e4:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
     5e6:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
     5ea:	94 e8       	ldi	r25, 0x84	; 132
     5ec:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5f0:	ec eb       	ldi	r30, 0xBC	; 188
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	90 81       	ld	r25, Z
     5f6:	99 23       	and	r25, r25
     5f8:	ec f7       	brge	.-6      	; 0x5f4 <write_byte+0x4c>
     5fa:	ef ef       	ldi	r30, 0xFF	; 255
     5fc:	ff e8       	ldi	r31, 0x8F	; 143
     5fe:	31 97       	sbiw	r30, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <write_byte+0x56>
     602:	00 c0       	rjmp	.+0      	; 0x604 <write_byte+0x5c>
     604:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
     606:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
     60a:	84 e8       	ldi	r24, 0x84	; 132
     60c:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     610:	ec eb       	ldi	r30, 0xBC	; 188
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	88 23       	and	r24, r24
     618:	ec f7       	brge	.-6      	; 0x614 <write_byte+0x6c>
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	9f e8       	ldi	r25, 0x8F	; 143
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	f1 f7       	brne	.-4      	; 0x61e <write_byte+0x76>
     622:	00 c0       	rjmp	.+0      	; 0x624 <write_byte+0x7c>
     624:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
     626:	84 e9       	ldi	r24, 0x94	; 148
     628:	80 93 bc 00 	sts	0x00BC, r24
}
     62c:	08 95       	ret

0000062e <read_byte>:
unsigned char read_byte(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
     62e:	94 ea       	ldi	r25, 0xA4	; 164
     630:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     634:	ec eb       	ldi	r30, 0xBC	; 188
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	90 81       	ld	r25, Z
     63a:	99 23       	and	r25, r25
     63c:	ec f7       	brge	.-6      	; 0x638 <read_byte+0xa>

 

 TWDR = SLA_W;									   // load SLA_W into TWDR Register
     63e:	96 ea       	ldi	r25, 0xA6	; 166
     640:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     644:	94 e8       	ldi	r25, 0x84	; 132
     646:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     64a:	ec eb       	ldi	r30, 0xBC	; 188
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	90 81       	ld	r25, Z
     650:	99 23       	and	r25, r25
     652:	ec f7       	brge	.-6      	; 0x64e <read_byte+0x20>

 TWDR = address;                                   // send address of register byte want to access register
     654:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     658:	84 e8       	ldi	r24, 0x84	; 132
     65a:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     65e:	ec eb       	ldi	r30, 0xBC	; 188
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	88 23       	and	r24, r24
     666:	ec f7       	brge	.-6      	; 0x662 <read_byte+0x34>
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
     668:	84 ea       	ldi	r24, 0xA4	; 164
     66a:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     66e:	ec eb       	ldi	r30, 0xBC	; 188
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 81       	ld	r24, Z
     674:	88 23       	and	r24, r24
     676:	ec f7       	brge	.-6      	; 0x672 <read_byte+0x44>


 
 TWDR = SLA_R;									   // load SLA_R into TWDR Register
     678:	87 ea       	ldi	r24, 0xA7	; 167
     67a:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     67e:	84 e8       	ldi	r24, 0x84	; 132
     680:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     684:	ec eb       	ldi	r30, 0xBC	; 188
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	80 81       	ld	r24, Z
     68a:	88 23       	and	r24, r24
     68c:	ec f7       	brge	.-6      	; 0x688 <read_byte+0x5a>
 
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
     68e:	84 e8       	ldi	r24, 0x84	; 132
     690:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     694:	ec eb       	ldi	r30, 0xBC	; 188
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	80 81       	ld	r24, Z
     69a:	88 23       	and	r24, r24
     69c:	ec f7       	brge	.-6      	; 0x698 <read_byte+0x6a>
 rtc_recv_data = TWDR;
     69e:	eb eb       	ldi	r30, 0xBB	; 187
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 81       	ld	r24, Z
 
 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
     6a4:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
     6a6:	94 e8       	ldi	r25, 0x84	; 132
     6a8:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     6ac:	ec eb       	ldi	r30, 0xBC	; 188
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	90 81       	ld	r25, Z
     6b2:	99 23       	and	r25, r25
     6b4:	ec f7       	brge	.-6      	; 0x6b0 <read_byte+0x82>
  
 return(rtc_recv_data);                            // return the read value to called function
}
     6b6:	08 95       	ret

000006b8 <init_devices>:


// initialise the devices 
void init_devices()
{
 cli();              // disable all interrupts 
     6b8:	f8 94       	cli
 lcd_port_config();  // configure the LCD port 
     6ba:	0e 94 c0 02 	call	0x580	; 0x580 <lcd_port_config>
 lcd_set_4bit();
     6be:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_set_4bit>
 lcd_init();
     6c2:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_init>
 twi_init();         // configur the I2cC, i.e TWI module 
     6c6:	0e 94 c7 02 	call	0x58e	; 0x58e <twi_init>
 sei();              // re-enable interrupts
     6ca:	78 94       	sei
 //all peripherals are now initialized
}
     6cc:	08 95       	ret

000006ce <pr_int>:

void pr_int(int a,int b,int c,int d) /* get negative values*/
{
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	c8 2f       	mov	r28, r24
     6dc:	d6 2f       	mov	r29, r22
     6de:	8a 01       	movw	r16, r20
     6e0:	79 01       	movw	r14, r18
	if (c<0)
     6e2:	55 23       	and	r21, r21
     6e4:	a4 f4       	brge	.+40     	; 0x70e <pr_int+0x40>
	{
		lcd_cursor(a,b);
     6e6:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_cursor>
		lcd_string("-");
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	0e 94 00 02 	call	0x400	; 0x400 <lcd_string>
		lcd_print(a,b+1,abs(c),d);
     6f2:	6d 2f       	mov	r22, r29
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	a8 01       	movw	r20, r16
     6f8:	11 23       	and	r17, r17
     6fa:	24 f4       	brge	.+8      	; 0x704 <pr_int+0x36>
     6fc:	44 27       	eor	r20, r20
     6fe:	55 27       	eor	r21, r21
     700:	40 1b       	sub	r20, r16
     702:	51 0b       	sbc	r21, r17
     704:	8c 2f       	mov	r24, r28
     706:	97 01       	movw	r18, r14
     708:	0e 94 2f 02 	call	0x45e	; 0x45e <lcd_print>
     70c:	0d c0       	rjmp	.+26     	; 0x728 <pr_int+0x5a>
	} 
	else
	{
		lcd_cursor(a,b);
     70e:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_cursor>
		lcd_string("+");
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	0e 94 00 02 	call	0x400	; 0x400 <lcd_string>
		lcd_print(a,b+1,c,d);
     71a:	6d 2f       	mov	r22, r29
     71c:	6f 5f       	subi	r22, 0xFF	; 255
     71e:	8c 2f       	mov	r24, r28
     720:	a8 01       	movw	r20, r16
     722:	97 01       	movw	r18, r14
     724:	0e 94 2f 02 	call	0x45e	; 0x45e <lcd_print>
	}
}
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	08 95       	ret

00000736 <sign>:
		return (n-65536);
	}
	else
		return n;
		
}
     736:	08 95       	ret

00000738 <init_adxl>:
// Main Programme start here.
//-------------------------------------------------------------------------------
void init_adxl(void)
{   
 
 init_devices();
     738:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <init_devices>

	write_byte(0x0,0x2D);
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	6d e2       	ldi	r22, 0x2D	; 45
     740:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <write_byte>
	write_byte(0x8,0x2D);
     744:	88 e0       	ldi	r24, 0x08	; 8
     746:	6d e2       	ldi	r22, 0x2D	; 45
     748:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <write_byte>
}
     74c:	08 95       	ret

0000074e <acc_angle>:

int acc_angle(void)
{
     74e:	cf 92       	push	r12
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
		int x_acc,y_acc,z_acc;
		//long x,y,z;
		float angle;
 
	  
	   x_byte1 = read_byte(X1);
     75e:	82 e3       	ldi	r24, 0x32	; 50
     760:	0e 94 17 03 	call	0x62e	; 0x62e <read_byte>
	   //x_byte1=(x_byte1*1000)/256;
	   //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte(X2);
     764:	83 e3       	ldi	r24, 0x33	; 51
     766:	0e 94 17 03 	call	0x62e	; 0x62e <read_byte>
	   //lcd_print(2,1,abs(x_byte2),3);
	   
	   y_byte1 = read_byte(Y1);
     76a:	84 e3       	ldi	r24, 0x34	; 52
     76c:	0e 94 17 03 	call	0x62e	; 0x62e <read_byte>
     770:	08 2f       	mov	r16, r24
	   //lcd_print(1,6,y_byte1,3);
	   
	   y_byte2 = read_byte(Y2);
     772:	85 e3       	ldi	r24, 0x35	; 53
     774:	0e 94 17 03 	call	0x62e	; 0x62e <read_byte>
     778:	d8 2f       	mov	r29, r24
	   //lcd_print(2,6,y_byte2,3);
	   
	   z_byte1 = read_byte(Z1);
     77a:	86 e3       	ldi	r24, 0x36	; 54
     77c:	0e 94 17 03 	call	0x62e	; 0x62e <read_byte>
     780:	c8 2f       	mov	r28, r24
	   //lcd_print(1,10,z_byte1,3);
	   
	   z_byte2 = read_byte(Z2);
     782:	87 e3       	ldi	r24, 0x37	; 55
     784:	0e 94 17 03 	call	0x62e	; 0x62e <read_byte>
     788:	c8 2e       	mov	r12, r24
	  x_acc=sign(x_byte);
	  
	  //pr_int(1,1,x_byte,3); 
	  
	  y_byte=y_byte2;
	  y_byte = (y_byte << 8);
     78a:	3d 2f       	mov	r19, r29
     78c:	20 e0       	ldi	r18, 0x00	; 0
	  y_byte |= y_byte1;
     78e:	80 2f       	mov	r24, r16
     790:	90 e0       	ldi	r25, 0x00	; 0
	  y_acc=sign(y_byte);
     792:	82 2b       	or	r24, r18
     794:	93 2b       	or	r25, r19
     796:	0e 94 9b 03 	call	0x736	; 0x736 <sign>
     79a:	8c 01       	movw	r16, r24
	  
	  //pr_int(2,5,y_byte,3); 	
	  
	  z_byte=z_byte2;
	  z_byte = (z_byte << 8);
     79c:	3c 2d       	mov	r19, r12
     79e:	20 e0       	ldi	r18, 0x00	; 0
	  z_byte |= z_byte1;
     7a0:	8c 2f       	mov	r24, r28
     7a2:	90 e0       	ldi	r25, 0x00	; 0
	  z_acc=sign(z_byte);
     7a4:	82 2b       	or	r24, r18
     7a6:	93 2b       	or	r25, r19
     7a8:	0e 94 9b 03 	call	0x736	; 0x736 <sign>
     7ac:	ec 01       	movw	r28, r24
	  
	  
	  //pr_int(1,10,z_byte,3);  
	  
	  angle=(atan((y_acc*1.0)/(z_acc*1.0)));
     7ae:	b8 01       	movw	r22, r16
     7b0:	88 27       	eor	r24, r24
     7b2:	77 fd       	sbrc	r23, 7
     7b4:	80 95       	com	r24
     7b6:	98 2f       	mov	r25, r24
     7b8:	0e 94 48 0b 	call	0x1690	; 0x1690 <__floatsisf>
     7bc:	6b 01       	movw	r12, r22
     7be:	7c 01       	movw	r14, r24
     7c0:	be 01       	movw	r22, r28
     7c2:	88 27       	eor	r24, r24
     7c4:	77 fd       	sbrc	r23, 7
     7c6:	80 95       	com	r24
     7c8:	98 2f       	mov	r25, r24
     7ca:	0e 94 48 0b 	call	0x1690	; 0x1690 <__floatsisf>
     7ce:	9b 01       	movw	r18, r22
     7d0:	ac 01       	movw	r20, r24
     7d2:	c7 01       	movw	r24, r14
     7d4:	b6 01       	movw	r22, r12
     7d6:	0e 94 ad 0a 	call	0x155a	; 0x155a <__divsf3>
     7da:	0e 94 81 0a 	call	0x1502	; 0x1502 <atan>
	  angle *= 1800.0/3.14;
     7de:	26 ee       	ldi	r18, 0xE6	; 230
     7e0:	3f e4       	ldi	r19, 0x4F	; 79
     7e2:	4f e0       	ldi	r20, 0x0F	; 15
     7e4:	54 e4       	ldi	r21, 0x44	; 68
     7e6:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
	  //pr_int(1,1,angle,3);
	  
	return angle;
     7ea:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixsfsi>
}
     7ee:	86 2f       	mov	r24, r22
     7f0:	97 2f       	mov	r25, r23
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	08 95       	ret

00000804 <write_byte_gyro>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte_gyro(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
     804:	94 ea       	ldi	r25, 0xA4	; 164
     806:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     80a:	ec eb       	ldi	r30, 0xBC	; 188
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	90 81       	ld	r25, Z
     810:	99 23       	and	r25, r25
     812:	ec f7       	brge	.-6      	; 0x80e <write_byte_gyro+0xa>
     814:	ef ef       	ldi	r30, 0xFF	; 255
     816:	ff e8       	ldi	r31, 0x8F	; 143
     818:	31 97       	sbiw	r30, 0x01	; 1
     81a:	f1 f7       	brne	.-4      	; 0x818 <write_byte_gyro+0x14>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <write_byte_gyro+0x1a>
     81e:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLAVE_W;                                     // load SLA_W into TWDR Register
     820:	92 ed       	ldi	r25, 0xD2	; 210
     822:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     826:	94 e8       	ldi	r25, 0x84	; 132
     828:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     82c:	ec eb       	ldi	r30, 0xBC	; 188
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	90 81       	ld	r25, Z
     832:	99 23       	and	r25, r25
     834:	ec f7       	brge	.-6      	; 0x830 <write_byte_gyro+0x2c>
     836:	ef ef       	ldi	r30, 0xFF	; 255
     838:	ff e8       	ldi	r31, 0x8F	; 143
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f1 f7       	brne	.-4      	; 0x83a <write_byte_gyro+0x36>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <write_byte_gyro+0x3c>
     840:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
     842:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
     846:	94 e8       	ldi	r25, 0x84	; 132
     848:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     84c:	ec eb       	ldi	r30, 0xBC	; 188
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	90 81       	ld	r25, Z
     852:	99 23       	and	r25, r25
     854:	ec f7       	brge	.-6      	; 0x850 <write_byte_gyro+0x4c>
     856:	ef ef       	ldi	r30, 0xFF	; 255
     858:	ff e8       	ldi	r31, 0x8F	; 143
     85a:	31 97       	sbiw	r30, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <write_byte_gyro+0x56>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <write_byte_gyro+0x5c>
     860:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
     862:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
     866:	84 e8       	ldi	r24, 0x84	; 132
     868:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     86c:	ec eb       	ldi	r30, 0xBC	; 188
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	88 23       	and	r24, r24
     874:	ec f7       	brge	.-6      	; 0x870 <write_byte_gyro+0x6c>
     876:	8f ef       	ldi	r24, 0xFF	; 255
     878:	9f e8       	ldi	r25, 0x8F	; 143
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	f1 f7       	brne	.-4      	; 0x87a <write_byte_gyro+0x76>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <write_byte_gyro+0x7c>
     880:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
     882:	84 e9       	ldi	r24, 0x94	; 148
     884:	80 93 bc 00 	sts	0x00BC, r24
}
     888:	08 95       	ret

0000088a <read_byte_gyro>:
unsigned char read_byte_gyro(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
     88a:	94 ea       	ldi	r25, 0xA4	; 164
     88c:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     890:	ec eb       	ldi	r30, 0xBC	; 188
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	90 81       	ld	r25, Z
     896:	99 23       	and	r25, r25
     898:	ec f7       	brge	.-6      	; 0x894 <read_byte_gyro+0xa>
 //_delay_ms(10);

 

 TWDR = SLAVE_W;									   // load SLA_W into TWDR Register
     89a:	92 ed       	ldi	r25, 0xD2	; 210
     89c:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     8a0:	94 e8       	ldi	r25, 0x84	; 132
     8a2:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8a6:	ec eb       	ldi	r30, 0xBC	; 188
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	90 81       	ld	r25, Z
     8ac:	99 23       	and	r25, r25
     8ae:	ec f7       	brge	.-6      	; 0x8aa <read_byte_gyro+0x20>
 //_delay_ms(10); 

 TWDR = address;                                   // send address of register byte want to access register
     8b0:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     8b4:	84 e8       	ldi	r24, 0x84	; 132
     8b6:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8ba:	ec eb       	ldi	r30, 0xBC	; 188
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	88 23       	and	r24, r24
     8c2:	ec f7       	brge	.-6      	; 0x8be <read_byte_gyro+0x34>
// _delay_ms(10);
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
     8c4:	84 ea       	ldi	r24, 0xA4	; 164
     8c6:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8ca:	ec eb       	ldi	r30, 0xBC	; 188
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	88 23       	and	r24, r24
     8d2:	ec f7       	brge	.-6      	; 0x8ce <read_byte_gyro+0x44>
 //_delay_ms(10);


 
 TWDR = SLAVE_R;									   // load SLA_R into TWDR Register
     8d4:	83 ed       	ldi	r24, 0xD3	; 211
     8d6:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     8da:	84 e8       	ldi	r24, 0x84	; 132
     8dc:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8e0:	ec eb       	ldi	r30, 0xBC	; 188
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	88 23       	and	r24, r24
     8e8:	ec f7       	brge	.-6      	; 0x8e4 <read_byte_gyro+0x5a>
 //_delay_ms(10);
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
     8ea:	84 e8       	ldi	r24, 0x84	; 132
     8ec:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8f0:	ec eb       	ldi	r30, 0xBC	; 188
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	80 81       	ld	r24, Z
     8f6:	88 23       	and	r24, r24
     8f8:	ec f7       	brge	.-6      	; 0x8f4 <read_byte_gyro+0x6a>
 rtc_recv_data = TWDR;
     8fa:	eb eb       	ldi	r30, 0xBB	; 187
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 81       	ld	r24, Z
 //_delay_ms(10);
 

 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
     900:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
     902:	94 e8       	ldi	r25, 0x84	; 132
     904:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     908:	ec eb       	ldi	r30, 0xBC	; 188
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	90 81       	ld	r25, Z
     90e:	99 23       	and	r25, r25
     910:	ec f7       	brge	.-6      	; 0x90c <read_byte_gyro+0x82>
 //_delay_ms(10);
  
 return(rtc_recv_data);                            // return the read value to called function
}
     912:	08 95       	ret

00000914 <init_gyro>:

void init_gyro(void)
{   
 

	 write_byte_gyro(0x0F,0x20);       //Normal mode of control reg.1
     914:	8f e0       	ldi	r24, 0x0F	; 15
     916:	60 e2       	ldi	r22, 0x20	; 32
     918:	0e 94 02 04 	call	0x804	; 0x804 <write_byte_gyro>
}
     91c:	08 95       	ret

0000091e <comp_filter>:

//Complementary filter
float comp_filter(float newAngle,  float newRate) 
{   
     91e:	4f 92       	push	r4
     920:	5f 92       	push	r5
     922:	6f 92       	push	r6
     924:	7f 92       	push	r7
     926:	8f 92       	push	r8
     928:	9f 92       	push	r9
     92a:	af 92       	push	r10
     92c:	bf 92       	push	r11
     92e:	cf 92       	push	r12
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	00 d0       	rcall	.+0      	; 0x940 <comp_filter+0x22>
     940:	0f 92       	push	r0
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	29 83       	std	Y+1, r18	; 0x01
     948:	3a 83       	std	Y+2, r19	; 0x02
     94a:	4b 83       	std	Y+3, r20	; 0x03
     94c:	5c 83       	std	Y+4, r21	; 0x04
	float filterTerm2;
	float timeConstant;

	timeConstant=30; // default 1.0

	filterTerm0 = (newAngle - filterAngle) * timeConstant * timeConstant;
     94e:	80 90 1e 02 	lds	r8, 0x021E
     952:	90 90 1f 02 	lds	r9, 0x021F
     956:	a0 90 20 02 	lds	r10, 0x0220
     95a:	b0 90 21 02 	lds	r11, 0x0221
     95e:	a5 01       	movw	r20, r10
     960:	94 01       	movw	r18, r8
     962:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__subsf3>
     966:	c6 2e       	mov	r12, r22
     968:	d7 2e       	mov	r13, r23
     96a:	f8 2e       	mov	r15, r24
     96c:	e9 2e       	mov	r14, r25
	filterTerm2  += filterTerm0 * dt;
	filterTerm1 = filterTerm2 + ((newAngle - filterAngle) * 2 * timeConstant) + newRate;
     96e:	38 2f       	mov	r19, r24
     970:	86 2f       	mov	r24, r22
     972:	9d 2d       	mov	r25, r13
     974:	af 2d       	mov	r26, r15
     976:	be 2d       	mov	r27, r14
     978:	bc 01       	movw	r22, r24
     97a:	cd 01       	movw	r24, r26
     97c:	0c 2d       	mov	r16, r12
     97e:	1d 2d       	mov	r17, r13
     980:	23 2f       	mov	r18, r19
     982:	3b 2f       	mov	r19, r27
     984:	a9 01       	movw	r20, r18
     986:	98 01       	movw	r18, r16
     988:	0e 94 1d 0a 	call	0x143a	; 0x143a <__addsf3>
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 ef       	ldi	r20, 0xF0	; 240
     992:	51 e4       	ldi	r21, 0x41	; 65
     994:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
     998:	2b 01       	movw	r4, r22
     99a:	3c 01       	movw	r6, r24
	float filterTerm2;
	float timeConstant;

	timeConstant=30; // default 1.0

	filterTerm0 = (newAngle - filterAngle) * timeConstant * timeConstant;
     99c:	80 2f       	mov	r24, r16
     99e:	91 2f       	mov	r25, r17
     9a0:	af 2d       	mov	r26, r15
     9a2:	be 2d       	mov	r27, r14
     9a4:	bc 01       	movw	r22, r24
     9a6:	cd 01       	movw	r24, r26
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 ef       	ldi	r20, 0xF0	; 240
     9ae:	51 e4       	ldi	r21, 0x41	; 65
     9b0:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ef       	ldi	r20, 0xF0	; 240
     9ba:	51 e4       	ldi	r21, 0x41	; 65
     9bc:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
	filterTerm2  += filterTerm0 * dt;
     9c0:	2a e0       	ldi	r18, 0x0A	; 10
     9c2:	37 ed       	ldi	r19, 0xD7	; 215
     9c4:	43 e2       	ldi	r20, 0x23	; 35
     9c6:	5c e3       	ldi	r21, 0x3C	; 60
     9c8:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	a9 01       	movw	r20, r18
     9d2:	0e 94 1d 0a 	call	0x143a	; 0x143a <__addsf3>
     9d6:	9b 01       	movw	r18, r22
     9d8:	ac 01       	movw	r20, r24
	filterTerm1 = filterTerm2 + ((newAngle - filterAngle) * 2 * timeConstant) + newRate;
     9da:	c3 01       	movw	r24, r6
     9dc:	b2 01       	movw	r22, r4
     9de:	0e 94 1d 0a 	call	0x143a	; 0x143a <__addsf3>
     9e2:	29 81       	ldd	r18, Y+1	; 0x01
     9e4:	3a 81       	ldd	r19, Y+2	; 0x02
     9e6:	4b 81       	ldd	r20, Y+3	; 0x03
     9e8:	5c 81       	ldd	r21, Y+4	; 0x04
     9ea:	0e 94 1d 0a 	call	0x143a	; 0x143a <__addsf3>
	filterAngle = (filterTerm1 * dt) + filterAngle;
     9ee:	2a e0       	ldi	r18, 0x0A	; 10
     9f0:	37 ed       	ldi	r19, 0xD7	; 215
     9f2:	43 e2       	ldi	r20, 0x23	; 35
     9f4:	5c e3       	ldi	r21, 0x3C	; 60
     9f6:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
     9fa:	9b 01       	movw	r18, r22
     9fc:	ac 01       	movw	r20, r24
     9fe:	c5 01       	movw	r24, r10
     a00:	b4 01       	movw	r22, r8
     a02:	0e 94 1d 0a 	call	0x143a	; 0x143a <__addsf3>
     a06:	26 2f       	mov	r18, r22
     a08:	37 2f       	mov	r19, r23
     a0a:	f8 2f       	mov	r31, r24
     a0c:	e9 2f       	mov	r30, r25
     a0e:	46 2f       	mov	r20, r22
     a10:	57 2f       	mov	r21, r23
     a12:	68 2f       	mov	r22, r24
     a14:	79 2f       	mov	r23, r25
     a16:	40 93 1e 02 	sts	0x021E, r20
     a1a:	50 93 1f 02 	sts	0x021F, r21
     a1e:	60 93 20 02 	sts	0x0220, r22
     a22:	70 93 21 02 	sts	0x0221, r23

	return filterAngle; // This is actually the current angle, but is stored for the next iteration
}
     a26:	82 2f       	mov	r24, r18
     a28:	93 2f       	mov	r25, r19
     a2a:	af 2f       	mov	r26, r31
     a2c:	be 2f       	mov	r27, r30
     a2e:	bc 01       	movw	r22, r24
     a30:	cd 01       	movw	r24, r26
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	ef 90       	pop	r14
     a46:	df 90       	pop	r13
     a48:	cf 90       	pop	r12
     a4a:	bf 90       	pop	r11
     a4c:	af 90       	pop	r10
     a4e:	9f 90       	pop	r9
     a50:	8f 90       	pop	r8
     a52:	7f 90       	pop	r7
     a54:	6f 90       	pop	r6
     a56:	5f 90       	pop	r5
     a58:	4f 90       	pop	r4
     a5a:	08 95       	ret

00000a5c <gyro_Rate>:
//-------------------------------------
// Main Programme start here.
//-------------------------------------------------------------------------------
float gyro_Rate(void)
{   
     a5c:	cf 93       	push	r28
  int16_t x_ang=0;
  int filt_ang=0;
 
	   
	   
	  x_byte1 = read_byte_gyro(XL);
     a5e:	88 e2       	ldi	r24, 0x28	; 40
     a60:	0e 94 45 04 	call	0x88a	; 0x88a <read_byte_gyro>
     a64:	c8 2f       	mov	r28, r24
	  //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte_gyro(XH);
     a66:	89 e2       	ldi	r24, 0x29	; 41
     a68:	0e 94 45 04 	call	0x88a	; 0x88a <read_byte_gyro>
	   //lcd_print(2,1,x_byte2,3);
	   
	   x_byte = x_byte2;   // to print 10 bit integer value on LCD
	   x_byte = (x_byte << 8);
     a6c:	38 2f       	mov	r19, r24
     a6e:	20 e0       	ldi	r18, 0x00	; 0
	   x_byte |= x_byte1;
     a70:	8c 2f       	mov	r24, r28
     a72:	90 e0       	ldi	r25, 0x00	; 0
	   x_ang = sign(x_byte);
     a74:	82 2b       	or	r24, r18
     a76:	93 2b       	or	r25, r19
     a78:	0e 94 9b 03 	call	0x736	; 0x736 <sign>
	   x_ang /=100;
     a7c:	64 e6       	ldi	r22, 0x64	; 100
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__divmodhi4>
	   return x_ang;
     a84:	88 27       	eor	r24, r24
     a86:	77 fd       	sbrc	r23, 7
     a88:	80 95       	com	r24
     a8a:	98 2f       	mov	r25, r24
     a8c:	0e 94 48 0b 	call	0x1690	; 0x1690 <__floatsisf>
}
     a90:	46 2f       	mov	r20, r22
     a92:	57 2f       	mov	r21, r23
     a94:	68 2f       	mov	r22, r24
     a96:	79 2f       	mov	r23, r25
     a98:	cb 01       	movw	r24, r22
     a9a:	ba 01       	movw	r22, r20
     a9c:	cf 91       	pop	r28
     a9e:	08 95       	ret

00000aa0 <Compute>:
int para_flag=0;
double error =0;
double Setpoint=0;       //Balanced angle of the bot

void Compute()                          //Function for PID controller
{
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
	
	/*Compute all the working error variables*/
	error = Input - Setpoint;
     ab0:	60 91 3e 02 	lds	r22, 0x023E
     ab4:	70 91 3f 02 	lds	r23, 0x023F
     ab8:	80 91 40 02 	lds	r24, 0x0240
     abc:	90 91 41 02 	lds	r25, 0x0241
     ac0:	20 91 04 02 	lds	r18, 0x0204
     ac4:	30 91 05 02 	lds	r19, 0x0205
     ac8:	40 91 06 02 	lds	r20, 0x0206
     acc:	50 91 07 02 	lds	r21, 0x0207
     ad0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__subsf3>
     ad4:	d6 2f       	mov	r29, r22
     ad6:	c7 2f       	mov	r28, r23
     ad8:	18 2f       	mov	r17, r24
     ada:	09 2f       	mov	r16, r25
     adc:	86 2f       	mov	r24, r22
     ade:	9c 2f       	mov	r25, r28
     ae0:	a1 2f       	mov	r26, r17
     ae2:	b0 2f       	mov	r27, r16
     ae4:	80 93 08 02 	sts	0x0208, r24
     ae8:	90 93 09 02 	sts	0x0209, r25
     aec:	a0 93 0a 02 	sts	0x020A, r26
     af0:	b0 93 0b 02 	sts	0x020B, r27
	Iterm += ki*0.01*error;            //Taking the sum of all previous errors to implement integral part of PID
     af4:	60 91 37 02 	lds	r22, 0x0237
     af8:	70 91 38 02 	lds	r23, 0x0238
     afc:	80 91 39 02 	lds	r24, 0x0239
     b00:	90 91 3a 02 	lds	r25, 0x023A
     b04:	2a e0       	ldi	r18, 0x0A	; 10
     b06:	37 ed       	ldi	r19, 0xD7	; 215
     b08:	43 e2       	ldi	r20, 0x23	; 35
     b0a:	5c e3       	ldi	r21, 0x3C	; 60
     b0c:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
     b10:	9b 01       	movw	r18, r22
     b12:	ac 01       	movw	r20, r24
     b14:	8d 2f       	mov	r24, r29
     b16:	9c 2f       	mov	r25, r28
     b18:	a1 2f       	mov	r26, r17
     b1a:	b0 2f       	mov	r27, r16
     b1c:	bc 01       	movw	r22, r24
     b1e:	cd 01       	movw	r24, r26
     b20:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
     b24:	20 91 16 02 	lds	r18, 0x0216
     b28:	30 91 17 02 	lds	r19, 0x0217
     b2c:	40 91 18 02 	lds	r20, 0x0218
     b30:	50 91 19 02 	lds	r21, 0x0219
     b34:	0e 94 1d 0a 	call	0x143a	; 0x143a <__addsf3>
     b38:	06 2f       	mov	r16, r22
     b3a:	17 2f       	mov	r17, r23
     b3c:	d8 2f       	mov	r29, r24
     b3e:	c9 2f       	mov	r28, r25
     b40:	86 2f       	mov	r24, r22
     b42:	91 2f       	mov	r25, r17
     b44:	ad 2f       	mov	r26, r29
     b46:	bc 2f       	mov	r27, r28
     b48:	80 93 16 02 	sts	0x0216, r24
     b4c:	90 93 17 02 	sts	0x0217, r25
     b50:	a0 93 18 02 	sts	0x0218, r26
     b54:	b0 93 19 02 	sts	0x0219, r27
	if (Iterm >= 255)                 //Clamping te Integral part
     b58:	bc 01       	movw	r22, r24
     b5a:	cd 01       	movw	r24, r26
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	4f e7       	ldi	r20, 0x7F	; 127
     b62:	53 e4       	ldi	r21, 0x43	; 67
     b64:	0e 94 1d 0c 	call	0x183a	; 0x183a <__gesf2>
     b68:	88 23       	and	r24, r24
     b6a:	6c f0       	brlt	.+26     	; 0xb86 <Compute+0xe6>
	{
		Iterm = 255;
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	af e7       	ldi	r26, 0x7F	; 127
     b72:	b3 e4       	ldi	r27, 0x43	; 67
     b74:	80 93 16 02 	sts	0x0216, r24
     b78:	90 93 17 02 	sts	0x0217, r25
     b7c:	a0 93 18 02 	sts	0x0218, r26
     b80:	b0 93 19 02 	sts	0x0219, r27
     b84:	1a c0       	rjmp	.+52     	; 0xbba <Compute+0x11a>
	}
	else if (Iterm <= -255)
     b86:	80 2f       	mov	r24, r16
     b88:	91 2f       	mov	r25, r17
     b8a:	ad 2f       	mov	r26, r29
     b8c:	bc 2f       	mov	r27, r28
     b8e:	bc 01       	movw	r22, r24
     b90:	cd 01       	movw	r24, r26
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	4f e7       	ldi	r20, 0x7F	; 127
     b98:	53 ec       	ldi	r21, 0xC3	; 195
     b9a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__cmpsf2>
     b9e:	18 16       	cp	r1, r24
     ba0:	64 f0       	brlt	.+24     	; 0xbba <Compute+0x11a>
	{
		Iterm = -255;
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	af e7       	ldi	r26, 0x7F	; 127
     ba8:	b3 ec       	ldi	r27, 0xC3	; 195
     baa:	80 93 16 02 	sts	0x0216, r24
     bae:	90 93 17 02 	sts	0x0217, r25
     bb2:	a0 93 18 02 	sts	0x0218, r26
     bb6:	b0 93 19 02 	sts	0x0219, r27
	}
	
	if(millis(1)>=10)           //condition to take differences after regular interval of time.
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 34 01 	call	0x268	; 0x268 <millis>
     bc2:	8a 30       	cpi	r24, 0x0A	; 10
     bc4:	91 05       	cpc	r25, r1
     bc6:	4c f1       	brlt	.+82     	; 0xc1a <Compute+0x17a>
	{
		 dErr= (error - lastErr);   //Differential term of PID
     bc8:	c0 90 08 02 	lds	r12, 0x0208
     bcc:	d0 90 09 02 	lds	r13, 0x0209
     bd0:	e0 90 0a 02 	lds	r14, 0x020A
     bd4:	f0 90 0b 02 	lds	r15, 0x020B
     bd8:	c7 01       	movw	r24, r14
     bda:	b6 01       	movw	r22, r12
     bdc:	20 91 33 02 	lds	r18, 0x0233
     be0:	30 91 34 02 	lds	r19, 0x0234
     be4:	40 91 35 02 	lds	r20, 0x0235
     be8:	50 91 36 02 	lds	r21, 0x0236
     bec:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__subsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	80 93 12 02 	sts	0x0212, r24
     bf8:	90 93 13 02 	sts	0x0213, r25
     bfc:	a0 93 14 02 	sts	0x0214, r26
     c00:	b0 93 15 02 	sts	0x0215, r27
		lastErr=error;
     c04:	c0 92 33 02 	sts	0x0233, r12
     c08:	d0 92 34 02 	sts	0x0234, r13
     c0c:	e0 92 35 02 	sts	0x0235, r14
     c10:	f0 92 36 02 	sts	0x0236, r15
		start_timer4();
     c14:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <start_timer4>
     c18:	0b c0       	rjmp	.+22     	; 0xc30 <Compute+0x190>
	}
	else
	{
		dErr=0;
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	dc 01       	movw	r26, r24
     c20:	80 93 12 02 	sts	0x0212, r24
     c24:	90 93 13 02 	sts	0x0213, r25
     c28:	a0 93 14 02 	sts	0x0214, r26
     c2c:	b0 93 15 02 	sts	0x0215, r27
	}	
	
	Output = kp*error + Iterm + kd*0.1*dErr;                      //Compute PID Output
     c30:	60 91 46 02 	lds	r22, 0x0246
     c34:	70 91 47 02 	lds	r23, 0x0247
     c38:	80 91 48 02 	lds	r24, 0x0248
     c3c:	90 91 49 02 	lds	r25, 0x0249
     c40:	20 91 08 02 	lds	r18, 0x0208
     c44:	30 91 09 02 	lds	r19, 0x0209
     c48:	40 91 0a 02 	lds	r20, 0x020A
     c4c:	50 91 0b 02 	lds	r21, 0x020B
     c50:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
     c54:	20 91 16 02 	lds	r18, 0x0216
     c58:	30 91 17 02 	lds	r19, 0x0217
     c5c:	40 91 18 02 	lds	r20, 0x0218
     c60:	50 91 19 02 	lds	r21, 0x0219
     c64:	0e 94 1d 0a 	call	0x143a	; 0x143a <__addsf3>
     c68:	6b 01       	movw	r12, r22
     c6a:	7c 01       	movw	r14, r24
     c6c:	60 91 22 02 	lds	r22, 0x0222
     c70:	70 91 23 02 	lds	r23, 0x0223
     c74:	80 91 24 02 	lds	r24, 0x0224
     c78:	90 91 25 02 	lds	r25, 0x0225
     c7c:	2d ec       	ldi	r18, 0xCD	; 205
     c7e:	3c ec       	ldi	r19, 0xCC	; 204
     c80:	4c ec       	ldi	r20, 0xCC	; 204
     c82:	5d e3       	ldi	r21, 0x3D	; 61
     c84:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
     c88:	20 91 12 02 	lds	r18, 0x0212
     c8c:	30 91 13 02 	lds	r19, 0x0213
     c90:	40 91 14 02 	lds	r20, 0x0214
     c94:	50 91 15 02 	lds	r21, 0x0215
     c98:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
     c9c:	9b 01       	movw	r18, r22
     c9e:	ac 01       	movw	r20, r24
     ca0:	c7 01       	movw	r24, r14
     ca2:	b6 01       	movw	r22, r12
     ca4:	0e 94 1d 0a 	call	0x143a	; 0x143a <__addsf3>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	80 93 2d 02 	sts	0x022D, r24
     cb0:	90 93 2e 02 	sts	0x022E, r25
     cb4:	a0 93 2f 02 	sts	0x022F, r26
     cb8:	b0 93 30 02 	sts	0x0230, r27
}
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	df 90       	pop	r13
     cca:	cf 90       	pop	r12
     ccc:	08 95       	ret

00000cce <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00;                //disable while setting baud rate
     cce:	e1 ec       	ldi	r30, 0xC1	; 193
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	10 82       	st	Z, r1
	UCSR0A = 0x00;
     cd4:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
     cd8:	86 e0       	ldi	r24, 0x06	; 6
     cda:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 0x5F;                // 14745600 Hzset baud rate lo
     cde:	8f e5       	ldi	r24, 0x5F	; 95
     ce0:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00;                //set baud rate hi
     ce4:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
     ce8:	88 e9       	ldi	r24, 0x98	; 152
     cea:	80 83       	st	Z, r24
}
     cec:	08 95       	ret

00000cee <__vector_25>:

ISR(USART0_RX_vect)
{
     cee:	1f 92       	push	r1
     cf0:	0f 92       	push	r0
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	0f 92       	push	r0
     cf6:	0b b6       	in	r0, 0x3b	; 59
     cf8:	0f 92       	push	r0
     cfa:	11 24       	eor	r1, r1
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	2f 93       	push	r18
     d02:	3f 93       	push	r19
     d04:	4f 93       	push	r20
     d06:	5f 93       	push	r21
     d08:	6f 93       	push	r22
     d0a:	7f 93       	push	r23
     d0c:	8f 93       	push	r24
     d0e:	9f 93       	push	r25
     d10:	af 93       	push	r26
     d12:	bf 93       	push	r27
     d14:	ef 93       	push	r30
     d16:	ff 93       	push	r31
	data = UDR0;
     d18:	80 91 c6 00 	lds	r24, 0x00C6
     d1c:	80 93 3b 02 	sts	0x023B, r24
	if (data == 55)
     d20:	87 33       	cpi	r24, 0x37	; 55
     d22:	b9 f4       	brne	.+46     	; 0xd52 <__vector_25+0x64>
	{
		para = kp;
     d24:	80 91 46 02 	lds	r24, 0x0246
     d28:	90 91 47 02 	lds	r25, 0x0247
     d2c:	a0 91 48 02 	lds	r26, 0x0248
     d30:	b0 91 49 02 	lds	r27, 0x0249
     d34:	80 93 0e 02 	sts	0x020E, r24
     d38:	90 93 0f 02 	sts	0x020F, r25
     d3c:	a0 93 10 02 	sts	0x0210, r26
     d40:	b0 93 11 02 	sts	0x0211, r27
		para_flag=1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	90 93 0d 02 	sts	0x020D, r25
     d4c:	80 93 0c 02 	sts	0x020C, r24
     d50:	54 c0       	rjmp	.+168    	; 0xdfa <__vector_25+0x10c>
		
	}
	else if (data == 56)
     d52:	88 33       	cpi	r24, 0x38	; 56
     d54:	b9 f4       	brne	.+46     	; 0xd84 <__vector_25+0x96>
	{
		para = ki;
     d56:	80 91 37 02 	lds	r24, 0x0237
     d5a:	90 91 38 02 	lds	r25, 0x0238
     d5e:	a0 91 39 02 	lds	r26, 0x0239
     d62:	b0 91 3a 02 	lds	r27, 0x023A
     d66:	80 93 0e 02 	sts	0x020E, r24
     d6a:	90 93 0f 02 	sts	0x020F, r25
     d6e:	a0 93 10 02 	sts	0x0210, r26
     d72:	b0 93 11 02 	sts	0x0211, r27
		para_flag=2;
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	90 93 0d 02 	sts	0x020D, r25
     d7e:	80 93 0c 02 	sts	0x020C, r24
     d82:	3b c0       	rjmp	.+118    	; 0xdfa <__vector_25+0x10c>
	}
	else if (data == 57)
     d84:	89 33       	cpi	r24, 0x39	; 57
     d86:	b9 f4       	brne	.+46     	; 0xdb6 <__vector_25+0xc8>
	{
		para = kd;
     d88:	80 91 22 02 	lds	r24, 0x0222
     d8c:	90 91 23 02 	lds	r25, 0x0223
     d90:	a0 91 24 02 	lds	r26, 0x0224
     d94:	b0 91 25 02 	lds	r27, 0x0225
     d98:	80 93 0e 02 	sts	0x020E, r24
     d9c:	90 93 0f 02 	sts	0x020F, r25
     da0:	a0 93 10 02 	sts	0x0210, r26
     da4:	b0 93 11 02 	sts	0x0211, r27
		para_flag=3;
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	90 93 0d 02 	sts	0x020D, r25
     db0:	80 93 0c 02 	sts	0x020C, r24
     db4:	22 c0       	rjmp	.+68     	; 0xdfa <__vector_25+0x10c>
	}
	else if (data == 48)
     db6:	80 33       	cpi	r24, 0x30	; 48
     db8:	b9 f4       	brne	.+46     	; 0xde8 <__vector_25+0xfa>
	{
		para = Setpoint;
     dba:	80 91 04 02 	lds	r24, 0x0204
     dbe:	90 91 05 02 	lds	r25, 0x0205
     dc2:	a0 91 06 02 	lds	r26, 0x0206
     dc6:	b0 91 07 02 	lds	r27, 0x0207
     dca:	80 93 0e 02 	sts	0x020E, r24
     dce:	90 93 0f 02 	sts	0x020F, r25
     dd2:	a0 93 10 02 	sts	0x0210, r26
     dd6:	b0 93 11 02 	sts	0x0211, r27
		para_flag=4;
     dda:	84 e0       	ldi	r24, 0x04	; 4
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	90 93 0d 02 	sts	0x020D, r25
     de2:	80 93 0c 02 	sts	0x020C, r24
     de6:	09 c0       	rjmp	.+18     	; 0xdfa <__vector_25+0x10c>
	}
	else if (data == 97)
     de8:	81 36       	cpi	r24, 0x61	; 97
     dea:	19 f4       	brne	.+6      	; 0xdf2 <__vector_25+0x104>
	{
		pid_left();
     dec:	0e 94 b7 00 	call	0x16e	; 0x16e <pid_left>
     df0:	04 c0       	rjmp	.+8      	; 0xdfa <__vector_25+0x10c>
	}
	else if (data == 115)
     df2:	83 37       	cpi	r24, 0x73	; 115
     df4:	11 f4       	brne	.+4      	; 0xdfa <__vector_25+0x10c>
	{
		pid_right();
     df6:	0e 94 ac 00 	call	0x158	; 0x158 <pid_right>
	}
		
	
	
	if (data==49)
     dfa:	80 91 3b 02 	lds	r24, 0x023B
     dfe:	81 33       	cpi	r24, 0x31	; 49
     e00:	c9 f4       	brne	.+50     	; 0xe34 <__vector_25+0x146>
	{
		para++;
     e02:	60 91 0e 02 	lds	r22, 0x020E
     e06:	70 91 0f 02 	lds	r23, 0x020F
     e0a:	80 91 10 02 	lds	r24, 0x0210
     e0e:	90 91 11 02 	lds	r25, 0x0211
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e8       	ldi	r20, 0x80	; 128
     e18:	5f e3       	ldi	r21, 0x3F	; 63
     e1a:	0e 94 1d 0a 	call	0x143a	; 0x143a <__addsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	80 93 0e 02 	sts	0x020E, r24
     e26:	90 93 0f 02 	sts	0x020F, r25
     e2a:	a0 93 10 02 	sts	0x0210, r26
     e2e:	b0 93 11 02 	sts	0x0211, r27
     e32:	86 c0       	rjmp	.+268    	; 0xf40 <__vector_25+0x252>
	}
	else if (data==50)
     e34:	82 33       	cpi	r24, 0x32	; 50
     e36:	c9 f4       	brne	.+50     	; 0xe6a <__vector_25+0x17c>
	{
		para += 5;
     e38:	60 91 0e 02 	lds	r22, 0x020E
     e3c:	70 91 0f 02 	lds	r23, 0x020F
     e40:	80 91 10 02 	lds	r24, 0x0210
     e44:	90 91 11 02 	lds	r25, 0x0211
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	40 ea       	ldi	r20, 0xA0	; 160
     e4e:	50 e4       	ldi	r21, 0x40	; 64
     e50:	0e 94 1d 0a 	call	0x143a	; 0x143a <__addsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	80 93 0e 02 	sts	0x020E, r24
     e5c:	90 93 0f 02 	sts	0x020F, r25
     e60:	a0 93 10 02 	sts	0x0210, r26
     e64:	b0 93 11 02 	sts	0x0211, r27
     e68:	6b c0       	rjmp	.+214    	; 0xf40 <__vector_25+0x252>
	}
	else if (data==52)
     e6a:	84 33       	cpi	r24, 0x34	; 52
     e6c:	c9 f4       	brne	.+50     	; 0xea0 <__vector_25+0x1b2>
	{
		para--;
     e6e:	60 91 0e 02 	lds	r22, 0x020E
     e72:	70 91 0f 02 	lds	r23, 0x020F
     e76:	80 91 10 02 	lds	r24, 0x0210
     e7a:	90 91 11 02 	lds	r25, 0x0211
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e8       	ldi	r20, 0x80	; 128
     e84:	5f e3       	ldi	r21, 0x3F	; 63
     e86:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__subsf3>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	80 93 0e 02 	sts	0x020E, r24
     e92:	90 93 0f 02 	sts	0x020F, r25
     e96:	a0 93 10 02 	sts	0x0210, r26
     e9a:	b0 93 11 02 	sts	0x0211, r27
     e9e:	50 c0       	rjmp	.+160    	; 0xf40 <__vector_25+0x252>
	}
	else if (data==53)
     ea0:	85 33       	cpi	r24, 0x35	; 53
     ea2:	c9 f4       	brne	.+50     	; 0xed6 <__vector_25+0x1e8>
	{
		para -= 5;
     ea4:	60 91 0e 02 	lds	r22, 0x020E
     ea8:	70 91 0f 02 	lds	r23, 0x020F
     eac:	80 91 10 02 	lds	r24, 0x0210
     eb0:	90 91 11 02 	lds	r25, 0x0211
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 ea       	ldi	r20, 0xA0	; 160
     eba:	50 e4       	ldi	r21, 0x40	; 64
     ebc:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__subsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	80 93 0e 02 	sts	0x020E, r24
     ec8:	90 93 0f 02 	sts	0x020F, r25
     ecc:	a0 93 10 02 	sts	0x0210, r26
     ed0:	b0 93 11 02 	sts	0x0211, r27
     ed4:	35 c0       	rjmp	.+106    	; 0xf40 <__vector_25+0x252>
	}
	else if (data == 51)
     ed6:	83 33       	cpi	r24, 0x33	; 51
     ed8:	c9 f4       	brne	.+50     	; 0xf0c <__vector_25+0x21e>
	{
		para += 0.1;
     eda:	60 91 0e 02 	lds	r22, 0x020E
     ede:	70 91 0f 02 	lds	r23, 0x020F
     ee2:	80 91 10 02 	lds	r24, 0x0210
     ee6:	90 91 11 02 	lds	r25, 0x0211
     eea:	2d ec       	ldi	r18, 0xCD	; 205
     eec:	3c ec       	ldi	r19, 0xCC	; 204
     eee:	4c ec       	ldi	r20, 0xCC	; 204
     ef0:	5d e3       	ldi	r21, 0x3D	; 61
     ef2:	0e 94 1d 0a 	call	0x143a	; 0x143a <__addsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	80 93 0e 02 	sts	0x020E, r24
     efe:	90 93 0f 02 	sts	0x020F, r25
     f02:	a0 93 10 02 	sts	0x0210, r26
     f06:	b0 93 11 02 	sts	0x0211, r27
     f0a:	1a c0       	rjmp	.+52     	; 0xf40 <__vector_25+0x252>
	}
	else if (data == 54)
     f0c:	86 33       	cpi	r24, 0x36	; 54
     f0e:	c1 f4       	brne	.+48     	; 0xf40 <__vector_25+0x252>
	{
		para -=0.1;
     f10:	60 91 0e 02 	lds	r22, 0x020E
     f14:	70 91 0f 02 	lds	r23, 0x020F
     f18:	80 91 10 02 	lds	r24, 0x0210
     f1c:	90 91 11 02 	lds	r25, 0x0211
     f20:	2d ec       	ldi	r18, 0xCD	; 205
     f22:	3c ec       	ldi	r19, 0xCC	; 204
     f24:	4c ec       	ldi	r20, 0xCC	; 204
     f26:	5d e3       	ldi	r21, 0x3D	; 61
     f28:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__subsf3>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	80 93 0e 02 	sts	0x020E, r24
     f34:	90 93 0f 02 	sts	0x020F, r25
     f38:	a0 93 10 02 	sts	0x0210, r26
     f3c:	b0 93 11 02 	sts	0x0211, r27
	}
	
	
	if (para_flag == 1)
     f40:	80 91 0c 02 	lds	r24, 0x020C
     f44:	90 91 0d 02 	lds	r25, 0x020D
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	91 05       	cpc	r25, r1
     f4c:	11 f5       	brne	.+68     	; 0xf92 <__vector_25+0x2a4>
	{
		kp = para;
     f4e:	60 91 0e 02 	lds	r22, 0x020E
     f52:	70 91 0f 02 	lds	r23, 0x020F
     f56:	80 91 10 02 	lds	r24, 0x0210
     f5a:	90 91 11 02 	lds	r25, 0x0211
     f5e:	60 93 46 02 	sts	0x0246, r22
     f62:	70 93 47 02 	sts	0x0247, r23
     f66:	80 93 48 02 	sts	0x0248, r24
     f6a:	90 93 49 02 	sts	0x0249, r25
		lcd_print(1,1,kp*10,4);
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e2       	ldi	r20, 0x20	; 32
     f74:	51 e4       	ldi	r21, 0x41	; 65
     f76:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
     f7a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixunssfsi>
     f7e:	8b 01       	movw	r16, r22
     f80:	9c 01       	movw	r18, r24
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	a8 01       	movw	r20, r16
     f88:	24 e0       	ldi	r18, 0x04	; 4
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	0e 94 2f 02 	call	0x45e	; 0x45e <lcd_print>
     f90:	70 c0       	rjmp	.+224    	; 0x1072 <__vector_25+0x384>
	}
	else if (para_flag == 2)
     f92:	82 30       	cpi	r24, 0x02	; 2
     f94:	91 05       	cpc	r25, r1
     f96:	11 f5       	brne	.+68     	; 0xfdc <__vector_25+0x2ee>
	{
		ki = para;
     f98:	60 91 0e 02 	lds	r22, 0x020E
     f9c:	70 91 0f 02 	lds	r23, 0x020F
     fa0:	80 91 10 02 	lds	r24, 0x0210
     fa4:	90 91 11 02 	lds	r25, 0x0211
     fa8:	60 93 37 02 	sts	0x0237, r22
     fac:	70 93 38 02 	sts	0x0238, r23
     fb0:	80 93 39 02 	sts	0x0239, r24
     fb4:	90 93 3a 02 	sts	0x023A, r25
		lcd_print(1,6,ki*10,4);
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e2       	ldi	r20, 0x20	; 32
     fbe:	51 e4       	ldi	r21, 0x41	; 65
     fc0:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
     fc4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixunssfsi>
     fc8:	8b 01       	movw	r16, r22
     fca:	9c 01       	movw	r18, r24
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	66 e0       	ldi	r22, 0x06	; 6
     fd0:	a8 01       	movw	r20, r16
     fd2:	24 e0       	ldi	r18, 0x04	; 4
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	0e 94 2f 02 	call	0x45e	; 0x45e <lcd_print>
     fda:	4b c0       	rjmp	.+150    	; 0x1072 <__vector_25+0x384>
	}
	else if (para_flag == 3)
     fdc:	83 30       	cpi	r24, 0x03	; 3
     fde:	91 05       	cpc	r25, r1
     fe0:	11 f5       	brne	.+68     	; 0x1026 <__vector_25+0x338>
	{
		kd = para;
     fe2:	60 91 0e 02 	lds	r22, 0x020E
     fe6:	70 91 0f 02 	lds	r23, 0x020F
     fea:	80 91 10 02 	lds	r24, 0x0210
     fee:	90 91 11 02 	lds	r25, 0x0211
     ff2:	60 93 22 02 	sts	0x0222, r22
     ff6:	70 93 23 02 	sts	0x0223, r23
     ffa:	80 93 24 02 	sts	0x0224, r24
     ffe:	90 93 25 02 	sts	0x0225, r25
		lcd_print(1,11,kd*10,4);
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e2       	ldi	r20, 0x20	; 32
    1008:	51 e4       	ldi	r21, 0x41	; 65
    100a:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
    100e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixunssfsi>
    1012:	8b 01       	movw	r16, r22
    1014:	9c 01       	movw	r18, r24
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	6b e0       	ldi	r22, 0x0B	; 11
    101a:	a8 01       	movw	r20, r16
    101c:	24 e0       	ldi	r18, 0x04	; 4
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	0e 94 2f 02 	call	0x45e	; 0x45e <lcd_print>
    1024:	26 c0       	rjmp	.+76     	; 0x1072 <__vector_25+0x384>
	}
	else if (para_flag == 4)
    1026:	84 30       	cpi	r24, 0x04	; 4
    1028:	91 05       	cpc	r25, r1
    102a:	19 f5       	brne	.+70     	; 0x1072 <__vector_25+0x384>
	{
		Setpoint = para;
    102c:	60 91 0e 02 	lds	r22, 0x020E
    1030:	70 91 0f 02 	lds	r23, 0x020F
    1034:	80 91 10 02 	lds	r24, 0x0210
    1038:	90 91 11 02 	lds	r25, 0x0211
    103c:	60 93 04 02 	sts	0x0204, r22
    1040:	70 93 05 02 	sts	0x0205, r23
    1044:	80 93 06 02 	sts	0x0206, r24
    1048:	90 93 07 02 	sts	0x0207, r25
		pr_int(2,1,Setpoint*10,3);
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e2       	ldi	r20, 0x20	; 32
    1052:	51 e4       	ldi	r21, 0x41	; 65
    1054:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
    1058:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixsfsi>
    105c:	8b 01       	movw	r16, r22
    105e:	9c 01       	movw	r18, r24
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	61 e0       	ldi	r22, 0x01	; 1
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	a8 01       	movw	r20, r16
    106a:	23 e0       	ldi	r18, 0x03	; 3
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	0e 94 67 03 	call	0x6ce	; 0x6ce <pr_int>
	}
	
}
    1072:	ff 91       	pop	r31
    1074:	ef 91       	pop	r30
    1076:	bf 91       	pop	r27
    1078:	af 91       	pop	r26
    107a:	9f 91       	pop	r25
    107c:	8f 91       	pop	r24
    107e:	7f 91       	pop	r23
    1080:	6f 91       	pop	r22
    1082:	5f 91       	pop	r21
    1084:	4f 91       	pop	r20
    1086:	3f 91       	pop	r19
    1088:	2f 91       	pop	r18
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	0f 90       	pop	r0
    1090:	0b be       	out	0x3b, r0	; 59
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0f 90       	pop	r0
    1098:	1f 90       	pop	r1
    109a:	18 95       	reti

0000109c <motion_pin_config>:



void motion_pin_config (void)
{
	DDRL = DDRL | 0xE4;    //set direction of the PORTL2.5,6,7 pins as output
    109c:	aa e0       	ldi	r26, 0x0A	; 10
    109e:	b1 e0       	ldi	r27, 0x01	; 1
    10a0:	8c 91       	ld	r24, X
    10a2:	84 6e       	ori	r24, 0xE4	; 228
    10a4:	8c 93       	st	X, r24
	PORTL = PORTL & 0x18;  //set initial value of the PORTL2.5,6,7 pins to logic 0
    10a6:	eb e0       	ldi	r30, 0x0B	; 11
    10a8:	f1 e0       	ldi	r31, 0x01	; 1
    10aa:	80 81       	ld	r24, Z
    10ac:	88 71       	andi	r24, 0x18	; 24
    10ae:	80 83       	st	Z, r24
	DDRL = DDRL | 0x18;    //Setting PL3 and PL4 pins as output for PWM generation
    10b0:	8c 91       	ld	r24, X
    10b2:	88 61       	ori	r24, 0x18	; 24
    10b4:	8c 93       	st	X, r24
	PORTL = PORTL | 0x18;  //PL3 and PL4 pins are for velocity control using PWM
    10b6:	80 81       	ld	r24, Z
    10b8:	88 61       	ori	r24, 0x18	; 24
    10ba:	80 83       	st	Z, r24
}
    10bc:	08 95       	ret

000010be <port_init>:

//Function to initialize ports
void port_init()
{
	motion_pin_config();
    10be:	0e 94 4e 08 	call	0x109c	; 0x109c <motion_pin_config>
}
    10c2:	08 95       	ret

000010c4 <timer5_init>:
// TIMER5 initialize - prescale:1024
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// timer5 value: 56.250Hz
void timer5_init(void)
{
	TCCR5B = 0x00; //stop
    10c4:	e1 e2       	ldi	r30, 0x21	; 33
    10c6:	f1 e0       	ldi	r31, 0x01	; 1
    10c8:	10 82       	st	Z, r1
	TCNT5H = 0xFF; //setup
    10ca:	8f ef       	ldi	r24, 0xFF	; 255
    10cc:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;
    10d6:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;
    10da:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
    10de:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;
    10e2:	80 93 2a 01 	sts	0x012A, r24
	TCCR5A = 0xA1;
    10e6:	81 ea       	ldi	r24, 0xA1	; 161
    10e8:	80 93 20 01 	sts	0x0120, r24
	TCCR5C = 0x00;
    10ec:	10 92 22 01 	sts	0x0122, r1
	TCCR5B = 0x0D; //start Timer
    10f0:	8d e0       	ldi	r24, 0x0D	; 13
    10f2:	80 83       	st	Z, r24
}
    10f4:	08 95       	ret

000010f6 <set_PWM_value>:

// Function for robot velocity control
void set_PWM_value(unsigned char value) 	//set 8 bit PWM value
{
	OCR5AH = 0x00;
    10f6:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = value;  //motor A	
    10fa:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
    10fe:	10 92 2b 01 	sts	0x012B, r1
	if(value<=240)    //Modification to make velocity of two motors equal
    1102:	81 3f       	cpi	r24, 0xF1	; 241
    1104:	20 f4       	brcc	.+8      	; 0x110e <set_PWM_value+0x18>
	{
		OCR5BL = value+15;    //motor B
    1106:	81 5f       	subi	r24, 0xF1	; 241
    1108:	80 93 2a 01 	sts	0x012A, r24
    110c:	08 95       	ret
	}
	else
	{
		OCR5BL = 255;
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	80 93 2a 01 	sts	0x012A, r24
    1114:	08 95       	ret

00001116 <motion_set>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortLRestore = 0;

	PortLRestore = PORTL; 			// reading the PORTL's original status
    1116:	eb e0       	ldi	r30, 0x0B	; 11
    1118:	f1 e0       	ldi	r31, 0x01	; 1
    111a:	90 81       	ld	r25, Z
	PortLRestore &= 0x18; 			// setting lower direction nibbel to 0
    111c:	98 71       	andi	r25, 0x18	; 24
	PortLRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTL status
    111e:	89 2b       	or	r24, r25
	PORTL = PortLRestore; 			// setting the command to the port
    1120:	80 83       	st	Z, r24
}
    1122:	08 95       	ret

00001124 <forward>:

void forward (void) 		//both inputs forward
{
	motion_set(0xA0);
    1124:	80 ea       	ldi	r24, 0xA0	; 160
    1126:	0e 94 8b 08 	call	0x1116	; 0x1116 <motion_set>
}
    112a:	08 95       	ret

0000112c <back>:

void back (void) 			//both inputs backward
{
	motion_set(0x44);
    112c:	84 e4       	ldi	r24, 0x44	; 68
    112e:	0e 94 8b 08 	call	0x1116	; 0x1116 <motion_set>
}
    1132:	08 95       	ret

00001134 <left>:

void left (void) 			//input12 backward, input34 forward
{
	motion_set(0x84);
    1134:	84 e8       	ldi	r24, 0x84	; 132
    1136:	0e 94 8b 08 	call	0x1116	; 0x1116 <motion_set>
}
    113a:	08 95       	ret

0000113c <right>:



void right (void) 			//input34 backward, input12 forward
{
	motion_set(0x60);
    113c:	80 e6       	ldi	r24, 0x60	; 96
    113e:	0e 94 8b 08 	call	0x1116	; 0x1116 <motion_set>
}
    1142:	08 95       	ret

00001144 <soft_left>:

void soft_left (void) 		//input12 stationary, input34 forward
{
	motion_set(0x80);
    1144:	80 e8       	ldi	r24, 0x80	; 128
    1146:	0e 94 8b 08 	call	0x1116	; 0x1116 <motion_set>
}
    114a:	08 95       	ret

0000114c <soft_right>:

void soft_right (void)      //input12 forward, input34 stationary
{
	motion_set(0x20);
    114c:	80 e2       	ldi	r24, 0x20	; 32
    114e:	0e 94 8b 08 	call	0x1116	; 0x1116 <motion_set>
}
    1152:	08 95       	ret

00001154 <soft_left_2>:

void soft_left_2 (void)     //input12 backward, input34 stationary
{
	motion_set(0x40);
    1154:	80 e4       	ldi	r24, 0x40	; 64
    1156:	0e 94 8b 08 	call	0x1116	; 0x1116 <motion_set>
}
    115a:	08 95       	ret

0000115c <soft_right_2>:

void soft_right_2 (void)    //input12 stationary, input34 backward
{
	motion_set(0x04);
    115c:	84 e0       	ldi	r24, 0x04	; 4
    115e:	0e 94 8b 08 	call	0x1116	; 0x1116 <motion_set>
}
    1162:	08 95       	ret

00001164 <stop>:

void stop (void)            // both input stationary
{
	motion_set(0x00);
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	0e 94 8b 08 	call	0x1116	; 0x1116 <motion_set>
}
    116a:	08 95       	ret

0000116c <init_devices1>:

void init_devices1 (void)
{
	cli(); //Clears the global interrupts
    116c:	f8 94       	cli
	
	lcd_port_config();  // configure the LCD port
    116e:	0e 94 c0 02 	call	0x580	; 0x580 <lcd_port_config>
	lcd_set_4bit();
    1172:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_set_4bit>
	lcd_init();
    1176:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_init>
	port_init();
    117a:	0e 94 5f 08 	call	0x10be	; 0x10be <port_init>
	timer5_init();
    117e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <timer5_init>
	sei(); //Enables the global interrupts
    1182:	78 94       	sei
}
    1184:	08 95       	ret

00001186 <SetTunings>:

void SetTunings(double Kp, double Ki, double Kd)   //Function to set tuning parameters of PID
{
    1186:	8f 92       	push	r8
    1188:	9f 92       	push	r9
    118a:	af 92       	push	r10
    118c:	bf 92       	push	r11
    118e:	ef 92       	push	r14
    1190:	ff 92       	push	r15
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	4b 01       	movw	r8, r22
    1198:	5c 01       	movw	r10, r24
    119a:	da 01       	movw	r26, r20
    119c:	c9 01       	movw	r24, r18
	kp = Kp;
    119e:	80 92 46 02 	sts	0x0246, r8
    11a2:	90 92 47 02 	sts	0x0247, r9
    11a6:	a0 92 48 02 	sts	0x0248, r10
    11aa:	b0 92 49 02 	sts	0x0249, r11
	ki = Ki;
    11ae:	80 93 37 02 	sts	0x0237, r24
    11b2:	90 93 38 02 	sts	0x0238, r25
    11b6:	a0 93 39 02 	sts	0x0239, r26
    11ba:	b0 93 3a 02 	sts	0x023A, r27
	kd = Kd;
    11be:	e0 92 22 02 	sts	0x0222, r14
    11c2:	f0 92 23 02 	sts	0x0223, r15
    11c6:	00 93 24 02 	sts	0x0224, r16
    11ca:	10 93 25 02 	sts	0x0225, r17
}
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	bf 90       	pop	r11
    11d8:	af 90       	pop	r10
    11da:	9f 90       	pop	r9
    11dc:	8f 90       	pop	r8
    11de:	08 95       	ret

000011e0 <main>:
{
	double acc_Angle;
	int gyro_Angle;
	int filt_Angle;
	unsigned int pwm_value;
	init_adxl();               //Initialise accelerometer
    11e0:	0e 94 9c 03 	call	0x738	; 0x738 <init_adxl>
	init_gyro();               //Initialise gyroscope
    11e4:	0e 94 8a 04 	call	0x914	; 0x914 <init_gyro>
	init_devices1();
    11e8:	0e 94 b6 08 	call	0x116c	; 0x116c <init_devices1>
	uart0_init();              //Initailize UART1 for serial communiaction
    11ec:	0e 94 67 06 	call	0xcce	; 0xcce <uart0_init>
	start_timer4();            //Timer for timing calculations
    11f0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <start_timer4>
	
	SetTunings(8.1,8,5);
    11f4:	6a e9       	ldi	r22, 0x9A	; 154
    11f6:	79 e9       	ldi	r23, 0x99	; 153
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	91 e4       	ldi	r25, 0x41	; 65
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	51 e4       	ldi	r21, 0x41	; 65
    1204:	0f 2e       	mov	r0, r31
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	ef 2e       	mov	r14, r31
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	ff 2e       	mov	r15, r31
    120e:	f0 ea       	ldi	r31, 0xA0	; 160
    1210:	0f 2f       	mov	r16, r31
    1212:	f0 e4       	ldi	r31, 0x40	; 64
    1214:	1f 2f       	mov	r17, r31
    1216:	f0 2d       	mov	r31, r0
    1218:	0e 94 c3 08 	call	0x1186	; 0x1186 <SetTunings>
	lcd_print(1,1,kp*10,4);
    121c:	60 91 46 02 	lds	r22, 0x0246
    1220:	70 91 47 02 	lds	r23, 0x0247
    1224:	80 91 48 02 	lds	r24, 0x0248
    1228:	90 91 49 02 	lds	r25, 0x0249
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e2       	ldi	r20, 0x20	; 32
    1232:	51 e4       	ldi	r21, 0x41	; 65
    1234:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
    1238:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixunssfsi>
    123c:	8b 01       	movw	r16, r22
    123e:	9c 01       	movw	r18, r24
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	61 e0       	ldi	r22, 0x01	; 1
    1244:	a8 01       	movw	r20, r16
    1246:	24 e0       	ldi	r18, 0x04	; 4
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	0e 94 2f 02 	call	0x45e	; 0x45e <lcd_print>
	lcd_print(1,6,ki*10,4);
    124e:	60 91 37 02 	lds	r22, 0x0237
    1252:	70 91 38 02 	lds	r23, 0x0238
    1256:	80 91 39 02 	lds	r24, 0x0239
    125a:	90 91 3a 02 	lds	r25, 0x023A
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e2       	ldi	r20, 0x20	; 32
    1264:	51 e4       	ldi	r21, 0x41	; 65
    1266:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
    126a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixunssfsi>
    126e:	8b 01       	movw	r16, r22
    1270:	9c 01       	movw	r18, r24
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	66 e0       	ldi	r22, 0x06	; 6
    1276:	a8 01       	movw	r20, r16
    1278:	24 e0       	ldi	r18, 0x04	; 4
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	0e 94 2f 02 	call	0x45e	; 0x45e <lcd_print>
	lcd_print(1,11,kd*10,4);
    1280:	60 91 22 02 	lds	r22, 0x0222
    1284:	70 91 23 02 	lds	r23, 0x0223
    1288:	80 91 24 02 	lds	r24, 0x0224
    128c:	90 91 25 02 	lds	r25, 0x0225
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	51 e4       	ldi	r21, 0x41	; 65
    1298:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
    129c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixunssfsi>
    12a0:	8b 01       	movw	r16, r22
    12a2:	9c 01       	movw	r18, r24
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	6b e0       	ldi	r22, 0x0B	; 11
    12a8:	a8 01       	movw	r20, r16
    12aa:	24 e0       	ldi	r18, 0x04	; 4
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	0e 94 2f 02 	call	0x45e	; 0x45e <lcd_print>
		{
			pwm_value = (-Output)+THRESHOLD;
			if(pwm_value>=255)
			{
				
				pwm_value=255;
    12b2:	0f 2e       	mov	r0, r31
    12b4:	ff ef       	ldi	r31, 0xFF	; 255
    12b6:	4f 2e       	mov	r4, r31
    12b8:	55 24       	eor	r5, r5
    12ba:	f0 2d       	mov	r31, r0
		{
			stop();
		}
		
		//_delay_ms(20); 
		UDR0=0xFF;
    12bc:	06 ec       	ldi	r16, 0xC6	; 198
    12be:	10 e0       	ldi	r17, 0x00	; 0
    12c0:	77 24       	eor	r7, r7
    12c2:	7a 94       	dec	r7
	lcd_print(1,11,kd*10,4);
	
	while(1)
	{
		
		acc_Angle=0.1*acc_angle();        //Accelerometer angle
    12c4:	0e 94 a7 03 	call	0x74e	; 0x74e <acc_angle>
    12c8:	ec 01       	movw	r28, r24
		gyro_Angle=gyro_Rate();           //Anugular rate from Gyroscope
    12ca:	0e 94 2e 05 	call	0xa5c	; 0xa5c <gyro_Rate>
    12ce:	6b 01       	movw	r12, r22
    12d0:	7c 01       	movw	r14, r24
	lcd_print(1,11,kd*10,4);
	
	while(1)
	{
		
		acc_Angle=0.1*acc_angle();        //Accelerometer angle
    12d2:	be 01       	movw	r22, r28
    12d4:	88 27       	eor	r24, r24
    12d6:	77 fd       	sbrc	r23, 7
    12d8:	80 95       	com	r24
    12da:	98 2f       	mov	r25, r24
    12dc:	0e 94 48 0b 	call	0x1690	; 0x1690 <__floatsisf>
    12e0:	2d ec       	ldi	r18, 0xCD	; 205
    12e2:	3c ec       	ldi	r19, 0xCC	; 204
    12e4:	4c ec       	ldi	r20, 0xCC	; 204
    12e6:	5d e3       	ldi	r21, 0x3D	; 61
    12e8:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
    12ec:	4b 01       	movw	r8, r22
    12ee:	5c 01       	movw	r10, r24
		gyro_Angle=gyro_Rate();           //Anugular rate from Gyroscope
    12f0:	c7 01       	movw	r24, r14
    12f2:	b6 01       	movw	r22, r12
    12f4:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixsfsi>
		filt_Angle=comp_filter(acc_Angle,gyro_Angle);  //Filtered angle after passing through Complementary filter
    12f8:	88 27       	eor	r24, r24
    12fa:	77 fd       	sbrc	r23, 7
    12fc:	80 95       	com	r24
    12fe:	98 2f       	mov	r25, r24
    1300:	0e 94 48 0b 	call	0x1690	; 0x1690 <__floatsisf>
    1304:	9b 01       	movw	r18, r22
    1306:	ac 01       	movw	r20, r24
    1308:	c5 01       	movw	r24, r10
    130a:	b4 01       	movw	r22, r8
    130c:	0e 94 8f 04 	call	0x91e	; 0x91e <comp_filter>
    1310:	0e 94 15 0b 	call	0x162a	; 0x162a <__fixsfsi>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	ec 01       	movw	r28, r24
		Input=filt_Angle;                              //Input for error calculation of PID
    131a:	be 01       	movw	r22, r28
    131c:	88 27       	eor	r24, r24
    131e:	77 fd       	sbrc	r23, 7
    1320:	80 95       	com	r24
    1322:	98 2f       	mov	r25, r24
    1324:	0e 94 48 0b 	call	0x1690	; 0x1690 <__floatsisf>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	80 93 3e 02 	sts	0x023E, r24
    1330:	90 93 3f 02 	sts	0x023F, r25
    1334:	a0 93 40 02 	sts	0x0240, r26
    1338:	b0 93 41 02 	sts	0x0241, r27
		Compute();                                  //Calling PID 
    133c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Compute>
		if (Output>0)                               //Mapping PID output to velocity of motors
    1340:	c0 90 2d 02 	lds	r12, 0x022D
    1344:	d0 90 2e 02 	lds	r13, 0x022E
    1348:	e0 90 2f 02 	lds	r14, 0x022F
    134c:	f0 90 30 02 	lds	r15, 0x0230
    1350:	c7 01       	movw	r24, r14
    1352:	b6 01       	movw	r22, r12
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	a9 01       	movw	r20, r18
    135a:	0e 94 1d 0c 	call	0x183a	; 0x183a <__gesf2>
    135e:	18 16       	cp	r1, r24
    1360:	ac f4       	brge	.+42     	; 0x138c <main+0x1ac>
		{
			pwm_value = (Output+THRESHOLD);
    1362:	c7 01       	movw	r24, r14
    1364:	b6 01       	movw	r22, r12
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 ea       	ldi	r20, 0xA0	; 160
    136c:	51 e4       	ldi	r21, 0x41	; 65
    136e:	0e 94 1d 0a 	call	0x143a	; 0x143a <__addsf3>
    1372:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixunssfsi>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
			if(pwm_value>=255)
    137a:	8f 3f       	cpi	r24, 0xFF	; 255
    137c:	91 05       	cpc	r25, r1
    137e:	08 f0       	brcs	.+2      	; 0x1382 <main+0x1a2>
			{
				
				pwm_value=255;
    1380:	c2 01       	movw	r24, r4
			}
			set_PWM_value(pwm_value);
    1382:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <set_PWM_value>
			forward();
    1386:	0e 94 92 08 	call	0x1124	; 0x1124 <forward>
    138a:	2f c0       	rjmp	.+94     	; 0x13ea <main+0x20a>
		}
		else if(Output<0)
    138c:	c7 01       	movw	r24, r14
    138e:	b6 01       	movw	r22, r12
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	a9 01       	movw	r20, r18
    1396:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__cmpsf2>
    139a:	88 23       	and	r24, r24
    139c:	ac f4       	brge	.+42     	; 0x13c8 <main+0x1e8>
		{
			pwm_value = (-Output)+THRESHOLD;
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	80 ea       	ldi	r24, 0xA0	; 160
    13a4:	91 e4       	ldi	r25, 0x41	; 65
    13a6:	a7 01       	movw	r20, r14
    13a8:	96 01       	movw	r18, r12
    13aa:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__subsf3>
    13ae:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
			if(pwm_value>=255)
    13b6:	8f 3f       	cpi	r24, 0xFF	; 255
    13b8:	91 05       	cpc	r25, r1
    13ba:	08 f0       	brcs	.+2      	; 0x13be <main+0x1de>
			{
				
				pwm_value=255;
    13bc:	c2 01       	movw	r24, r4
			}
			set_PWM_value(pwm_value);
    13be:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <set_PWM_value>
			back();
    13c2:	0e 94 96 08 	call	0x112c	; 0x112c <back>
    13c6:	11 c0       	rjmp	.+34     	; 0x13ea <main+0x20a>
		}
		else if(Input==0)
    13c8:	60 91 3e 02 	lds	r22, 0x023E
    13cc:	70 91 3f 02 	lds	r23, 0x023F
    13d0:	80 91 40 02 	lds	r24, 0x0240
    13d4:	90 91 41 02 	lds	r25, 0x0241
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	a9 01       	movw	r20, r18
    13de:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__cmpsf2>
    13e2:	88 23       	and	r24, r24
    13e4:	11 f4       	brne	.+4      	; 0x13ea <main+0x20a>
		{
			stop();
    13e6:	0e 94 b2 08 	call	0x1164	; 0x1164 <stop>
		}
		
		//_delay_ms(20); 
		UDR0=0xFF;
    13ea:	f8 01       	movw	r30, r16
    13ec:	70 82       	st	Z, r7
    13ee:	86 e6       	ldi	r24, 0x66	; 102
    13f0:	9e e0       	ldi	r25, 0x0E	; 14
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <main+0x212>
    13f6:	00 00       	nop
		_delay_ms(1);
		UDR0=(uint8_t)(filt_Angle+100);
    13f8:	cc 59       	subi	r28, 0x9C	; 156
    13fa:	c0 83       	st	Z, r28
    13fc:	86 e6       	ldi	r24, 0x66	; 102
    13fe:	9e e0       	ldi	r25, 0x0E	; 14
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <main+0x220>
    1404:	00 00       	nop
		_delay_ms(1);
		uint8_t op=(Output/2)+127;
    1406:	60 91 2d 02 	lds	r22, 0x022D
    140a:	70 91 2e 02 	lds	r23, 0x022E
    140e:	80 91 2f 02 	lds	r24, 0x022F
    1412:	90 91 30 02 	lds	r25, 0x0230
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	5f e3       	ldi	r21, 0x3F	; 63
    141e:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3>
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	4e ef       	ldi	r20, 0xFE	; 254
    1428:	52 e4       	ldi	r21, 0x42	; 66
    142a:	0e 94 1d 0a 	call	0x143a	; 0x143a <__addsf3>
    142e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixunssfsi>
		UDR0=op;
    1432:	f8 01       	movw	r30, r16
    1434:	60 83       	st	Z, r22
	}
    1436:	46 cf       	rjmp	.-372    	; 0x12c4 <main+0xe4>

00001438 <__subsf3>:
    1438:	50 58       	subi	r21, 0x80	; 128

0000143a <__addsf3>:
    143a:	bb 27       	eor	r27, r27
    143c:	aa 27       	eor	r26, r26
    143e:	0e d0       	rcall	.+28     	; 0x145c <__addsf3x>
    1440:	c2 c1       	rjmp	.+900    	; 0x17c6 <__fp_round>
    1442:	b3 d1       	rcall	.+870    	; 0x17aa <__fp_pscA>
    1444:	30 f0       	brcs	.+12     	; 0x1452 <__addsf3+0x18>
    1446:	b8 d1       	rcall	.+880    	; 0x17b8 <__fp_pscB>
    1448:	20 f0       	brcs	.+8      	; 0x1452 <__addsf3+0x18>
    144a:	31 f4       	brne	.+12     	; 0x1458 <__addsf3+0x1e>
    144c:	9f 3f       	cpi	r25, 0xFF	; 255
    144e:	11 f4       	brne	.+4      	; 0x1454 <__addsf3+0x1a>
    1450:	1e f4       	brtc	.+6      	; 0x1458 <__addsf3+0x1e>
    1452:	83 c1       	rjmp	.+774    	; 0x175a <__fp_nan>
    1454:	0e f4       	brtc	.+2      	; 0x1458 <__addsf3+0x1e>
    1456:	e0 95       	com	r30
    1458:	e7 fb       	bst	r30, 7
    145a:	79 c1       	rjmp	.+754    	; 0x174e <__fp_inf>

0000145c <__addsf3x>:
    145c:	e9 2f       	mov	r30, r25
    145e:	c4 d1       	rcall	.+904    	; 0x17e8 <__fp_split3>
    1460:	80 f3       	brcs	.-32     	; 0x1442 <__addsf3+0x8>
    1462:	ba 17       	cp	r27, r26
    1464:	62 07       	cpc	r22, r18
    1466:	73 07       	cpc	r23, r19
    1468:	84 07       	cpc	r24, r20
    146a:	95 07       	cpc	r25, r21
    146c:	18 f0       	brcs	.+6      	; 0x1474 <__addsf3x+0x18>
    146e:	71 f4       	brne	.+28     	; 0x148c <__addsf3x+0x30>
    1470:	9e f5       	brtc	.+102    	; 0x14d8 <__addsf3x+0x7c>
    1472:	dc c1       	rjmp	.+952    	; 0x182c <__fp_zero>
    1474:	0e f4       	brtc	.+2      	; 0x1478 <__addsf3x+0x1c>
    1476:	e0 95       	com	r30
    1478:	0b 2e       	mov	r0, r27
    147a:	ba 2f       	mov	r27, r26
    147c:	a0 2d       	mov	r26, r0
    147e:	0b 01       	movw	r0, r22
    1480:	b9 01       	movw	r22, r18
    1482:	90 01       	movw	r18, r0
    1484:	0c 01       	movw	r0, r24
    1486:	ca 01       	movw	r24, r20
    1488:	a0 01       	movw	r20, r0
    148a:	11 24       	eor	r1, r1
    148c:	ff 27       	eor	r31, r31
    148e:	59 1b       	sub	r21, r25
    1490:	99 f0       	breq	.+38     	; 0x14b8 <__addsf3x+0x5c>
    1492:	59 3f       	cpi	r21, 0xF9	; 249
    1494:	50 f4       	brcc	.+20     	; 0x14aa <__addsf3x+0x4e>
    1496:	50 3e       	cpi	r21, 0xE0	; 224
    1498:	68 f1       	brcs	.+90     	; 0x14f4 <__addsf3x+0x98>
    149a:	1a 16       	cp	r1, r26
    149c:	f0 40       	sbci	r31, 0x00	; 0
    149e:	a2 2f       	mov	r26, r18
    14a0:	23 2f       	mov	r18, r19
    14a2:	34 2f       	mov	r19, r20
    14a4:	44 27       	eor	r20, r20
    14a6:	58 5f       	subi	r21, 0xF8	; 248
    14a8:	f3 cf       	rjmp	.-26     	; 0x1490 <__addsf3x+0x34>
    14aa:	46 95       	lsr	r20
    14ac:	37 95       	ror	r19
    14ae:	27 95       	ror	r18
    14b0:	a7 95       	ror	r26
    14b2:	f0 40       	sbci	r31, 0x00	; 0
    14b4:	53 95       	inc	r21
    14b6:	c9 f7       	brne	.-14     	; 0x14aa <__addsf3x+0x4e>
    14b8:	7e f4       	brtc	.+30     	; 0x14d8 <__addsf3x+0x7c>
    14ba:	1f 16       	cp	r1, r31
    14bc:	ba 0b       	sbc	r27, r26
    14be:	62 0b       	sbc	r22, r18
    14c0:	73 0b       	sbc	r23, r19
    14c2:	84 0b       	sbc	r24, r20
    14c4:	ba f0       	brmi	.+46     	; 0x14f4 <__addsf3x+0x98>
    14c6:	91 50       	subi	r25, 0x01	; 1
    14c8:	a1 f0       	breq	.+40     	; 0x14f2 <__addsf3x+0x96>
    14ca:	ff 0f       	add	r31, r31
    14cc:	bb 1f       	adc	r27, r27
    14ce:	66 1f       	adc	r22, r22
    14d0:	77 1f       	adc	r23, r23
    14d2:	88 1f       	adc	r24, r24
    14d4:	c2 f7       	brpl	.-16     	; 0x14c6 <__addsf3x+0x6a>
    14d6:	0e c0       	rjmp	.+28     	; 0x14f4 <__addsf3x+0x98>
    14d8:	ba 0f       	add	r27, r26
    14da:	62 1f       	adc	r22, r18
    14dc:	73 1f       	adc	r23, r19
    14de:	84 1f       	adc	r24, r20
    14e0:	48 f4       	brcc	.+18     	; 0x14f4 <__addsf3x+0x98>
    14e2:	87 95       	ror	r24
    14e4:	77 95       	ror	r23
    14e6:	67 95       	ror	r22
    14e8:	b7 95       	ror	r27
    14ea:	f7 95       	ror	r31
    14ec:	9e 3f       	cpi	r25, 0xFE	; 254
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <__addsf3x+0x96>
    14f0:	b3 cf       	rjmp	.-154    	; 0x1458 <__addsf3+0x1e>
    14f2:	93 95       	inc	r25
    14f4:	88 0f       	add	r24, r24
    14f6:	08 f0       	brcs	.+2      	; 0x14fa <__addsf3x+0x9e>
    14f8:	99 27       	eor	r25, r25
    14fa:	ee 0f       	add	r30, r30
    14fc:	97 95       	ror	r25
    14fe:	87 95       	ror	r24
    1500:	08 95       	ret

00001502 <atan>:
    1502:	df 93       	push	r29
    1504:	dd 27       	eor	r29, r29
    1506:	b9 2f       	mov	r27, r25
    1508:	bf 77       	andi	r27, 0x7F	; 127
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	16 16       	cp	r1, r22
    1510:	17 06       	cpc	r1, r23
    1512:	48 07       	cpc	r20, r24
    1514:	5b 07       	cpc	r21, r27
    1516:	10 f4       	brcc	.+4      	; 0x151c <atan+0x1a>
    1518:	d9 2f       	mov	r29, r25
    151a:	93 d1       	rcall	.+806    	; 0x1842 <inverse>
    151c:	9f 93       	push	r25
    151e:	8f 93       	push	r24
    1520:	7f 93       	push	r23
    1522:	6f 93       	push	r22
    1524:	f8 d1       	rcall	.+1008   	; 0x1916 <square>
    1526:	e4 ee       	ldi	r30, 0xE4	; 228
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	1a d1       	rcall	.+564    	; 0x1760 <__fp_powser>
    152c:	4c d1       	rcall	.+664    	; 0x17c6 <__fp_round>
    152e:	2f 91       	pop	r18
    1530:	3f 91       	pop	r19
    1532:	4f 91       	pop	r20
    1534:	5f 91       	pop	r21
    1536:	98 d1       	rcall	.+816    	; 0x1868 <__mulsf3x>
    1538:	dd 23       	and	r29, r29
    153a:	49 f0       	breq	.+18     	; 0x154e <atan+0x4c>
    153c:	90 58       	subi	r25, 0x80	; 128
    153e:	a2 ea       	ldi	r26, 0xA2	; 162
    1540:	2a ed       	ldi	r18, 0xDA	; 218
    1542:	3f e0       	ldi	r19, 0x0F	; 15
    1544:	49 ec       	ldi	r20, 0xC9	; 201
    1546:	5f e3       	ldi	r21, 0x3F	; 63
    1548:	d0 78       	andi	r29, 0x80	; 128
    154a:	5d 27       	eor	r21, r29
    154c:	87 df       	rcall	.-242    	; 0x145c <__addsf3x>
    154e:	df 91       	pop	r29
    1550:	3a c1       	rjmp	.+628    	; 0x17c6 <__fp_round>

00001552 <__cmpsf2>:
    1552:	d9 d0       	rcall	.+434    	; 0x1706 <__fp_cmp>
    1554:	08 f4       	brcc	.+2      	; 0x1558 <__cmpsf2+0x6>
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	08 95       	ret

0000155a <__divsf3>:
    155a:	0c d0       	rcall	.+24     	; 0x1574 <__divsf3x>
    155c:	34 c1       	rjmp	.+616    	; 0x17c6 <__fp_round>
    155e:	2c d1       	rcall	.+600    	; 0x17b8 <__fp_pscB>
    1560:	40 f0       	brcs	.+16     	; 0x1572 <__divsf3+0x18>
    1562:	23 d1       	rcall	.+582    	; 0x17aa <__fp_pscA>
    1564:	30 f0       	brcs	.+12     	; 0x1572 <__divsf3+0x18>
    1566:	21 f4       	brne	.+8      	; 0x1570 <__divsf3+0x16>
    1568:	5f 3f       	cpi	r21, 0xFF	; 255
    156a:	19 f0       	breq	.+6      	; 0x1572 <__divsf3+0x18>
    156c:	f0 c0       	rjmp	.+480    	; 0x174e <__fp_inf>
    156e:	51 11       	cpse	r21, r1
    1570:	5e c1       	rjmp	.+700    	; 0x182e <__fp_szero>
    1572:	f3 c0       	rjmp	.+486    	; 0x175a <__fp_nan>

00001574 <__divsf3x>:
    1574:	39 d1       	rcall	.+626    	; 0x17e8 <__fp_split3>
    1576:	98 f3       	brcs	.-26     	; 0x155e <__divsf3+0x4>

00001578 <__divsf3_pse>:
    1578:	99 23       	and	r25, r25
    157a:	c9 f3       	breq	.-14     	; 0x156e <__divsf3+0x14>
    157c:	55 23       	and	r21, r21
    157e:	b1 f3       	breq	.-20     	; 0x156c <__divsf3+0x12>
    1580:	95 1b       	sub	r25, r21
    1582:	55 0b       	sbc	r21, r21
    1584:	bb 27       	eor	r27, r27
    1586:	aa 27       	eor	r26, r26
    1588:	62 17       	cp	r22, r18
    158a:	73 07       	cpc	r23, r19
    158c:	84 07       	cpc	r24, r20
    158e:	38 f0       	brcs	.+14     	; 0x159e <__divsf3_pse+0x26>
    1590:	9f 5f       	subi	r25, 0xFF	; 255
    1592:	5f 4f       	sbci	r21, 0xFF	; 255
    1594:	22 0f       	add	r18, r18
    1596:	33 1f       	adc	r19, r19
    1598:	44 1f       	adc	r20, r20
    159a:	aa 1f       	adc	r26, r26
    159c:	a9 f3       	breq	.-22     	; 0x1588 <__divsf3_pse+0x10>
    159e:	33 d0       	rcall	.+102    	; 0x1606 <__divsf3_pse+0x8e>
    15a0:	0e 2e       	mov	r0, r30
    15a2:	3a f0       	brmi	.+14     	; 0x15b2 <__divsf3_pse+0x3a>
    15a4:	e0 e8       	ldi	r30, 0x80	; 128
    15a6:	30 d0       	rcall	.+96     	; 0x1608 <__divsf3_pse+0x90>
    15a8:	91 50       	subi	r25, 0x01	; 1
    15aa:	50 40       	sbci	r21, 0x00	; 0
    15ac:	e6 95       	lsr	r30
    15ae:	00 1c       	adc	r0, r0
    15b0:	ca f7       	brpl	.-14     	; 0x15a4 <__divsf3_pse+0x2c>
    15b2:	29 d0       	rcall	.+82     	; 0x1606 <__divsf3_pse+0x8e>
    15b4:	fe 2f       	mov	r31, r30
    15b6:	27 d0       	rcall	.+78     	; 0x1606 <__divsf3_pse+0x8e>
    15b8:	66 0f       	add	r22, r22
    15ba:	77 1f       	adc	r23, r23
    15bc:	88 1f       	adc	r24, r24
    15be:	bb 1f       	adc	r27, r27
    15c0:	26 17       	cp	r18, r22
    15c2:	37 07       	cpc	r19, r23
    15c4:	48 07       	cpc	r20, r24
    15c6:	ab 07       	cpc	r26, r27
    15c8:	b0 e8       	ldi	r27, 0x80	; 128
    15ca:	09 f0       	breq	.+2      	; 0x15ce <__divsf3_pse+0x56>
    15cc:	bb 0b       	sbc	r27, r27
    15ce:	80 2d       	mov	r24, r0
    15d0:	bf 01       	movw	r22, r30
    15d2:	ff 27       	eor	r31, r31
    15d4:	93 58       	subi	r25, 0x83	; 131
    15d6:	5f 4f       	sbci	r21, 0xFF	; 255
    15d8:	2a f0       	brmi	.+10     	; 0x15e4 <__divsf3_pse+0x6c>
    15da:	9e 3f       	cpi	r25, 0xFE	; 254
    15dc:	51 05       	cpc	r21, r1
    15de:	68 f0       	brcs	.+26     	; 0x15fa <__divsf3_pse+0x82>
    15e0:	b6 c0       	rjmp	.+364    	; 0x174e <__fp_inf>
    15e2:	25 c1       	rjmp	.+586    	; 0x182e <__fp_szero>
    15e4:	5f 3f       	cpi	r21, 0xFF	; 255
    15e6:	ec f3       	brlt	.-6      	; 0x15e2 <__divsf3_pse+0x6a>
    15e8:	98 3e       	cpi	r25, 0xE8	; 232
    15ea:	dc f3       	brlt	.-10     	; 0x15e2 <__divsf3_pse+0x6a>
    15ec:	86 95       	lsr	r24
    15ee:	77 95       	ror	r23
    15f0:	67 95       	ror	r22
    15f2:	b7 95       	ror	r27
    15f4:	f7 95       	ror	r31
    15f6:	9f 5f       	subi	r25, 0xFF	; 255
    15f8:	c9 f7       	brne	.-14     	; 0x15ec <__divsf3_pse+0x74>
    15fa:	88 0f       	add	r24, r24
    15fc:	91 1d       	adc	r25, r1
    15fe:	96 95       	lsr	r25
    1600:	87 95       	ror	r24
    1602:	97 f9       	bld	r25, 7
    1604:	08 95       	ret
    1606:	e1 e0       	ldi	r30, 0x01	; 1
    1608:	66 0f       	add	r22, r22
    160a:	77 1f       	adc	r23, r23
    160c:	88 1f       	adc	r24, r24
    160e:	bb 1f       	adc	r27, r27
    1610:	62 17       	cp	r22, r18
    1612:	73 07       	cpc	r23, r19
    1614:	84 07       	cpc	r24, r20
    1616:	ba 07       	cpc	r27, r26
    1618:	20 f0       	brcs	.+8      	; 0x1622 <__divsf3_pse+0xaa>
    161a:	62 1b       	sub	r22, r18
    161c:	73 0b       	sbc	r23, r19
    161e:	84 0b       	sbc	r24, r20
    1620:	ba 0b       	sbc	r27, r26
    1622:	ee 1f       	adc	r30, r30
    1624:	88 f7       	brcc	.-30     	; 0x1608 <__divsf3_pse+0x90>
    1626:	e0 95       	com	r30
    1628:	08 95       	ret

0000162a <__fixsfsi>:
    162a:	04 d0       	rcall	.+8      	; 0x1634 <__fixunssfsi>
    162c:	68 94       	set
    162e:	b1 11       	cpse	r27, r1
    1630:	fe c0       	rjmp	.+508    	; 0x182e <__fp_szero>
    1632:	08 95       	ret

00001634 <__fixunssfsi>:
    1634:	e1 d0       	rcall	.+450    	; 0x17f8 <__fp_splitA>
    1636:	88 f0       	brcs	.+34     	; 0x165a <__fixunssfsi+0x26>
    1638:	9f 57       	subi	r25, 0x7F	; 127
    163a:	90 f0       	brcs	.+36     	; 0x1660 <__fixunssfsi+0x2c>
    163c:	b9 2f       	mov	r27, r25
    163e:	99 27       	eor	r25, r25
    1640:	b7 51       	subi	r27, 0x17	; 23
    1642:	a0 f0       	brcs	.+40     	; 0x166c <__fixunssfsi+0x38>
    1644:	d1 f0       	breq	.+52     	; 0x167a <__fixunssfsi+0x46>
    1646:	66 0f       	add	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	88 1f       	adc	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	1a f0       	brmi	.+6      	; 0x1656 <__fixunssfsi+0x22>
    1650:	ba 95       	dec	r27
    1652:	c9 f7       	brne	.-14     	; 0x1646 <__fixunssfsi+0x12>
    1654:	12 c0       	rjmp	.+36     	; 0x167a <__fixunssfsi+0x46>
    1656:	b1 30       	cpi	r27, 0x01	; 1
    1658:	81 f0       	breq	.+32     	; 0x167a <__fixunssfsi+0x46>
    165a:	e8 d0       	rcall	.+464    	; 0x182c <__fp_zero>
    165c:	b1 e0       	ldi	r27, 0x01	; 1
    165e:	08 95       	ret
    1660:	e5 c0       	rjmp	.+458    	; 0x182c <__fp_zero>
    1662:	67 2f       	mov	r22, r23
    1664:	78 2f       	mov	r23, r24
    1666:	88 27       	eor	r24, r24
    1668:	b8 5f       	subi	r27, 0xF8	; 248
    166a:	39 f0       	breq	.+14     	; 0x167a <__fixunssfsi+0x46>
    166c:	b9 3f       	cpi	r27, 0xF9	; 249
    166e:	cc f3       	brlt	.-14     	; 0x1662 <__fixunssfsi+0x2e>
    1670:	86 95       	lsr	r24
    1672:	77 95       	ror	r23
    1674:	67 95       	ror	r22
    1676:	b3 95       	inc	r27
    1678:	d9 f7       	brne	.-10     	; 0x1670 <__fixunssfsi+0x3c>
    167a:	3e f4       	brtc	.+14     	; 0x168a <__fixunssfsi+0x56>
    167c:	90 95       	com	r25
    167e:	80 95       	com	r24
    1680:	70 95       	com	r23
    1682:	61 95       	neg	r22
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	8f 4f       	sbci	r24, 0xFF	; 255
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	08 95       	ret

0000168c <__floatunsisf>:
    168c:	e8 94       	clt
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <__floatsisf+0x12>

00001690 <__floatsisf>:
    1690:	97 fb       	bst	r25, 7
    1692:	3e f4       	brtc	.+14     	; 0x16a2 <__floatsisf+0x12>
    1694:	90 95       	com	r25
    1696:	80 95       	com	r24
    1698:	70 95       	com	r23
    169a:	61 95       	neg	r22
    169c:	7f 4f       	sbci	r23, 0xFF	; 255
    169e:	8f 4f       	sbci	r24, 0xFF	; 255
    16a0:	9f 4f       	sbci	r25, 0xFF	; 255
    16a2:	99 23       	and	r25, r25
    16a4:	a9 f0       	breq	.+42     	; 0x16d0 <__floatsisf+0x40>
    16a6:	f9 2f       	mov	r31, r25
    16a8:	96 e9       	ldi	r25, 0x96	; 150
    16aa:	bb 27       	eor	r27, r27
    16ac:	93 95       	inc	r25
    16ae:	f6 95       	lsr	r31
    16b0:	87 95       	ror	r24
    16b2:	77 95       	ror	r23
    16b4:	67 95       	ror	r22
    16b6:	b7 95       	ror	r27
    16b8:	f1 11       	cpse	r31, r1
    16ba:	f8 cf       	rjmp	.-16     	; 0x16ac <__floatsisf+0x1c>
    16bc:	fa f4       	brpl	.+62     	; 0x16fc <__floatsisf+0x6c>
    16be:	bb 0f       	add	r27, r27
    16c0:	11 f4       	brne	.+4      	; 0x16c6 <__floatsisf+0x36>
    16c2:	60 ff       	sbrs	r22, 0
    16c4:	1b c0       	rjmp	.+54     	; 0x16fc <__floatsisf+0x6c>
    16c6:	6f 5f       	subi	r22, 0xFF	; 255
    16c8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ca:	8f 4f       	sbci	r24, 0xFF	; 255
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	16 c0       	rjmp	.+44     	; 0x16fc <__floatsisf+0x6c>
    16d0:	88 23       	and	r24, r24
    16d2:	11 f0       	breq	.+4      	; 0x16d8 <__floatsisf+0x48>
    16d4:	96 e9       	ldi	r25, 0x96	; 150
    16d6:	11 c0       	rjmp	.+34     	; 0x16fa <__floatsisf+0x6a>
    16d8:	77 23       	and	r23, r23
    16da:	21 f0       	breq	.+8      	; 0x16e4 <__floatsisf+0x54>
    16dc:	9e e8       	ldi	r25, 0x8E	; 142
    16de:	87 2f       	mov	r24, r23
    16e0:	76 2f       	mov	r23, r22
    16e2:	05 c0       	rjmp	.+10     	; 0x16ee <__floatsisf+0x5e>
    16e4:	66 23       	and	r22, r22
    16e6:	71 f0       	breq	.+28     	; 0x1704 <__floatsisf+0x74>
    16e8:	96 e8       	ldi	r25, 0x86	; 134
    16ea:	86 2f       	mov	r24, r22
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	2a f0       	brmi	.+10     	; 0x16fc <__floatsisf+0x6c>
    16f2:	9a 95       	dec	r25
    16f4:	66 0f       	add	r22, r22
    16f6:	77 1f       	adc	r23, r23
    16f8:	88 1f       	adc	r24, r24
    16fa:	da f7       	brpl	.-10     	; 0x16f2 <__floatsisf+0x62>
    16fc:	88 0f       	add	r24, r24
    16fe:	96 95       	lsr	r25
    1700:	87 95       	ror	r24
    1702:	97 f9       	bld	r25, 7
    1704:	08 95       	ret

00001706 <__fp_cmp>:
    1706:	99 0f       	add	r25, r25
    1708:	00 08       	sbc	r0, r0
    170a:	55 0f       	add	r21, r21
    170c:	aa 0b       	sbc	r26, r26
    170e:	e0 e8       	ldi	r30, 0x80	; 128
    1710:	fe ef       	ldi	r31, 0xFE	; 254
    1712:	16 16       	cp	r1, r22
    1714:	17 06       	cpc	r1, r23
    1716:	e8 07       	cpc	r30, r24
    1718:	f9 07       	cpc	r31, r25
    171a:	c0 f0       	brcs	.+48     	; 0x174c <__fp_cmp+0x46>
    171c:	12 16       	cp	r1, r18
    171e:	13 06       	cpc	r1, r19
    1720:	e4 07       	cpc	r30, r20
    1722:	f5 07       	cpc	r31, r21
    1724:	98 f0       	brcs	.+38     	; 0x174c <__fp_cmp+0x46>
    1726:	62 1b       	sub	r22, r18
    1728:	73 0b       	sbc	r23, r19
    172a:	84 0b       	sbc	r24, r20
    172c:	95 0b       	sbc	r25, r21
    172e:	39 f4       	brne	.+14     	; 0x173e <__fp_cmp+0x38>
    1730:	0a 26       	eor	r0, r26
    1732:	61 f0       	breq	.+24     	; 0x174c <__fp_cmp+0x46>
    1734:	23 2b       	or	r18, r19
    1736:	24 2b       	or	r18, r20
    1738:	25 2b       	or	r18, r21
    173a:	21 f4       	brne	.+8      	; 0x1744 <__fp_cmp+0x3e>
    173c:	08 95       	ret
    173e:	0a 26       	eor	r0, r26
    1740:	09 f4       	brne	.+2      	; 0x1744 <__fp_cmp+0x3e>
    1742:	a1 40       	sbci	r26, 0x01	; 1
    1744:	a6 95       	lsr	r26
    1746:	8f ef       	ldi	r24, 0xFF	; 255
    1748:	81 1d       	adc	r24, r1
    174a:	81 1d       	adc	r24, r1
    174c:	08 95       	ret

0000174e <__fp_inf>:
    174e:	97 f9       	bld	r25, 7
    1750:	9f 67       	ori	r25, 0x7F	; 127
    1752:	80 e8       	ldi	r24, 0x80	; 128
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	08 95       	ret

0000175a <__fp_nan>:
    175a:	9f ef       	ldi	r25, 0xFF	; 255
    175c:	80 ec       	ldi	r24, 0xC0	; 192
    175e:	08 95       	ret

00001760 <__fp_powser>:
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	1f 93       	push	r17
    1766:	0f 93       	push	r16
    1768:	ff 92       	push	r15
    176a:	ef 92       	push	r14
    176c:	df 92       	push	r13
    176e:	7b 01       	movw	r14, r22
    1770:	8c 01       	movw	r16, r24
    1772:	68 94       	set
    1774:	05 c0       	rjmp	.+10     	; 0x1780 <__fp_powser+0x20>
    1776:	da 2e       	mov	r13, r26
    1778:	ef 01       	movw	r28, r30
    177a:	76 d0       	rcall	.+236    	; 0x1868 <__mulsf3x>
    177c:	fe 01       	movw	r30, r28
    177e:	e8 94       	clt
    1780:	a5 91       	lpm	r26, Z+
    1782:	25 91       	lpm	r18, Z+
    1784:	35 91       	lpm	r19, Z+
    1786:	45 91       	lpm	r20, Z+
    1788:	55 91       	lpm	r21, Z+
    178a:	ae f3       	brts	.-22     	; 0x1776 <__fp_powser+0x16>
    178c:	ef 01       	movw	r28, r30
    178e:	66 de       	rcall	.-820    	; 0x145c <__addsf3x>
    1790:	fe 01       	movw	r30, r28
    1792:	97 01       	movw	r18, r14
    1794:	a8 01       	movw	r20, r16
    1796:	da 94       	dec	r13
    1798:	79 f7       	brne	.-34     	; 0x1778 <__fp_powser+0x18>
    179a:	df 90       	pop	r13
    179c:	ef 90       	pop	r14
    179e:	ff 90       	pop	r15
    17a0:	0f 91       	pop	r16
    17a2:	1f 91       	pop	r17
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <__fp_pscA>:
    17aa:	00 24       	eor	r0, r0
    17ac:	0a 94       	dec	r0
    17ae:	16 16       	cp	r1, r22
    17b0:	17 06       	cpc	r1, r23
    17b2:	18 06       	cpc	r1, r24
    17b4:	09 06       	cpc	r0, r25
    17b6:	08 95       	ret

000017b8 <__fp_pscB>:
    17b8:	00 24       	eor	r0, r0
    17ba:	0a 94       	dec	r0
    17bc:	12 16       	cp	r1, r18
    17be:	13 06       	cpc	r1, r19
    17c0:	14 06       	cpc	r1, r20
    17c2:	05 06       	cpc	r0, r21
    17c4:	08 95       	ret

000017c6 <__fp_round>:
    17c6:	09 2e       	mov	r0, r25
    17c8:	03 94       	inc	r0
    17ca:	00 0c       	add	r0, r0
    17cc:	11 f4       	brne	.+4      	; 0x17d2 <__fp_round+0xc>
    17ce:	88 23       	and	r24, r24
    17d0:	52 f0       	brmi	.+20     	; 0x17e6 <__fp_round+0x20>
    17d2:	bb 0f       	add	r27, r27
    17d4:	40 f4       	brcc	.+16     	; 0x17e6 <__fp_round+0x20>
    17d6:	bf 2b       	or	r27, r31
    17d8:	11 f4       	brne	.+4      	; 0x17de <__fp_round+0x18>
    17da:	60 ff       	sbrs	r22, 0
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <__fp_round+0x20>
    17de:	6f 5f       	subi	r22, 0xFF	; 255
    17e0:	7f 4f       	sbci	r23, 0xFF	; 255
    17e2:	8f 4f       	sbci	r24, 0xFF	; 255
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
    17e6:	08 95       	ret

000017e8 <__fp_split3>:
    17e8:	57 fd       	sbrc	r21, 7
    17ea:	90 58       	subi	r25, 0x80	; 128
    17ec:	44 0f       	add	r20, r20
    17ee:	55 1f       	adc	r21, r21
    17f0:	59 f0       	breq	.+22     	; 0x1808 <__fp_splitA+0x10>
    17f2:	5f 3f       	cpi	r21, 0xFF	; 255
    17f4:	71 f0       	breq	.+28     	; 0x1812 <__fp_splitA+0x1a>
    17f6:	47 95       	ror	r20

000017f8 <__fp_splitA>:
    17f8:	88 0f       	add	r24, r24
    17fa:	97 fb       	bst	r25, 7
    17fc:	99 1f       	adc	r25, r25
    17fe:	61 f0       	breq	.+24     	; 0x1818 <__fp_splitA+0x20>
    1800:	9f 3f       	cpi	r25, 0xFF	; 255
    1802:	79 f0       	breq	.+30     	; 0x1822 <__fp_splitA+0x2a>
    1804:	87 95       	ror	r24
    1806:	08 95       	ret
    1808:	12 16       	cp	r1, r18
    180a:	13 06       	cpc	r1, r19
    180c:	14 06       	cpc	r1, r20
    180e:	55 1f       	adc	r21, r21
    1810:	f2 cf       	rjmp	.-28     	; 0x17f6 <__fp_split3+0xe>
    1812:	46 95       	lsr	r20
    1814:	f1 df       	rcall	.-30     	; 0x17f8 <__fp_splitA>
    1816:	08 c0       	rjmp	.+16     	; 0x1828 <__fp_splitA+0x30>
    1818:	16 16       	cp	r1, r22
    181a:	17 06       	cpc	r1, r23
    181c:	18 06       	cpc	r1, r24
    181e:	99 1f       	adc	r25, r25
    1820:	f1 cf       	rjmp	.-30     	; 0x1804 <__fp_splitA+0xc>
    1822:	86 95       	lsr	r24
    1824:	71 05       	cpc	r23, r1
    1826:	61 05       	cpc	r22, r1
    1828:	08 94       	sec
    182a:	08 95       	ret

0000182c <__fp_zero>:
    182c:	e8 94       	clt

0000182e <__fp_szero>:
    182e:	bb 27       	eor	r27, r27
    1830:	66 27       	eor	r22, r22
    1832:	77 27       	eor	r23, r23
    1834:	cb 01       	movw	r24, r22
    1836:	97 f9       	bld	r25, 7
    1838:	08 95       	ret

0000183a <__gesf2>:
    183a:	65 df       	rcall	.-310    	; 0x1706 <__fp_cmp>
    183c:	08 f4       	brcc	.+2      	; 0x1840 <__gesf2+0x6>
    183e:	8f ef       	ldi	r24, 0xFF	; 255
    1840:	08 95       	ret

00001842 <inverse>:
    1842:	9b 01       	movw	r18, r22
    1844:	ac 01       	movw	r20, r24
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	80 e8       	ldi	r24, 0x80	; 128
    184c:	9f e3       	ldi	r25, 0x3F	; 63
    184e:	85 ce       	rjmp	.-758    	; 0x155a <__divsf3>

00001850 <__mulsf3>:
    1850:	0b d0       	rcall	.+22     	; 0x1868 <__mulsf3x>
    1852:	b9 cf       	rjmp	.-142    	; 0x17c6 <__fp_round>
    1854:	aa df       	rcall	.-172    	; 0x17aa <__fp_pscA>
    1856:	28 f0       	brcs	.+10     	; 0x1862 <__mulsf3+0x12>
    1858:	af df       	rcall	.-162    	; 0x17b8 <__fp_pscB>
    185a:	18 f0       	brcs	.+6      	; 0x1862 <__mulsf3+0x12>
    185c:	95 23       	and	r25, r21
    185e:	09 f0       	breq	.+2      	; 0x1862 <__mulsf3+0x12>
    1860:	76 cf       	rjmp	.-276    	; 0x174e <__fp_inf>
    1862:	7b cf       	rjmp	.-266    	; 0x175a <__fp_nan>
    1864:	11 24       	eor	r1, r1
    1866:	e3 cf       	rjmp	.-58     	; 0x182e <__fp_szero>

00001868 <__mulsf3x>:
    1868:	bf df       	rcall	.-130    	; 0x17e8 <__fp_split3>
    186a:	a0 f3       	brcs	.-24     	; 0x1854 <__mulsf3+0x4>

0000186c <__mulsf3_pse>:
    186c:	95 9f       	mul	r25, r21
    186e:	d1 f3       	breq	.-12     	; 0x1864 <__mulsf3+0x14>
    1870:	95 0f       	add	r25, r21
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	55 1f       	adc	r21, r21
    1876:	62 9f       	mul	r22, r18
    1878:	f0 01       	movw	r30, r0
    187a:	72 9f       	mul	r23, r18
    187c:	bb 27       	eor	r27, r27
    187e:	f0 0d       	add	r31, r0
    1880:	b1 1d       	adc	r27, r1
    1882:	63 9f       	mul	r22, r19
    1884:	aa 27       	eor	r26, r26
    1886:	f0 0d       	add	r31, r0
    1888:	b1 1d       	adc	r27, r1
    188a:	aa 1f       	adc	r26, r26
    188c:	64 9f       	mul	r22, r20
    188e:	66 27       	eor	r22, r22
    1890:	b0 0d       	add	r27, r0
    1892:	a1 1d       	adc	r26, r1
    1894:	66 1f       	adc	r22, r22
    1896:	82 9f       	mul	r24, r18
    1898:	22 27       	eor	r18, r18
    189a:	b0 0d       	add	r27, r0
    189c:	a1 1d       	adc	r26, r1
    189e:	62 1f       	adc	r22, r18
    18a0:	73 9f       	mul	r23, r19
    18a2:	b0 0d       	add	r27, r0
    18a4:	a1 1d       	adc	r26, r1
    18a6:	62 1f       	adc	r22, r18
    18a8:	83 9f       	mul	r24, r19
    18aa:	a0 0d       	add	r26, r0
    18ac:	61 1d       	adc	r22, r1
    18ae:	22 1f       	adc	r18, r18
    18b0:	74 9f       	mul	r23, r20
    18b2:	33 27       	eor	r19, r19
    18b4:	a0 0d       	add	r26, r0
    18b6:	61 1d       	adc	r22, r1
    18b8:	23 1f       	adc	r18, r19
    18ba:	84 9f       	mul	r24, r20
    18bc:	60 0d       	add	r22, r0
    18be:	21 1d       	adc	r18, r1
    18c0:	82 2f       	mov	r24, r18
    18c2:	76 2f       	mov	r23, r22
    18c4:	6a 2f       	mov	r22, r26
    18c6:	11 24       	eor	r1, r1
    18c8:	9f 57       	subi	r25, 0x7F	; 127
    18ca:	50 40       	sbci	r21, 0x00	; 0
    18cc:	8a f0       	brmi	.+34     	; 0x18f0 <__mulsf3_pse+0x84>
    18ce:	e1 f0       	breq	.+56     	; 0x1908 <__mulsf3_pse+0x9c>
    18d0:	88 23       	and	r24, r24
    18d2:	4a f0       	brmi	.+18     	; 0x18e6 <__mulsf3_pse+0x7a>
    18d4:	ee 0f       	add	r30, r30
    18d6:	ff 1f       	adc	r31, r31
    18d8:	bb 1f       	adc	r27, r27
    18da:	66 1f       	adc	r22, r22
    18dc:	77 1f       	adc	r23, r23
    18de:	88 1f       	adc	r24, r24
    18e0:	91 50       	subi	r25, 0x01	; 1
    18e2:	50 40       	sbci	r21, 0x00	; 0
    18e4:	a9 f7       	brne	.-22     	; 0x18d0 <__mulsf3_pse+0x64>
    18e6:	9e 3f       	cpi	r25, 0xFE	; 254
    18e8:	51 05       	cpc	r21, r1
    18ea:	70 f0       	brcs	.+28     	; 0x1908 <__mulsf3_pse+0x9c>
    18ec:	30 cf       	rjmp	.-416    	; 0x174e <__fp_inf>
    18ee:	9f cf       	rjmp	.-194    	; 0x182e <__fp_szero>
    18f0:	5f 3f       	cpi	r21, 0xFF	; 255
    18f2:	ec f3       	brlt	.-6      	; 0x18ee <__mulsf3_pse+0x82>
    18f4:	98 3e       	cpi	r25, 0xE8	; 232
    18f6:	dc f3       	brlt	.-10     	; 0x18ee <__mulsf3_pse+0x82>
    18f8:	86 95       	lsr	r24
    18fa:	77 95       	ror	r23
    18fc:	67 95       	ror	r22
    18fe:	b7 95       	ror	r27
    1900:	f7 95       	ror	r31
    1902:	e7 95       	ror	r30
    1904:	9f 5f       	subi	r25, 0xFF	; 255
    1906:	c1 f7       	brne	.-16     	; 0x18f8 <__mulsf3_pse+0x8c>
    1908:	fe 2b       	or	r31, r30
    190a:	88 0f       	add	r24, r24
    190c:	91 1d       	adc	r25, r1
    190e:	96 95       	lsr	r25
    1910:	87 95       	ror	r24
    1912:	97 f9       	bld	r25, 7
    1914:	08 95       	ret

00001916 <square>:
    1916:	9b 01       	movw	r18, r22
    1918:	ac 01       	movw	r20, r24
    191a:	9a cf       	rjmp	.-204    	; 0x1850 <__mulsf3>

0000191c <__udivmodhi4>:
    191c:	aa 1b       	sub	r26, r26
    191e:	bb 1b       	sub	r27, r27
    1920:	51 e1       	ldi	r21, 0x11	; 17
    1922:	07 c0       	rjmp	.+14     	; 0x1932 <__udivmodhi4_ep>

00001924 <__udivmodhi4_loop>:
    1924:	aa 1f       	adc	r26, r26
    1926:	bb 1f       	adc	r27, r27
    1928:	a6 17       	cp	r26, r22
    192a:	b7 07       	cpc	r27, r23
    192c:	10 f0       	brcs	.+4      	; 0x1932 <__udivmodhi4_ep>
    192e:	a6 1b       	sub	r26, r22
    1930:	b7 0b       	sbc	r27, r23

00001932 <__udivmodhi4_ep>:
    1932:	88 1f       	adc	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	5a 95       	dec	r21
    1938:	a9 f7       	brne	.-22     	; 0x1924 <__udivmodhi4_loop>
    193a:	80 95       	com	r24
    193c:	90 95       	com	r25
    193e:	bc 01       	movw	r22, r24
    1940:	cd 01       	movw	r24, r26
    1942:	08 95       	ret

00001944 <__divmodhi4>:
    1944:	97 fb       	bst	r25, 7
    1946:	09 2e       	mov	r0, r25
    1948:	07 26       	eor	r0, r23
    194a:	0a d0       	rcall	.+20     	; 0x1960 <__divmodhi4_neg1>
    194c:	77 fd       	sbrc	r23, 7
    194e:	04 d0       	rcall	.+8      	; 0x1958 <__divmodhi4_neg2>
    1950:	e5 df       	rcall	.-54     	; 0x191c <__udivmodhi4>
    1952:	06 d0       	rcall	.+12     	; 0x1960 <__divmodhi4_neg1>
    1954:	00 20       	and	r0, r0
    1956:	1a f4       	brpl	.+6      	; 0x195e <__divmodhi4_exit>

00001958 <__divmodhi4_neg2>:
    1958:	70 95       	com	r23
    195a:	61 95       	neg	r22
    195c:	7f 4f       	sbci	r23, 0xFF	; 255

0000195e <__divmodhi4_exit>:
    195e:	08 95       	ret

00001960 <__divmodhi4_neg1>:
    1960:	f6 f7       	brtc	.-4      	; 0x195e <__divmodhi4_exit>
    1962:	90 95       	com	r25
    1964:	81 95       	neg	r24
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	08 95       	ret

0000196a <__divmodsi4>:
    196a:	97 fb       	bst	r25, 7
    196c:	09 2e       	mov	r0, r25
    196e:	05 26       	eor	r0, r21
    1970:	0e d0       	rcall	.+28     	; 0x198e <__divmodsi4_neg1>
    1972:	57 fd       	sbrc	r21, 7
    1974:	04 d0       	rcall	.+8      	; 0x197e <__divmodsi4_neg2>
    1976:	14 d0       	rcall	.+40     	; 0x19a0 <__udivmodsi4>
    1978:	0a d0       	rcall	.+20     	; 0x198e <__divmodsi4_neg1>
    197a:	00 1c       	adc	r0, r0
    197c:	38 f4       	brcc	.+14     	; 0x198c <__divmodsi4_exit>

0000197e <__divmodsi4_neg2>:
    197e:	50 95       	com	r21
    1980:	40 95       	com	r20
    1982:	30 95       	com	r19
    1984:	21 95       	neg	r18
    1986:	3f 4f       	sbci	r19, 0xFF	; 255
    1988:	4f 4f       	sbci	r20, 0xFF	; 255
    198a:	5f 4f       	sbci	r21, 0xFF	; 255

0000198c <__divmodsi4_exit>:
    198c:	08 95       	ret

0000198e <__divmodsi4_neg1>:
    198e:	f6 f7       	brtc	.-4      	; 0x198c <__divmodsi4_exit>
    1990:	90 95       	com	r25
    1992:	80 95       	com	r24
    1994:	70 95       	com	r23
    1996:	61 95       	neg	r22
    1998:	7f 4f       	sbci	r23, 0xFF	; 255
    199a:	8f 4f       	sbci	r24, 0xFF	; 255
    199c:	9f 4f       	sbci	r25, 0xFF	; 255
    199e:	08 95       	ret

000019a0 <__udivmodsi4>:
    19a0:	a1 e2       	ldi	r26, 0x21	; 33
    19a2:	1a 2e       	mov	r1, r26
    19a4:	aa 1b       	sub	r26, r26
    19a6:	bb 1b       	sub	r27, r27
    19a8:	fd 01       	movw	r30, r26
    19aa:	0d c0       	rjmp	.+26     	; 0x19c6 <__udivmodsi4_ep>

000019ac <__udivmodsi4_loop>:
    19ac:	aa 1f       	adc	r26, r26
    19ae:	bb 1f       	adc	r27, r27
    19b0:	ee 1f       	adc	r30, r30
    19b2:	ff 1f       	adc	r31, r31
    19b4:	a2 17       	cp	r26, r18
    19b6:	b3 07       	cpc	r27, r19
    19b8:	e4 07       	cpc	r30, r20
    19ba:	f5 07       	cpc	r31, r21
    19bc:	20 f0       	brcs	.+8      	; 0x19c6 <__udivmodsi4_ep>
    19be:	a2 1b       	sub	r26, r18
    19c0:	b3 0b       	sbc	r27, r19
    19c2:	e4 0b       	sbc	r30, r20
    19c4:	f5 0b       	sbc	r31, r21

000019c6 <__udivmodsi4_ep>:
    19c6:	66 1f       	adc	r22, r22
    19c8:	77 1f       	adc	r23, r23
    19ca:	88 1f       	adc	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	1a 94       	dec	r1
    19d0:	69 f7       	brne	.-38     	; 0x19ac <__udivmodsi4_loop>
    19d2:	60 95       	com	r22
    19d4:	70 95       	com	r23
    19d6:	80 95       	com	r24
    19d8:	90 95       	com	r25
    19da:	9b 01       	movw	r18, r22
    19dc:	ac 01       	movw	r20, r24
    19de:	bd 01       	movw	r22, r26
    19e0:	cf 01       	movw	r24, r30
    19e2:	08 95       	ret

000019e4 <_exit>:
    19e4:	f8 94       	cli

000019e6 <__stop_program>:
    19e6:	ff cf       	rjmp	.-2      	; 0x19e6 <__stop_program>
