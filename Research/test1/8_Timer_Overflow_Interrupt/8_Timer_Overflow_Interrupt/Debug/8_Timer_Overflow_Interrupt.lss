
8_Timer_Overflow_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a00  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00800200  00800200  00000a74  2**0
                  ALLOC
  2 .stab         00002184  00000000  00000000  00000a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006a8  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  000032a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cac  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000025f  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067c  00000000  00000000  0000428b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  00004908  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000245  00000000  00000000  00004a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000387  00000000  00000000  00004cc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_45>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e0       	ldi	r30, 0x00	; 0
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 30       	cpi	r26, 0x0E	; 14
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 a1 02 	call	0x542	; 0x542 <main>
 122:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	86 e6       	ldi	r24, 0x66	; 102
 12c:	9e e0       	ldi	r25, 0x0E	; 14
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
 132:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 13c:	42 9a       	sbi	0x08, 2	; 8
 13e:	ef ef       	ldi	r30, 0xFF	; 255
 140:	f7 e4       	ldi	r31, 0x47	; 71
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x18>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_set_4bit+0x1e>
 148:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 14a:	42 98       	cbi	0x08, 2	; 8
 14c:	e6 e6       	ldi	r30, 0x66	; 102
 14e:	fe e0       	ldi	r31, 0x0E	; 14
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_set_4bit+0x26>
 154:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 156:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 158:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 15a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 15c:	42 9a       	sbi	0x08, 2	; 8
 15e:	ef ef       	ldi	r30, 0xFF	; 255
 160:	f7 e4       	ldi	r31, 0x47	; 71
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x3e>
 168:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 16a:	42 98       	cbi	0x08, 2	; 8
 16c:	e6 e6       	ldi	r30, 0x66	; 102
 16e:	fe e0       	ldi	r31, 0x0E	; 14
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
 174:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 176:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 178:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 17a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 17c:	42 9a       	sbi	0x08, 2	; 8
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	97 e4       	ldi	r25, 0x47	; 71
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x58>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_set_4bit+0x5e>
 188:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 18a:	42 98       	cbi	0x08, 2	; 8
 18c:	e6 e6       	ldi	r30, 0x66	; 102
 18e:	fe e0       	ldi	r31, 0x0E	; 14
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x66>
 194:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 196:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 198:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 19e:	42 9a       	sbi	0x08, 2	; 8
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	97 e4       	ldi	r25, 0x47	; 71
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x7a>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_set_4bit+0x80>
 1aa:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1ac:	42 98       	cbi	0x08, 2	; 8

	
}
 1ae:	08 95       	ret

000001b0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1b0:	98 b1       	in	r25, 0x08	; 8
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1b6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1b8:	28 2f       	mov	r18, r24
 1ba:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1bc:	92 2b       	or	r25, r18
 1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1c4:	42 9a       	sbi	0x08, 2	; 8
 1c6:	ef ef       	ldi	r30, 0xFF	; 255
 1c8:	f7 e4       	ldi	r31, 0x47	; 71
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_wr_command+0x1a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_wr_command+0x20>
 1d0:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1d2:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1d4:	98 b1       	in	r25, 0x08	; 8
 1d6:	9f 70       	andi	r25, 0x0F	; 15
 1d8:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1da:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1dc:	82 95       	swap	r24
 1de:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 1e0:	89 2b       	or	r24, r25
 1e2:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 1e4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1e6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1e8:	42 9a       	sbi	0x08, 2	; 8
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	97 e4       	ldi	r25, 0x47	; 71
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_wr_command+0x3e>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_wr_command+0x44>
 1f4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1f6:	42 98       	cbi	0x08, 2	; 8
}
 1f8:	08 95       	ret

000001fa <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
 1fa:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
 1fe:	86 e6       	ldi	r24, 0x66	; 102
 200:	9e e0       	ldi	r25, 0x0E	; 14
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x8>
 206:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 208:	88 e2       	ldi	r24, 0x28	; 40
 20a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x01);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x06);
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x0E);
 21a:	8e e0       	ldi	r24, 0x0E	; 14
 21c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x80);
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
		
}
 226:	08 95       	ret

00000228 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 228:	98 b1       	in	r25, 0x08	; 8
 22a:	9f 70       	andi	r25, 0x0F	; 15
 22c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 22e:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 230:	28 2f       	mov	r18, r24
 232:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 234:	92 2b       	or	r25, r18
 236:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 238:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 23a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 23c:	42 9a       	sbi	0x08, 2	; 8
 23e:	ef ef       	ldi	r30, 0xFF	; 255
 240:	f7 e4       	ldi	r31, 0x47	; 71
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_wr_char+0x1a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_wr_char+0x20>
 248:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 24a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 24c:	98 b1       	in	r25, 0x08	; 8
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 252:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 254:	82 95       	swap	r24
 256:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 258:	89 2b       	or	r24, r25
 25a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 25c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 25e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 260:	42 9a       	sbi	0x08, 2	; 8
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	97 e4       	ldi	r25, 0x47	; 71
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_wr_char+0x3e>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_wr_char+0x44>
 26c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 26e:	42 98       	cbi	0x08, 2	; 8
}
 270:	08 95       	ret

00000272 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
}
 278:	08 95       	ret

0000027a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	ec 01       	movw	r28, r24
	while(*str != '\0')
 280:	88 81       	ld	r24, Y
 282:	88 23       	and	r24, r24
 284:	31 f0       	breq	.+12     	; 0x292 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 286:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 288:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 28c:	89 91       	ld	r24, Y+
 28e:	88 23       	and	r24, r24
 290:	d9 f7       	brne	.-10     	; 0x288 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	79 f0       	breq	.+30     	; 0x2ba <lcd_cursor+0x22>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <lcd_cursor+0xe>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	c9 f4       	brne	.+50     	; 0x2d6 <lcd_cursor+0x3e>
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <lcd_cursor+0x18>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	69 f0       	breq	.+26     	; 0x2c4 <lcd_cursor+0x2c>
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	a1 f4       	brne	.+40     	; 0x2d6 <lcd_cursor+0x3e>
 2ae:	0f c0       	rjmp	.+30     	; 0x2ce <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2b0:	86 2f       	mov	r24, r22
 2b2:	81 58       	subi	r24, 0x81	; 129
 2b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2b8:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2ba:	86 2f       	mov	r24, r22
 2bc:	81 54       	subi	r24, 0x41	; 65
 2be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2c2:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2c4:	86 2f       	mov	r24, r22
 2c6:	8d 56       	subi	r24, 0x6D	; 109
 2c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2cc:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2ce:	86 2f       	mov	r24, r22
 2d0:	8d 52       	subi	r24, 0x2D	; 45
 2d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2d6:	08 95       	ret

000002d8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	8a 01       	movw	r16, r20
 2e2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 2e4:	88 23       	and	r24, r24
 2e6:	11 f0       	breq	.+4      	; 0x2ec <lcd_print+0x14>
 2e8:	66 23       	and	r22, r22
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <lcd_print+0x1a>
	{
		lcd_home();
 2ec:	0e 94 39 01 	call	0x272	; 0x272 <lcd_home>
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2f2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 2f6:	c5 30       	cpi	r28, 0x05	; 5
 2f8:	d1 05       	cpc	r29, r1
 2fa:	71 f4       	brne	.+28     	; 0x318 <lcd_print+0x40>
	{
		million=value/10000+48;
 2fc:	c8 01       	movw	r24, r16
 2fe:	60 e1       	ldi	r22, 0x10	; 16
 300:	77 e2       	ldi	r23, 0x27	; 39
 302:	0e 94 ad 04 	call	0x95a	; 0x95a <__udivmodhi4>
 306:	cb 01       	movw	r24, r22
 308:	c0 96       	adiw	r24, 0x30	; 48
 30a:	90 93 03 02 	sts	0x0203, r25
 30e:	80 93 02 02 	sts	0x0202, r24
		lcd_wr_char(million);
 312:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
 316:	03 c0       	rjmp	.+6      	; 0x31e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 318:	c4 30       	cpi	r28, 0x04	; 4
 31a:	d1 05       	cpc	r29, r1
 31c:	b9 f4       	brne	.+46     	; 0x34c <lcd_print+0x74>
	{
		temp = value/1000;
 31e:	c8 01       	movw	r24, r16
 320:	68 ee       	ldi	r22, 0xE8	; 232
 322:	73 e0       	ldi	r23, 0x03	; 3
 324:	0e 94 ad 04 	call	0x95a	; 0x95a <__udivmodhi4>
 328:	cb 01       	movw	r24, r22
 32a:	70 93 05 02 	sts	0x0205, r23
 32e:	60 93 04 02 	sts	0x0204, r22
		thousand = temp%10 + 48;
 332:	6a e0       	ldi	r22, 0x0A	; 10
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	0e 94 ad 04 	call	0x95a	; 0x95a <__udivmodhi4>
 33a:	c0 96       	adiw	r24, 0x30	; 48
 33c:	90 93 0d 02 	sts	0x020D, r25
 340:	80 93 0c 02 	sts	0x020C, r24
		lcd_wr_char(thousand);
 344:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	01 c0       	rjmp	.+2      	; 0x34e <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 34c:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 34e:	c3 30       	cpi	r28, 0x03	; 3
 350:	d1 05       	cpc	r29, r1
 352:	11 f0       	breq	.+4      	; 0x358 <lcd_print+0x80>
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	b1 f4       	brne	.+44     	; 0x384 <lcd_print+0xac>
	{
		temp = value/100;
 358:	c8 01       	movw	r24, r16
 35a:	64 e6       	ldi	r22, 0x64	; 100
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	0e 94 ad 04 	call	0x95a	; 0x95a <__udivmodhi4>
 362:	cb 01       	movw	r24, r22
 364:	70 93 05 02 	sts	0x0205, r23
 368:	60 93 04 02 	sts	0x0204, r22
		hundred = temp%10 + 48;
 36c:	6a e0       	ldi	r22, 0x0A	; 10
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	0e 94 ad 04 	call	0x95a	; 0x95a <__udivmodhi4>
 374:	c0 96       	adiw	r24, 0x30	; 48
 376:	90 93 09 02 	sts	0x0209, r25
 37a:	80 93 08 02 	sts	0x0208, r24
		lcd_wr_char(hundred);
 37e:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 382:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 384:	c2 30       	cpi	r28, 0x02	; 2
 386:	d1 05       	cpc	r29, r1
 388:	11 f0       	breq	.+4      	; 0x38e <lcd_print+0xb6>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	b1 f4       	brne	.+44     	; 0x3ba <lcd_print+0xe2>
	{
		temp = value/10;
 38e:	2a e0       	ldi	r18, 0x0A	; 10
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	c8 01       	movw	r24, r16
 394:	b9 01       	movw	r22, r18
 396:	0e 94 ad 04 	call	0x95a	; 0x95a <__udivmodhi4>
 39a:	cb 01       	movw	r24, r22
 39c:	70 93 05 02 	sts	0x0205, r23
 3a0:	60 93 04 02 	sts	0x0204, r22
		tens = temp%10 + 48;
 3a4:	b9 01       	movw	r22, r18
 3a6:	0e 94 ad 04 	call	0x95a	; 0x95a <__udivmodhi4>
 3aa:	c0 96       	adiw	r24, 0x30	; 48
 3ac:	90 93 07 02 	sts	0x0207, r25
 3b0:	80 93 06 02 	sts	0x0206, r24
		lcd_wr_char(tens);
 3b4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 3ba:	c1 30       	cpi	r28, 0x01	; 1
 3bc:	d1 05       	cpc	r29, r1
 3be:	11 f0       	breq	.+4      	; 0x3c4 <lcd_print+0xec>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	61 f4       	brne	.+24     	; 0x3dc <lcd_print+0x104>
	{
		unit = value%10 + 48;
 3c4:	c8 01       	movw	r24, r16
 3c6:	6a e0       	ldi	r22, 0x0A	; 10
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	0e 94 ad 04 	call	0x95a	; 0x95a <__udivmodhi4>
 3ce:	c0 96       	adiw	r24, 0x30	; 48
 3d0:	90 93 0b 02 	sts	0x020B, r25
 3d4:	80 93 0a 02 	sts	0x020A, r24
		lcd_wr_char(unit);
 3d8:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	if(digits>5)
 3dc:	c6 30       	cpi	r28, 0x06	; 6
 3de:	d1 05       	cpc	r29, r1
 3e0:	1c f0       	brlt	.+6      	; 0x3e8 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 3e2:	85 e4       	ldi	r24, 0x45	; 69
 3e4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	08 95       	ret

000003f2 <buzzer_pin_config>:
int tot_overflow = 0; //used as a variable for buzzer state toggel action

//Function to initialize Buzzer 
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 3f2:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 3f4:	43 98       	cbi	0x08, 3	; 8
}
 3f6:	08 95       	ret

000003f8 <lcd_port_config>:

void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 3f8:	87 b1       	in	r24, 0x07	; 7
 3fa:	87 6f       	ori	r24, 0xF7	; 247
 3fc:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 3fe:	88 b1       	in	r24, 0x08	; 8
 400:	80 78       	andi	r24, 0x80	; 128
 402:	88 b9       	out	0x08, r24	; 8
}
 404:	08 95       	ret

00000406 <port_init>:

void port_init (void)
{
 buzzer_pin_config();
 406:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <buzzer_pin_config>
 lcd_port_config();
 40a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_port_config>
}
 40e:	08 95       	ret

00000410 <timer4_init>:
// WGM: 0) Normal, TOP=0xFFFF
// desired value: 1Hz
// actual value:  1.000Hz (0.0%)
void timer4_init(void)
{
 TCCR4B = 0x00; //stop
 410:	e1 ea       	ldi	r30, 0xA1	; 161
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	10 82       	st	Z, r1
 TCNT4H = 0xFF; //Counter higher 8 bit value
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	80 93 a5 00 	sts	0x00A5, r24
 TCNT4L = 0xFF; //Counter lower 8 bit value
 41c:	80 93 a4 00 	sts	0x00A4, r24
 OCR4AH = 0x00; //Output Compair Register (OCR)- Not used
 420:	10 92 a9 00 	sts	0x00A9, r1
 OCR4AL = 0x00; //Output Compair Register (OCR)- Not used
 424:	10 92 a8 00 	sts	0x00A8, r1
 OCR4BH = 0x00; //Output Compair Register (OCR)- Not used
 428:	10 92 ab 00 	sts	0x00AB, r1
 OCR4BL = 0x00; //Output Compair Register (OCR)- Not used
 42c:	10 92 aa 00 	sts	0x00AA, r1
 OCR4CH = 0x00; //Output Compair Register (OCR)- Not used
 430:	10 92 ad 00 	sts	0x00AD, r1
 OCR4CL = 0x00; //Output Compair Register (OCR)- Not used
 434:	10 92 ac 00 	sts	0x00AC, r1
 ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
 438:	10 92 a7 00 	sts	0x00A7, r1
 ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
 43c:	10 92 a6 00 	sts	0x00A6, r1
 TCCR4A = 0x00; 
 440:	10 92 a0 00 	sts	0x00A0, r1
 
 TCCR4C = 0x00;
 444:	10 92 a2 00 	sts	0x00A2, r1
 TCCR4B = 0x04; //start Timer
 448:	84 e0       	ldi	r24, 0x04	; 4
 44a:	80 83       	st	Z, r24
}
 44c:	08 95       	ret

0000044e <stop_timer>:

//to stop timer
void stop_timer()
{
	
	TCCR4A = 0x00;
 44e:	10 92 a0 00 	sts	0x00A0, r1
}
 452:	08 95       	ret

00000454 <__vector_45>:
//This ISR can be used to schedule events like refreshing ADC data, LCD data
ISR(TIMER4_OVF_vect)
{
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
	// keep a track of number of overflows
	tot_overflow++;
 462:	80 91 00 02 	lds	r24, 0x0200
 466:	90 91 01 02 	lds	r25, 0x0201
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	90 93 01 02 	sts	0x0201, r25
 470:	80 93 00 02 	sts	0x0200, r24
	//TIMER4 has overflowed
	TCNT4H = 0xFF; //reload counter high value
 474:	8f ef       	ldi	r24, 0xFF	; 255
 476:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0xFF;//reload counter low value
 47a:	80 93 a4 00 	sts	0x00A4, r24
}
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <millis>:
	}
return(count);			
} */

int millis(void)
{
 48c:	cf 92       	push	r12
 48e:	df 92       	push	r13
 490:	ef 92       	push	r14
 492:	ff 92       	push	r15
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
	int time=0;
	//time=1000*(tot_overflow + (TCNT4-7936.0)/57600);
	lcd_print(2,3,tot_overflow,2);
 498:	40 91 00 02 	lds	r20, 0x0200
 49c:	50 91 01 02 	lds	r21, 0x0201
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	63 e0       	ldi	r22, 0x03	; 3
 4a4:	22 e0       	ldi	r18, 0x02	; 2
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	time=1000*((tot_overflow*65536)/57598 + (TCNT4-7936.0)/57598);
 4ac:	c0 91 a4 00 	lds	r28, 0x00A4
 4b0:	d0 91 a5 00 	lds	r29, 0x00A5
 4b4:	80 91 00 02 	lds	r24, 0x0200
 4b8:	90 91 01 02 	lds	r25, 0x0201
 4bc:	aa 27       	eor	r26, r26
 4be:	97 fd       	sbrc	r25, 7
 4c0:	a0 95       	com	r26
 4c2:	ba 2f       	mov	r27, r26
 4c4:	77 27       	eor	r23, r23
 4c6:	66 27       	eor	r22, r22
 4c8:	2e ef       	ldi	r18, 0xFE	; 254
 4ca:	30 ee       	ldi	r19, 0xE0	; 224
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	50 e0       	ldi	r21, 0x00	; 0
 4d0:	0e 94 c1 04 	call	0x982	; 0x982 <__divmodsi4>
 4d4:	ca 01       	movw	r24, r20
 4d6:	b9 01       	movw	r22, r18
 4d8:	0e 94 be 03 	call	0x77c	; 0x77c <__floatsisf>
 4dc:	6b 01       	movw	r12, r22
 4de:	7c 01       	movw	r14, r24
 4e0:	be 01       	movw	r22, r28
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 bc 03 	call	0x778	; 0x778 <__floatunsisf>
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	48 ef       	ldi	r20, 0xF8	; 248
 4f0:	55 e4       	ldi	r21, 0x45	; 69
 4f2:	0e 94 be 02 	call	0x57c	; 0x57c <__subsf3>
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	3e ef       	ldi	r19, 0xFE	; 254
 4fa:	40 e6       	ldi	r20, 0x60	; 96
 4fc:	57 e4       	ldi	r21, 0x47	; 71
 4fe:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
 502:	9b 01       	movw	r18, r22
 504:	ac 01       	movw	r20, r24
 506:	c7 01       	movw	r24, r14
 508:	b6 01       	movw	r22, r12
 50a:	0e 94 bf 02 	call	0x57e	; 0x57e <__addsf3>
 50e:	20 e0       	ldi	r18, 0x00	; 0
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	4a e7       	ldi	r20, 0x7A	; 122
 514:	54 e4       	ldi	r21, 0x44	; 68
 516:	0e 94 4a 04 	call	0x894	; 0x894 <__mulsf3>
 51a:	0e 94 8b 03 	call	0x716	; 0x716 <__fixsfsi>
	TCCR4B=0x00;
 51e:	10 92 a1 00 	sts	0x00A1, r1
	return time;
	
}
 522:	86 2f       	mov	r24, r22
 524:	97 2f       	mov	r25, r23
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	ff 90       	pop	r15
 52c:	ef 90       	pop	r14
 52e:	df 90       	pop	r13
 530:	cf 90       	pop	r12
 532:	08 95       	ret

00000534 <init_devices>:
void init_devices(void)
{
 cli(); //Clears the global interrupts
 534:	f8 94       	cli
 port_init(); //Initializes all ports 
 536:	0e 94 03 02 	call	0x406	; 0x406 <port_init>
 timer4_init();
 53a:	0e 94 08 02 	call	0x410	; 0x410 <timer4_init>
// TIMSK4 = 0x01; //timer4 overflow interrupt enable
 sei();   //Enables the global interrupts
 53e:	78 94       	sei
}
 540:	08 95       	ret

00000542 <main>:

//Main Function
int main(void)
{   int t;
	init_devices();
 542:	0e 94 9a 02 	call	0x534	; 0x534 <init_devices>
	lcd_set_4bit();                // set the LCD in 4 bit mode
 546:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
 54a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_init>
	timer4_init();
 54e:	0e 94 08 02 	call	0x410	; 0x410 <timer4_init>
 552:	82 e3       	ldi	r24, 0x32	; 50
 554:	93 eb       	ldi	r25, 0xB3	; 179
 556:	a2 e0       	ldi	r26, 0x02	; 2
 558:	81 50       	subi	r24, 0x01	; 1
 55a:	90 40       	sbci	r25, 0x00	; 0
 55c:	a0 40       	sbci	r26, 0x00	; 0
 55e:	e1 f7       	brne	.-8      	; 0x558 <main+0x16>
 560:	00 c0       	rjmp	.+0      	; 0x562 <main+0x20>
 562:	00 c0       	rjmp	.+0      	; 0x564 <main+0x22>
	_delay_ms(60);
	t=millis();
 564:	0e 94 46 02 	call	0x48c	; 0x48c <millis>
 568:	ac 01       	movw	r20, r24
	lcd_print(1,3,t,4);
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	63 e0       	ldi	r22, 0x03	; 3
 56e:	24 e0       	ldi	r18, 0x04	; 4
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	//stop_timer();
}
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	08 95       	ret

0000057c <__subsf3>:
 57c:	50 58       	subi	r21, 0x80	; 128

0000057e <__addsf3>:
 57e:	bb 27       	eor	r27, r27
 580:	aa 27       	eor	r26, r26
 582:	0e d0       	rcall	.+28     	; 0x5a0 <__addsf3x>
 584:	4d c1       	rjmp	.+666    	; 0x820 <__fp_round>
 586:	3e d1       	rcall	.+636    	; 0x804 <__fp_pscA>
 588:	30 f0       	brcs	.+12     	; 0x596 <__addsf3+0x18>
 58a:	43 d1       	rcall	.+646    	; 0x812 <__fp_pscB>
 58c:	20 f0       	brcs	.+8      	; 0x596 <__addsf3+0x18>
 58e:	31 f4       	brne	.+12     	; 0x59c <__addsf3+0x1e>
 590:	9f 3f       	cpi	r25, 0xFF	; 255
 592:	11 f4       	brne	.+4      	; 0x598 <__addsf3+0x1a>
 594:	1e f4       	brtc	.+6      	; 0x59c <__addsf3+0x1e>
 596:	33 c1       	rjmp	.+614    	; 0x7fe <__fp_nan>
 598:	0e f4       	brtc	.+2      	; 0x59c <__addsf3+0x1e>
 59a:	e0 95       	com	r30
 59c:	e7 fb       	bst	r30, 7
 59e:	29 c1       	rjmp	.+594    	; 0x7f2 <__fp_inf>

000005a0 <__addsf3x>:
 5a0:	e9 2f       	mov	r30, r25
 5a2:	4f d1       	rcall	.+670    	; 0x842 <__fp_split3>
 5a4:	80 f3       	brcs	.-32     	; 0x586 <__addsf3+0x8>
 5a6:	ba 17       	cp	r27, r26
 5a8:	62 07       	cpc	r22, r18
 5aa:	73 07       	cpc	r23, r19
 5ac:	84 07       	cpc	r24, r20
 5ae:	95 07       	cpc	r25, r21
 5b0:	18 f0       	brcs	.+6      	; 0x5b8 <__addsf3x+0x18>
 5b2:	71 f4       	brne	.+28     	; 0x5d0 <__addsf3x+0x30>
 5b4:	9e f5       	brtc	.+102    	; 0x61c <__addsf3x+0x7c>
 5b6:	67 c1       	rjmp	.+718    	; 0x886 <__fp_zero>
 5b8:	0e f4       	brtc	.+2      	; 0x5bc <__addsf3x+0x1c>
 5ba:	e0 95       	com	r30
 5bc:	0b 2e       	mov	r0, r27
 5be:	ba 2f       	mov	r27, r26
 5c0:	a0 2d       	mov	r26, r0
 5c2:	0b 01       	movw	r0, r22
 5c4:	b9 01       	movw	r22, r18
 5c6:	90 01       	movw	r18, r0
 5c8:	0c 01       	movw	r0, r24
 5ca:	ca 01       	movw	r24, r20
 5cc:	a0 01       	movw	r20, r0
 5ce:	11 24       	eor	r1, r1
 5d0:	ff 27       	eor	r31, r31
 5d2:	59 1b       	sub	r21, r25
 5d4:	99 f0       	breq	.+38     	; 0x5fc <__addsf3x+0x5c>
 5d6:	59 3f       	cpi	r21, 0xF9	; 249
 5d8:	50 f4       	brcc	.+20     	; 0x5ee <__addsf3x+0x4e>
 5da:	50 3e       	cpi	r21, 0xE0	; 224
 5dc:	68 f1       	brcs	.+90     	; 0x638 <__addsf3x+0x98>
 5de:	1a 16       	cp	r1, r26
 5e0:	f0 40       	sbci	r31, 0x00	; 0
 5e2:	a2 2f       	mov	r26, r18
 5e4:	23 2f       	mov	r18, r19
 5e6:	34 2f       	mov	r19, r20
 5e8:	44 27       	eor	r20, r20
 5ea:	58 5f       	subi	r21, 0xF8	; 248
 5ec:	f3 cf       	rjmp	.-26     	; 0x5d4 <__addsf3x+0x34>
 5ee:	46 95       	lsr	r20
 5f0:	37 95       	ror	r19
 5f2:	27 95       	ror	r18
 5f4:	a7 95       	ror	r26
 5f6:	f0 40       	sbci	r31, 0x00	; 0
 5f8:	53 95       	inc	r21
 5fa:	c9 f7       	brne	.-14     	; 0x5ee <__addsf3x+0x4e>
 5fc:	7e f4       	brtc	.+30     	; 0x61c <__addsf3x+0x7c>
 5fe:	1f 16       	cp	r1, r31
 600:	ba 0b       	sbc	r27, r26
 602:	62 0b       	sbc	r22, r18
 604:	73 0b       	sbc	r23, r19
 606:	84 0b       	sbc	r24, r20
 608:	ba f0       	brmi	.+46     	; 0x638 <__addsf3x+0x98>
 60a:	91 50       	subi	r25, 0x01	; 1
 60c:	a1 f0       	breq	.+40     	; 0x636 <__addsf3x+0x96>
 60e:	ff 0f       	add	r31, r31
 610:	bb 1f       	adc	r27, r27
 612:	66 1f       	adc	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	88 1f       	adc	r24, r24
 618:	c2 f7       	brpl	.-16     	; 0x60a <__addsf3x+0x6a>
 61a:	0e c0       	rjmp	.+28     	; 0x638 <__addsf3x+0x98>
 61c:	ba 0f       	add	r27, r26
 61e:	62 1f       	adc	r22, r18
 620:	73 1f       	adc	r23, r19
 622:	84 1f       	adc	r24, r20
 624:	48 f4       	brcc	.+18     	; 0x638 <__addsf3x+0x98>
 626:	87 95       	ror	r24
 628:	77 95       	ror	r23
 62a:	67 95       	ror	r22
 62c:	b7 95       	ror	r27
 62e:	f7 95       	ror	r31
 630:	9e 3f       	cpi	r25, 0xFE	; 254
 632:	08 f0       	brcs	.+2      	; 0x636 <__addsf3x+0x96>
 634:	b3 cf       	rjmp	.-154    	; 0x59c <__addsf3+0x1e>
 636:	93 95       	inc	r25
 638:	88 0f       	add	r24, r24
 63a:	08 f0       	brcs	.+2      	; 0x63e <__addsf3x+0x9e>
 63c:	99 27       	eor	r25, r25
 63e:	ee 0f       	add	r30, r30
 640:	97 95       	ror	r25
 642:	87 95       	ror	r24
 644:	08 95       	ret

00000646 <__divsf3>:
 646:	0c d0       	rcall	.+24     	; 0x660 <__divsf3x>
 648:	eb c0       	rjmp	.+470    	; 0x820 <__fp_round>
 64a:	e3 d0       	rcall	.+454    	; 0x812 <__fp_pscB>
 64c:	40 f0       	brcs	.+16     	; 0x65e <__divsf3+0x18>
 64e:	da d0       	rcall	.+436    	; 0x804 <__fp_pscA>
 650:	30 f0       	brcs	.+12     	; 0x65e <__divsf3+0x18>
 652:	21 f4       	brne	.+8      	; 0x65c <__divsf3+0x16>
 654:	5f 3f       	cpi	r21, 0xFF	; 255
 656:	19 f0       	breq	.+6      	; 0x65e <__divsf3+0x18>
 658:	cc c0       	rjmp	.+408    	; 0x7f2 <__fp_inf>
 65a:	51 11       	cpse	r21, r1
 65c:	15 c1       	rjmp	.+554    	; 0x888 <__fp_szero>
 65e:	cf c0       	rjmp	.+414    	; 0x7fe <__fp_nan>

00000660 <__divsf3x>:
 660:	f0 d0       	rcall	.+480    	; 0x842 <__fp_split3>
 662:	98 f3       	brcs	.-26     	; 0x64a <__divsf3+0x4>

00000664 <__divsf3_pse>:
 664:	99 23       	and	r25, r25
 666:	c9 f3       	breq	.-14     	; 0x65a <__divsf3+0x14>
 668:	55 23       	and	r21, r21
 66a:	b1 f3       	breq	.-20     	; 0x658 <__divsf3+0x12>
 66c:	95 1b       	sub	r25, r21
 66e:	55 0b       	sbc	r21, r21
 670:	bb 27       	eor	r27, r27
 672:	aa 27       	eor	r26, r26
 674:	62 17       	cp	r22, r18
 676:	73 07       	cpc	r23, r19
 678:	84 07       	cpc	r24, r20
 67a:	38 f0       	brcs	.+14     	; 0x68a <__divsf3_pse+0x26>
 67c:	9f 5f       	subi	r25, 0xFF	; 255
 67e:	5f 4f       	sbci	r21, 0xFF	; 255
 680:	22 0f       	add	r18, r18
 682:	33 1f       	adc	r19, r19
 684:	44 1f       	adc	r20, r20
 686:	aa 1f       	adc	r26, r26
 688:	a9 f3       	breq	.-22     	; 0x674 <__divsf3_pse+0x10>
 68a:	33 d0       	rcall	.+102    	; 0x6f2 <__divsf3_pse+0x8e>
 68c:	0e 2e       	mov	r0, r30
 68e:	3a f0       	brmi	.+14     	; 0x69e <__divsf3_pse+0x3a>
 690:	e0 e8       	ldi	r30, 0x80	; 128
 692:	30 d0       	rcall	.+96     	; 0x6f4 <__divsf3_pse+0x90>
 694:	91 50       	subi	r25, 0x01	; 1
 696:	50 40       	sbci	r21, 0x00	; 0
 698:	e6 95       	lsr	r30
 69a:	00 1c       	adc	r0, r0
 69c:	ca f7       	brpl	.-14     	; 0x690 <__divsf3_pse+0x2c>
 69e:	29 d0       	rcall	.+82     	; 0x6f2 <__divsf3_pse+0x8e>
 6a0:	fe 2f       	mov	r31, r30
 6a2:	27 d0       	rcall	.+78     	; 0x6f2 <__divsf3_pse+0x8e>
 6a4:	66 0f       	add	r22, r22
 6a6:	77 1f       	adc	r23, r23
 6a8:	88 1f       	adc	r24, r24
 6aa:	bb 1f       	adc	r27, r27
 6ac:	26 17       	cp	r18, r22
 6ae:	37 07       	cpc	r19, r23
 6b0:	48 07       	cpc	r20, r24
 6b2:	ab 07       	cpc	r26, r27
 6b4:	b0 e8       	ldi	r27, 0x80	; 128
 6b6:	09 f0       	breq	.+2      	; 0x6ba <__divsf3_pse+0x56>
 6b8:	bb 0b       	sbc	r27, r27
 6ba:	80 2d       	mov	r24, r0
 6bc:	bf 01       	movw	r22, r30
 6be:	ff 27       	eor	r31, r31
 6c0:	93 58       	subi	r25, 0x83	; 131
 6c2:	5f 4f       	sbci	r21, 0xFF	; 255
 6c4:	2a f0       	brmi	.+10     	; 0x6d0 <__divsf3_pse+0x6c>
 6c6:	9e 3f       	cpi	r25, 0xFE	; 254
 6c8:	51 05       	cpc	r21, r1
 6ca:	68 f0       	brcs	.+26     	; 0x6e6 <__divsf3_pse+0x82>
 6cc:	92 c0       	rjmp	.+292    	; 0x7f2 <__fp_inf>
 6ce:	dc c0       	rjmp	.+440    	; 0x888 <__fp_szero>
 6d0:	5f 3f       	cpi	r21, 0xFF	; 255
 6d2:	ec f3       	brlt	.-6      	; 0x6ce <__divsf3_pse+0x6a>
 6d4:	98 3e       	cpi	r25, 0xE8	; 232
 6d6:	dc f3       	brlt	.-10     	; 0x6ce <__divsf3_pse+0x6a>
 6d8:	86 95       	lsr	r24
 6da:	77 95       	ror	r23
 6dc:	67 95       	ror	r22
 6de:	b7 95       	ror	r27
 6e0:	f7 95       	ror	r31
 6e2:	9f 5f       	subi	r25, 0xFF	; 255
 6e4:	c9 f7       	brne	.-14     	; 0x6d8 <__divsf3_pse+0x74>
 6e6:	88 0f       	add	r24, r24
 6e8:	91 1d       	adc	r25, r1
 6ea:	96 95       	lsr	r25
 6ec:	87 95       	ror	r24
 6ee:	97 f9       	bld	r25, 7
 6f0:	08 95       	ret
 6f2:	e1 e0       	ldi	r30, 0x01	; 1
 6f4:	66 0f       	add	r22, r22
 6f6:	77 1f       	adc	r23, r23
 6f8:	88 1f       	adc	r24, r24
 6fa:	bb 1f       	adc	r27, r27
 6fc:	62 17       	cp	r22, r18
 6fe:	73 07       	cpc	r23, r19
 700:	84 07       	cpc	r24, r20
 702:	ba 07       	cpc	r27, r26
 704:	20 f0       	brcs	.+8      	; 0x70e <__divsf3_pse+0xaa>
 706:	62 1b       	sub	r22, r18
 708:	73 0b       	sbc	r23, r19
 70a:	84 0b       	sbc	r24, r20
 70c:	ba 0b       	sbc	r27, r26
 70e:	ee 1f       	adc	r30, r30
 710:	88 f7       	brcc	.-30     	; 0x6f4 <__divsf3_pse+0x90>
 712:	e0 95       	com	r30
 714:	08 95       	ret

00000716 <__fixsfsi>:
 716:	04 d0       	rcall	.+8      	; 0x720 <__fixunssfsi>
 718:	68 94       	set
 71a:	b1 11       	cpse	r27, r1
 71c:	b5 c0       	rjmp	.+362    	; 0x888 <__fp_szero>
 71e:	08 95       	ret

00000720 <__fixunssfsi>:
 720:	98 d0       	rcall	.+304    	; 0x852 <__fp_splitA>
 722:	88 f0       	brcs	.+34     	; 0x746 <__fixunssfsi+0x26>
 724:	9f 57       	subi	r25, 0x7F	; 127
 726:	90 f0       	brcs	.+36     	; 0x74c <__fixunssfsi+0x2c>
 728:	b9 2f       	mov	r27, r25
 72a:	99 27       	eor	r25, r25
 72c:	b7 51       	subi	r27, 0x17	; 23
 72e:	a0 f0       	brcs	.+40     	; 0x758 <__fixunssfsi+0x38>
 730:	d1 f0       	breq	.+52     	; 0x766 <__fixunssfsi+0x46>
 732:	66 0f       	add	r22, r22
 734:	77 1f       	adc	r23, r23
 736:	88 1f       	adc	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	1a f0       	brmi	.+6      	; 0x742 <__fixunssfsi+0x22>
 73c:	ba 95       	dec	r27
 73e:	c9 f7       	brne	.-14     	; 0x732 <__fixunssfsi+0x12>
 740:	12 c0       	rjmp	.+36     	; 0x766 <__fixunssfsi+0x46>
 742:	b1 30       	cpi	r27, 0x01	; 1
 744:	81 f0       	breq	.+32     	; 0x766 <__fixunssfsi+0x46>
 746:	9f d0       	rcall	.+318    	; 0x886 <__fp_zero>
 748:	b1 e0       	ldi	r27, 0x01	; 1
 74a:	08 95       	ret
 74c:	9c c0       	rjmp	.+312    	; 0x886 <__fp_zero>
 74e:	67 2f       	mov	r22, r23
 750:	78 2f       	mov	r23, r24
 752:	88 27       	eor	r24, r24
 754:	b8 5f       	subi	r27, 0xF8	; 248
 756:	39 f0       	breq	.+14     	; 0x766 <__fixunssfsi+0x46>
 758:	b9 3f       	cpi	r27, 0xF9	; 249
 75a:	cc f3       	brlt	.-14     	; 0x74e <__fixunssfsi+0x2e>
 75c:	86 95       	lsr	r24
 75e:	77 95       	ror	r23
 760:	67 95       	ror	r22
 762:	b3 95       	inc	r27
 764:	d9 f7       	brne	.-10     	; 0x75c <__fixunssfsi+0x3c>
 766:	3e f4       	brtc	.+14     	; 0x776 <__fixunssfsi+0x56>
 768:	90 95       	com	r25
 76a:	80 95       	com	r24
 76c:	70 95       	com	r23
 76e:	61 95       	neg	r22
 770:	7f 4f       	sbci	r23, 0xFF	; 255
 772:	8f 4f       	sbci	r24, 0xFF	; 255
 774:	9f 4f       	sbci	r25, 0xFF	; 255
 776:	08 95       	ret

00000778 <__floatunsisf>:
 778:	e8 94       	clt
 77a:	09 c0       	rjmp	.+18     	; 0x78e <__floatsisf+0x12>

0000077c <__floatsisf>:
 77c:	97 fb       	bst	r25, 7
 77e:	3e f4       	brtc	.+14     	; 0x78e <__floatsisf+0x12>
 780:	90 95       	com	r25
 782:	80 95       	com	r24
 784:	70 95       	com	r23
 786:	61 95       	neg	r22
 788:	7f 4f       	sbci	r23, 0xFF	; 255
 78a:	8f 4f       	sbci	r24, 0xFF	; 255
 78c:	9f 4f       	sbci	r25, 0xFF	; 255
 78e:	99 23       	and	r25, r25
 790:	a9 f0       	breq	.+42     	; 0x7bc <__floatsisf+0x40>
 792:	f9 2f       	mov	r31, r25
 794:	96 e9       	ldi	r25, 0x96	; 150
 796:	bb 27       	eor	r27, r27
 798:	93 95       	inc	r25
 79a:	f6 95       	lsr	r31
 79c:	87 95       	ror	r24
 79e:	77 95       	ror	r23
 7a0:	67 95       	ror	r22
 7a2:	b7 95       	ror	r27
 7a4:	f1 11       	cpse	r31, r1
 7a6:	f8 cf       	rjmp	.-16     	; 0x798 <__floatsisf+0x1c>
 7a8:	fa f4       	brpl	.+62     	; 0x7e8 <__floatsisf+0x6c>
 7aa:	bb 0f       	add	r27, r27
 7ac:	11 f4       	brne	.+4      	; 0x7b2 <__floatsisf+0x36>
 7ae:	60 ff       	sbrs	r22, 0
 7b0:	1b c0       	rjmp	.+54     	; 0x7e8 <__floatsisf+0x6c>
 7b2:	6f 5f       	subi	r22, 0xFF	; 255
 7b4:	7f 4f       	sbci	r23, 0xFF	; 255
 7b6:	8f 4f       	sbci	r24, 0xFF	; 255
 7b8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ba:	16 c0       	rjmp	.+44     	; 0x7e8 <__floatsisf+0x6c>
 7bc:	88 23       	and	r24, r24
 7be:	11 f0       	breq	.+4      	; 0x7c4 <__floatsisf+0x48>
 7c0:	96 e9       	ldi	r25, 0x96	; 150
 7c2:	11 c0       	rjmp	.+34     	; 0x7e6 <__floatsisf+0x6a>
 7c4:	77 23       	and	r23, r23
 7c6:	21 f0       	breq	.+8      	; 0x7d0 <__floatsisf+0x54>
 7c8:	9e e8       	ldi	r25, 0x8E	; 142
 7ca:	87 2f       	mov	r24, r23
 7cc:	76 2f       	mov	r23, r22
 7ce:	05 c0       	rjmp	.+10     	; 0x7da <__floatsisf+0x5e>
 7d0:	66 23       	and	r22, r22
 7d2:	71 f0       	breq	.+28     	; 0x7f0 <__floatsisf+0x74>
 7d4:	96 e8       	ldi	r25, 0x86	; 134
 7d6:	86 2f       	mov	r24, r22
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	2a f0       	brmi	.+10     	; 0x7e8 <__floatsisf+0x6c>
 7de:	9a 95       	dec	r25
 7e0:	66 0f       	add	r22, r22
 7e2:	77 1f       	adc	r23, r23
 7e4:	88 1f       	adc	r24, r24
 7e6:	da f7       	brpl	.-10     	; 0x7de <__floatsisf+0x62>
 7e8:	88 0f       	add	r24, r24
 7ea:	96 95       	lsr	r25
 7ec:	87 95       	ror	r24
 7ee:	97 f9       	bld	r25, 7
 7f0:	08 95       	ret

000007f2 <__fp_inf>:
 7f2:	97 f9       	bld	r25, 7
 7f4:	9f 67       	ori	r25, 0x7F	; 127
 7f6:	80 e8       	ldi	r24, 0x80	; 128
 7f8:	70 e0       	ldi	r23, 0x00	; 0
 7fa:	60 e0       	ldi	r22, 0x00	; 0
 7fc:	08 95       	ret

000007fe <__fp_nan>:
 7fe:	9f ef       	ldi	r25, 0xFF	; 255
 800:	80 ec       	ldi	r24, 0xC0	; 192
 802:	08 95       	ret

00000804 <__fp_pscA>:
 804:	00 24       	eor	r0, r0
 806:	0a 94       	dec	r0
 808:	16 16       	cp	r1, r22
 80a:	17 06       	cpc	r1, r23
 80c:	18 06       	cpc	r1, r24
 80e:	09 06       	cpc	r0, r25
 810:	08 95       	ret

00000812 <__fp_pscB>:
 812:	00 24       	eor	r0, r0
 814:	0a 94       	dec	r0
 816:	12 16       	cp	r1, r18
 818:	13 06       	cpc	r1, r19
 81a:	14 06       	cpc	r1, r20
 81c:	05 06       	cpc	r0, r21
 81e:	08 95       	ret

00000820 <__fp_round>:
 820:	09 2e       	mov	r0, r25
 822:	03 94       	inc	r0
 824:	00 0c       	add	r0, r0
 826:	11 f4       	brne	.+4      	; 0x82c <__fp_round+0xc>
 828:	88 23       	and	r24, r24
 82a:	52 f0       	brmi	.+20     	; 0x840 <__fp_round+0x20>
 82c:	bb 0f       	add	r27, r27
 82e:	40 f4       	brcc	.+16     	; 0x840 <__fp_round+0x20>
 830:	bf 2b       	or	r27, r31
 832:	11 f4       	brne	.+4      	; 0x838 <__fp_round+0x18>
 834:	60 ff       	sbrs	r22, 0
 836:	04 c0       	rjmp	.+8      	; 0x840 <__fp_round+0x20>
 838:	6f 5f       	subi	r22, 0xFF	; 255
 83a:	7f 4f       	sbci	r23, 0xFF	; 255
 83c:	8f 4f       	sbci	r24, 0xFF	; 255
 83e:	9f 4f       	sbci	r25, 0xFF	; 255
 840:	08 95       	ret

00000842 <__fp_split3>:
 842:	57 fd       	sbrc	r21, 7
 844:	90 58       	subi	r25, 0x80	; 128
 846:	44 0f       	add	r20, r20
 848:	55 1f       	adc	r21, r21
 84a:	59 f0       	breq	.+22     	; 0x862 <__fp_splitA+0x10>
 84c:	5f 3f       	cpi	r21, 0xFF	; 255
 84e:	71 f0       	breq	.+28     	; 0x86c <__fp_splitA+0x1a>
 850:	47 95       	ror	r20

00000852 <__fp_splitA>:
 852:	88 0f       	add	r24, r24
 854:	97 fb       	bst	r25, 7
 856:	99 1f       	adc	r25, r25
 858:	61 f0       	breq	.+24     	; 0x872 <__fp_splitA+0x20>
 85a:	9f 3f       	cpi	r25, 0xFF	; 255
 85c:	79 f0       	breq	.+30     	; 0x87c <__fp_splitA+0x2a>
 85e:	87 95       	ror	r24
 860:	08 95       	ret
 862:	12 16       	cp	r1, r18
 864:	13 06       	cpc	r1, r19
 866:	14 06       	cpc	r1, r20
 868:	55 1f       	adc	r21, r21
 86a:	f2 cf       	rjmp	.-28     	; 0x850 <__fp_split3+0xe>
 86c:	46 95       	lsr	r20
 86e:	f1 df       	rcall	.-30     	; 0x852 <__fp_splitA>
 870:	08 c0       	rjmp	.+16     	; 0x882 <__fp_splitA+0x30>
 872:	16 16       	cp	r1, r22
 874:	17 06       	cpc	r1, r23
 876:	18 06       	cpc	r1, r24
 878:	99 1f       	adc	r25, r25
 87a:	f1 cf       	rjmp	.-30     	; 0x85e <__fp_splitA+0xc>
 87c:	86 95       	lsr	r24
 87e:	71 05       	cpc	r23, r1
 880:	61 05       	cpc	r22, r1
 882:	08 94       	sec
 884:	08 95       	ret

00000886 <__fp_zero>:
 886:	e8 94       	clt

00000888 <__fp_szero>:
 888:	bb 27       	eor	r27, r27
 88a:	66 27       	eor	r22, r22
 88c:	77 27       	eor	r23, r23
 88e:	cb 01       	movw	r24, r22
 890:	97 f9       	bld	r25, 7
 892:	08 95       	ret

00000894 <__mulsf3>:
 894:	0b d0       	rcall	.+22     	; 0x8ac <__mulsf3x>
 896:	c4 cf       	rjmp	.-120    	; 0x820 <__fp_round>
 898:	b5 df       	rcall	.-150    	; 0x804 <__fp_pscA>
 89a:	28 f0       	brcs	.+10     	; 0x8a6 <__mulsf3+0x12>
 89c:	ba df       	rcall	.-140    	; 0x812 <__fp_pscB>
 89e:	18 f0       	brcs	.+6      	; 0x8a6 <__mulsf3+0x12>
 8a0:	95 23       	and	r25, r21
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <__mulsf3+0x12>
 8a4:	a6 cf       	rjmp	.-180    	; 0x7f2 <__fp_inf>
 8a6:	ab cf       	rjmp	.-170    	; 0x7fe <__fp_nan>
 8a8:	11 24       	eor	r1, r1
 8aa:	ee cf       	rjmp	.-36     	; 0x888 <__fp_szero>

000008ac <__mulsf3x>:
 8ac:	ca df       	rcall	.-108    	; 0x842 <__fp_split3>
 8ae:	a0 f3       	brcs	.-24     	; 0x898 <__mulsf3+0x4>

000008b0 <__mulsf3_pse>:
 8b0:	95 9f       	mul	r25, r21
 8b2:	d1 f3       	breq	.-12     	; 0x8a8 <__mulsf3+0x14>
 8b4:	95 0f       	add	r25, r21
 8b6:	50 e0       	ldi	r21, 0x00	; 0
 8b8:	55 1f       	adc	r21, r21
 8ba:	62 9f       	mul	r22, r18
 8bc:	f0 01       	movw	r30, r0
 8be:	72 9f       	mul	r23, r18
 8c0:	bb 27       	eor	r27, r27
 8c2:	f0 0d       	add	r31, r0
 8c4:	b1 1d       	adc	r27, r1
 8c6:	63 9f       	mul	r22, r19
 8c8:	aa 27       	eor	r26, r26
 8ca:	f0 0d       	add	r31, r0
 8cc:	b1 1d       	adc	r27, r1
 8ce:	aa 1f       	adc	r26, r26
 8d0:	64 9f       	mul	r22, r20
 8d2:	66 27       	eor	r22, r22
 8d4:	b0 0d       	add	r27, r0
 8d6:	a1 1d       	adc	r26, r1
 8d8:	66 1f       	adc	r22, r22
 8da:	82 9f       	mul	r24, r18
 8dc:	22 27       	eor	r18, r18
 8de:	b0 0d       	add	r27, r0
 8e0:	a1 1d       	adc	r26, r1
 8e2:	62 1f       	adc	r22, r18
 8e4:	73 9f       	mul	r23, r19
 8e6:	b0 0d       	add	r27, r0
 8e8:	a1 1d       	adc	r26, r1
 8ea:	62 1f       	adc	r22, r18
 8ec:	83 9f       	mul	r24, r19
 8ee:	a0 0d       	add	r26, r0
 8f0:	61 1d       	adc	r22, r1
 8f2:	22 1f       	adc	r18, r18
 8f4:	74 9f       	mul	r23, r20
 8f6:	33 27       	eor	r19, r19
 8f8:	a0 0d       	add	r26, r0
 8fa:	61 1d       	adc	r22, r1
 8fc:	23 1f       	adc	r18, r19
 8fe:	84 9f       	mul	r24, r20
 900:	60 0d       	add	r22, r0
 902:	21 1d       	adc	r18, r1
 904:	82 2f       	mov	r24, r18
 906:	76 2f       	mov	r23, r22
 908:	6a 2f       	mov	r22, r26
 90a:	11 24       	eor	r1, r1
 90c:	9f 57       	subi	r25, 0x7F	; 127
 90e:	50 40       	sbci	r21, 0x00	; 0
 910:	8a f0       	brmi	.+34     	; 0x934 <__mulsf3_pse+0x84>
 912:	e1 f0       	breq	.+56     	; 0x94c <__mulsf3_pse+0x9c>
 914:	88 23       	and	r24, r24
 916:	4a f0       	brmi	.+18     	; 0x92a <__mulsf3_pse+0x7a>
 918:	ee 0f       	add	r30, r30
 91a:	ff 1f       	adc	r31, r31
 91c:	bb 1f       	adc	r27, r27
 91e:	66 1f       	adc	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	91 50       	subi	r25, 0x01	; 1
 926:	50 40       	sbci	r21, 0x00	; 0
 928:	a9 f7       	brne	.-22     	; 0x914 <__mulsf3_pse+0x64>
 92a:	9e 3f       	cpi	r25, 0xFE	; 254
 92c:	51 05       	cpc	r21, r1
 92e:	70 f0       	brcs	.+28     	; 0x94c <__mulsf3_pse+0x9c>
 930:	60 cf       	rjmp	.-320    	; 0x7f2 <__fp_inf>
 932:	aa cf       	rjmp	.-172    	; 0x888 <__fp_szero>
 934:	5f 3f       	cpi	r21, 0xFF	; 255
 936:	ec f3       	brlt	.-6      	; 0x932 <__mulsf3_pse+0x82>
 938:	98 3e       	cpi	r25, 0xE8	; 232
 93a:	dc f3       	brlt	.-10     	; 0x932 <__mulsf3_pse+0x82>
 93c:	86 95       	lsr	r24
 93e:	77 95       	ror	r23
 940:	67 95       	ror	r22
 942:	b7 95       	ror	r27
 944:	f7 95       	ror	r31
 946:	e7 95       	ror	r30
 948:	9f 5f       	subi	r25, 0xFF	; 255
 94a:	c1 f7       	brne	.-16     	; 0x93c <__mulsf3_pse+0x8c>
 94c:	fe 2b       	or	r31, r30
 94e:	88 0f       	add	r24, r24
 950:	91 1d       	adc	r25, r1
 952:	96 95       	lsr	r25
 954:	87 95       	ror	r24
 956:	97 f9       	bld	r25, 7
 958:	08 95       	ret

0000095a <__udivmodhi4>:
 95a:	aa 1b       	sub	r26, r26
 95c:	bb 1b       	sub	r27, r27
 95e:	51 e1       	ldi	r21, 0x11	; 17
 960:	07 c0       	rjmp	.+14     	; 0x970 <__udivmodhi4_ep>

00000962 <__udivmodhi4_loop>:
 962:	aa 1f       	adc	r26, r26
 964:	bb 1f       	adc	r27, r27
 966:	a6 17       	cp	r26, r22
 968:	b7 07       	cpc	r27, r23
 96a:	10 f0       	brcs	.+4      	; 0x970 <__udivmodhi4_ep>
 96c:	a6 1b       	sub	r26, r22
 96e:	b7 0b       	sbc	r27, r23

00000970 <__udivmodhi4_ep>:
 970:	88 1f       	adc	r24, r24
 972:	99 1f       	adc	r25, r25
 974:	5a 95       	dec	r21
 976:	a9 f7       	brne	.-22     	; 0x962 <__udivmodhi4_loop>
 978:	80 95       	com	r24
 97a:	90 95       	com	r25
 97c:	bc 01       	movw	r22, r24
 97e:	cd 01       	movw	r24, r26
 980:	08 95       	ret

00000982 <__divmodsi4>:
 982:	97 fb       	bst	r25, 7
 984:	09 2e       	mov	r0, r25
 986:	05 26       	eor	r0, r21
 988:	0e d0       	rcall	.+28     	; 0x9a6 <__divmodsi4_neg1>
 98a:	57 fd       	sbrc	r21, 7
 98c:	04 d0       	rcall	.+8      	; 0x996 <__divmodsi4_neg2>
 98e:	14 d0       	rcall	.+40     	; 0x9b8 <__udivmodsi4>
 990:	0a d0       	rcall	.+20     	; 0x9a6 <__divmodsi4_neg1>
 992:	00 1c       	adc	r0, r0
 994:	38 f4       	brcc	.+14     	; 0x9a4 <__divmodsi4_exit>

00000996 <__divmodsi4_neg2>:
 996:	50 95       	com	r21
 998:	40 95       	com	r20
 99a:	30 95       	com	r19
 99c:	21 95       	neg	r18
 99e:	3f 4f       	sbci	r19, 0xFF	; 255
 9a0:	4f 4f       	sbci	r20, 0xFF	; 255
 9a2:	5f 4f       	sbci	r21, 0xFF	; 255

000009a4 <__divmodsi4_exit>:
 9a4:	08 95       	ret

000009a6 <__divmodsi4_neg1>:
 9a6:	f6 f7       	brtc	.-4      	; 0x9a4 <__divmodsi4_exit>
 9a8:	90 95       	com	r25
 9aa:	80 95       	com	r24
 9ac:	70 95       	com	r23
 9ae:	61 95       	neg	r22
 9b0:	7f 4f       	sbci	r23, 0xFF	; 255
 9b2:	8f 4f       	sbci	r24, 0xFF	; 255
 9b4:	9f 4f       	sbci	r25, 0xFF	; 255
 9b6:	08 95       	ret

000009b8 <__udivmodsi4>:
 9b8:	a1 e2       	ldi	r26, 0x21	; 33
 9ba:	1a 2e       	mov	r1, r26
 9bc:	aa 1b       	sub	r26, r26
 9be:	bb 1b       	sub	r27, r27
 9c0:	fd 01       	movw	r30, r26
 9c2:	0d c0       	rjmp	.+26     	; 0x9de <__udivmodsi4_ep>

000009c4 <__udivmodsi4_loop>:
 9c4:	aa 1f       	adc	r26, r26
 9c6:	bb 1f       	adc	r27, r27
 9c8:	ee 1f       	adc	r30, r30
 9ca:	ff 1f       	adc	r31, r31
 9cc:	a2 17       	cp	r26, r18
 9ce:	b3 07       	cpc	r27, r19
 9d0:	e4 07       	cpc	r30, r20
 9d2:	f5 07       	cpc	r31, r21
 9d4:	20 f0       	brcs	.+8      	; 0x9de <__udivmodsi4_ep>
 9d6:	a2 1b       	sub	r26, r18
 9d8:	b3 0b       	sbc	r27, r19
 9da:	e4 0b       	sbc	r30, r20
 9dc:	f5 0b       	sbc	r31, r21

000009de <__udivmodsi4_ep>:
 9de:	66 1f       	adc	r22, r22
 9e0:	77 1f       	adc	r23, r23
 9e2:	88 1f       	adc	r24, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	1a 94       	dec	r1
 9e8:	69 f7       	brne	.-38     	; 0x9c4 <__udivmodsi4_loop>
 9ea:	60 95       	com	r22
 9ec:	70 95       	com	r23
 9ee:	80 95       	com	r24
 9f0:	90 95       	com	r25
 9f2:	9b 01       	movw	r18, r22
 9f4:	ac 01       	movw	r20, r24
 9f6:	bd 01       	movw	r22, r26
 9f8:	cf 01       	movw	r24, r30
 9fa:	08 95       	ret

000009fc <_exit>:
 9fc:	f8 94       	cli

000009fe <__stop_program>:
 9fe:	ff cf       	rjmp	.-2      	; 0x9fe <__stop_program>
