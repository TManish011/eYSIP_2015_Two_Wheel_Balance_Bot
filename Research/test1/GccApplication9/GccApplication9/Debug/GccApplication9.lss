
GccApplication9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000010a6  0000113a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800206  00800206  00001140  2**0
                  ALLOC
  3 .stab         00002658  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000082e  00000000  00000000  00003798  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00003fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001144  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002b8  00000000  00000000  000051ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000687  00000000  00000000  00005464  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  00005aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fb  00000000  00000000  00005e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c4  00000000  00000000  00006287  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      68:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      6c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      70:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      74:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      78:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      80:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      84:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      88:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      8c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      90:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      94:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      98:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      9c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      ac:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_45>
      b8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      bc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      cc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      dc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	sts	0x9b, r22
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	12 e0       	ldi	r17, 0x02	; 2
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	e6 ea       	ldi	r30, 0xA6	; 166
     12a:	f0 e1       	ldi	r31, 0x10	; 16
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	0b bf       	out	0x3b, r16	; 59
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
     132:	07 90       	elpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a6 30       	cpi	r26, 0x06	; 6
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
     13c:	12 e0       	ldi	r17, 0x02	; 2
     13e:	a6 e0       	ldi	r26, 0x06	; 6
     140:	b2 e0       	ldi	r27, 0x02	; 2
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	a5 34       	cpi	r26, 0x45	; 69
     148:	b1 07       	cpc	r27, r17
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <main>
     150:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <timer4_init>:
volatile uint8_t tot_overflow;


void timer4_init(void)
{
	tot_overflow=0;
     158:	10 92 2c 02 	sts	0x022C, r1
	TCCR4B = 0x00; //stop
     15c:	e1 ea       	ldi	r30, 0xA1	; 161
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	10 82       	st	Z, r1
	TCNT4H = 0xC6; //Counter higher 8 bit value
     162:	86 ec       	ldi	r24, 0xC6	; 198
     164:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x66; //Counter lower 8 bit value
     168:	86 e6       	ldi	r24, 0x66	; 102
     16a:	80 93 a4 00 	sts	0x00A4, r24
	OCR4AH = 0x00; //Output compare Register (OCR)- Not used
     16e:	10 92 a9 00 	sts	0x00A9, r1
	OCR4AL = 0x00; //Output compare Register (OCR)- Not used
     172:	10 92 a8 00 	sts	0x00A8, r1
	OCR4BH = 0x00; //Output compare Register (OCR)- Not used
     176:	10 92 ab 00 	sts	0x00AB, r1
	OCR4BL = 0x00; //Output compare Register (OCR)- Not used
     17a:	10 92 aa 00 	sts	0x00AA, r1
	OCR4CH = 0x00; //Output compare Register (OCR)- Not used
     17e:	10 92 ad 00 	sts	0x00AD, r1
	OCR4CL = 0x00; //Output compare Register (OCR)- Not used
     182:	10 92 ac 00 	sts	0x00AC, r1
	ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
     186:	10 92 a7 00 	sts	0x00A7, r1
	ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
     18a:	10 92 a6 00 	sts	0x00A6, r1
	TCCR4A = 0x00;
     18e:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4C = 0x00;
     192:	10 92 a2 00 	sts	0x00A2, r1
	TCCR4B = 0x01; //start Timer
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	80 83       	st	Z, r24
}
     19a:	08 95       	ret

0000019c <__vector_45>:

// TIMER4 overflow interrupt service routine
// called whenever TCNT4 overflows
ISR(TIMER4_OVF_vect)
{
     19c:	1f 92       	push	r1
     19e:	0f 92       	push	r0
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	0f 92       	push	r0
     1a4:	11 24       	eor	r1, r1
     1a6:	8f 93       	push	r24
	// keep a track of number of overflows
	tot_overflow++;
     1a8:	80 91 2c 02 	lds	r24, 0x022C
     1ac:	8f 5f       	subi	r24, 0xFF	; 255
     1ae:	80 93 2c 02 	sts	0x022C, r24
	//TIMER4 has overflowed
	TCNT4H = 0xC6; //reload counter high value
     1b2:	86 ec       	ldi	r24, 0xC6	; 198
     1b4:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x66; //reload counter low value
     1b8:	86 e6       	ldi	r24, 0x66	; 102
     1ba:	80 93 a4 00 	sts	0x00A4, r24
}
     1be:	8f 91       	pop	r24
     1c0:	0f 90       	pop	r0
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	0f 90       	pop	r0
     1c6:	1f 90       	pop	r1
     1c8:	18 95       	reti

000001ca <start_timer4>:

void start_timer4(void)
{
	cli(); //Clears the global interrupts
     1ca:	f8 94       	cli
	timer4_init();
     1cc:	0e 94 ac 00 	call	0x158	; 0x158 <timer4_init>
	TIMSK4 = 0x01; //timer4 overflow interrupt enable
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	80 93 72 00 	sts	0x0072, r24
	sei();   //Enables the global interrupts
     1d6:	78 94       	sei

}
     1d8:	08 95       	ret

000001da <millis>:

int millis(void)
{
     1da:	cf 92       	push	r12
     1dc:	df 92       	push	r13
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791.4)/14745.6);
     1e6:	c0 90 2c 02 	lds	r12, 0x022C
     1ea:	c0 91 a4 00 	lds	r28, 0x00A4
     1ee:	d0 91 a5 00 	lds	r29, 0x00A5
	start_timer4();
     1f2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>
}

int millis(void)
{
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791.4)/14745.6);
     1f6:	6c 2d       	mov	r22, r12
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__floatsisf>
     202:	6b 01       	movw	r12, r22
     204:	7c 01       	movw	r14, r24
     206:	be 01       	movw	r22, r28
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__floatunsisf>
     210:	26 e6       	ldi	r18, 0x66	; 102
     212:	37 e6       	ldi	r19, 0x67	; 103
     214:	46 e4       	ldi	r20, 0x46	; 70
     216:	57 e4       	ldi	r21, 0x47	; 71
     218:	0e 94 f7 05 	call	0xbee	; 0xbee <__subsf3>
     21c:	26 e6       	ldi	r18, 0x66	; 102
     21e:	36 e6       	ldi	r19, 0x66	; 102
     220:	46 e6       	ldi	r20, 0x66	; 102
     222:	56 e4       	ldi	r21, 0x46	; 70
     224:	0e 94 84 06 	call	0xd08	; 0xd08 <__divsf3>
     228:	9b 01       	movw	r18, r22
     22a:	ac 01       	movw	r20, r24
     22c:	c7 01       	movw	r24, r14
     22e:	b6 01       	movw	r22, r12
     230:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__addsf3>
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	4a e7       	ldi	r20, 0x7A	; 122
     23a:	54 e4       	ldi	r21, 0x44	; 68
     23c:	0e 94 d7 07 	call	0xfae	; 0xfae <__mulsf3>
     240:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fixsfsi>
	start_timer4();
	return time;

}
     244:	86 2f       	mov	r24, r22
     246:	97 2f       	mov	r25, r23
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	ff 90       	pop	r15
     24e:	ef 90       	pop	r14
     250:	df 90       	pop	r13
     252:	cf 90       	pop	r12
     254:	08 95       	ret

00000256 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     256:	86 e6       	ldi	r24, 0x66	; 102
     258:	9e e0       	ldi	r25, 0x0E	; 14
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_set_4bit+0x4>
     25e:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     260:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     262:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     264:	80 e3       	ldi	r24, 0x30	; 48
     266:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     268:	42 9a       	sbi	0x08, 2	; 8
     26a:	ef ef       	ldi	r30, 0xFF	; 255
     26c:	f7 e4       	ldi	r31, 0x47	; 71
     26e:	31 97       	sbiw	r30, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <lcd_set_4bit+0x18>
     272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_set_4bit+0x1e>
     274:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     276:	42 98       	cbi	0x08, 2	; 8
     278:	e6 e6       	ldi	r30, 0x66	; 102
     27a:	fe e0       	ldi	r31, 0x0E	; 14
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_set_4bit+0x26>
     280:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     282:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     284:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     286:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     288:	42 9a       	sbi	0x08, 2	; 8
     28a:	ef ef       	ldi	r30, 0xFF	; 255
     28c:	f7 e4       	ldi	r31, 0x47	; 71
     28e:	31 97       	sbiw	r30, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <lcd_set_4bit+0x38>
     292:	00 c0       	rjmp	.+0      	; 0x294 <lcd_set_4bit+0x3e>
     294:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     296:	42 98       	cbi	0x08, 2	; 8
     298:	e6 e6       	ldi	r30, 0x66	; 102
     29a:	fe e0       	ldi	r31, 0x0E	; 14
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x46>
     2a0:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2a2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2a4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     2a6:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2a8:	42 9a       	sbi	0x08, 2	; 8
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	97 e4       	ldi	r25, 0x47	; 71
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_set_4bit+0x58>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <lcd_set_4bit+0x5e>
     2b4:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2b6:	42 98       	cbi	0x08, 2	; 8
     2b8:	e6 e6       	ldi	r30, 0x66	; 102
     2ba:	fe e0       	ldi	r31, 0x0E	; 14
     2bc:	31 97       	sbiw	r30, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_set_4bit+0x66>
     2c0:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2c2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2c4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     2c6:	80 e2       	ldi	r24, 0x20	; 32
     2c8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2ca:	42 9a       	sbi	0x08, 2	; 8
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	97 e4       	ldi	r25, 0x47	; 71
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcd_set_4bit+0x7a>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <lcd_set_4bit+0x80>
     2d6:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2d8:	42 98       	cbi	0x08, 2	; 8
}
     2da:	08 95       	ret

000002dc <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     2dc:	98 b1       	in	r25, 0x08	; 8
     2de:	9f 70       	andi	r25, 0x0F	; 15
     2e0:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2e2:	98 b1       	in	r25, 0x08	; 8
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     2e4:	28 2f       	mov	r18, r24
     2e6:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2e8:	92 2b       	or	r25, r18
     2ea:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     2ec:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2ee:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2f0:	42 9a       	sbi	0x08, 2	; 8
     2f2:	ef ef       	ldi	r30, 0xFF	; 255
     2f4:	f7 e4       	ldi	r31, 0x47	; 71
     2f6:	31 97       	sbiw	r30, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_wr_command+0x1a>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcd_wr_command+0x20>
     2fc:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2fe:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     300:	98 b1       	in	r25, 0x08	; 8
     302:	9f 70       	andi	r25, 0x0F	; 15
     304:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     306:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     308:	82 95       	swap	r24
     30a:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     30c:	89 2b       	or	r24, r25
     30e:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     310:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     312:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     314:	42 9a       	sbi	0x08, 2	; 8
     316:	8f ef       	ldi	r24, 0xFF	; 255
     318:	97 e4       	ldi	r25, 0x47	; 71
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <lcd_wr_command+0x3e>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <lcd_wr_command+0x44>
     320:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     322:	42 98       	cbi	0x08, 2	; 8
}
     324:	08 95       	ret

00000326 <lcd_init>:
     326:	86 e6       	ldi	r24, 0x66	; 102
     328:	9e e0       	ldi	r25, 0x0E	; 14
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <lcd_init+0x4>
     32e:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     330:	88 e2       	ldi	r24, 0x28	; 40
     332:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     33c:	86 e0       	ldi	r24, 0x06	; 6
     33e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     342:	8e e0       	ldi	r24, 0x0E	; 14
     344:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     348:	80 e8       	ldi	r24, 0x80	; 128
     34a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_command>
}
     34e:	08 95       	ret

00000350 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     350:	98 b1       	in	r25, 0x08	; 8
     352:	9f 70       	andi	r25, 0x0F	; 15
     354:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     356:	98 b1       	in	r25, 0x08	; 8
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     358:	28 2f       	mov	r18, r24
     35a:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     35c:	92 2b       	or	r25, r18
     35e:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     360:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     362:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     364:	42 9a       	sbi	0x08, 2	; 8
     366:	ef ef       	ldi	r30, 0xFF	; 255
     368:	f7 e4       	ldi	r31, 0x47	; 71
     36a:	31 97       	sbiw	r30, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <lcd_wr_char+0x1a>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <lcd_wr_char+0x20>
     370:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     372:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     374:	98 b1       	in	r25, 0x08	; 8
     376:	9f 70       	andi	r25, 0x0F	; 15
     378:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     37a:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     37c:	82 95       	swap	r24
     37e:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     380:	89 2b       	or	r24, r25
     382:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     384:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     386:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     388:	42 9a       	sbi	0x08, 2	; 8
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	97 e4       	ldi	r25, 0x47	; 71
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <lcd_wr_char+0x3e>
     392:	00 c0       	rjmp	.+0      	; 0x394 <lcd_wr_char+0x44>
     394:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     396:	42 98       	cbi	0x08, 2	; 8
}
     398:	08 95       	ret

0000039a <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     39a:	80 e8       	ldi	r24, 0x80	; 128
     39c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_command>
}
     3a0:	08 95       	ret

000003a2 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	ec 01       	movw	r28, r24
	while(*str != '\0')
     3a8:	88 81       	ld	r24, Y
     3aa:	88 23       	and	r24, r24
     3ac:	31 f0       	breq	.+12     	; 0x3ba <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     3ae:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     3b0:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     3b4:	89 91       	ld	r24, Y+
     3b6:	88 23       	and	r24, r24
     3b8:	d9 f7       	brne	.-10     	; 0x3b0 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
     3c0:	82 30       	cpi	r24, 0x02	; 2
     3c2:	79 f0       	breq	.+30     	; 0x3e2 <lcd_cursor+0x22>
     3c4:	83 30       	cpi	r24, 0x03	; 3
     3c6:	18 f4       	brcc	.+6      	; 0x3ce <lcd_cursor+0xe>
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	c9 f4       	brne	.+50     	; 0x3fe <lcd_cursor+0x3e>
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <lcd_cursor+0x18>
     3ce:	83 30       	cpi	r24, 0x03	; 3
     3d0:	69 f0       	breq	.+26     	; 0x3ec <lcd_cursor+0x2c>
     3d2:	84 30       	cpi	r24, 0x04	; 4
     3d4:	a1 f4       	brne	.+40     	; 0x3fe <lcd_cursor+0x3e>
     3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     3d8:	86 2f       	mov	r24, r22
     3da:	81 58       	subi	r24, 0x81	; 129
     3dc:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_command>
     3e0:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     3e2:	86 2f       	mov	r24, r22
     3e4:	81 54       	subi	r24, 0x41	; 65
     3e6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_command>
     3ea:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     3ec:	86 2f       	mov	r24, r22
     3ee:	8d 56       	subi	r24, 0x6D	; 109
     3f0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_command>
     3f4:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     3f6:	86 2f       	mov	r24, r22
     3f8:	8d 52       	subi	r24, 0x2D	; 45
     3fa:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_command>
     3fe:	08 95       	ret

00000400 <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	8a 01       	movw	r16, r20
     40a:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     40c:	88 23       	and	r24, r24
     40e:	11 f0       	breq	.+4      	; 0x414 <lcd_print+0x14>
     410:	66 23       	and	r22, r22
     412:	19 f4       	brne	.+6      	; 0x41a <lcd_print+0x1a>
	{
		lcd_home();
     414:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_home>
     418:	02 c0       	rjmp	.+4      	; 0x41e <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     41a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     41e:	c5 30       	cpi	r28, 0x05	; 5
     420:	d1 05       	cpc	r29, r1
     422:	71 f4       	brne	.+28     	; 0x440 <lcd_print+0x40>
	{
		million=value/10000+48;
     424:	c8 01       	movw	r24, r16
     426:	60 e1       	ldi	r22, 0x10	; 16
     428:	77 e2       	ldi	r23, 0x27	; 39
     42a:	0e 94 3d 08 	call	0x107a	; 0x107a <__udivmodhi4>
     42e:	cb 01       	movw	r24, r22
     430:	c0 96       	adiw	r24, 0x30	; 48
     432:	90 93 27 02 	sts	0x0227, r25
     436:	80 93 26 02 	sts	0x0226, r24
		lcd_wr_char(million);
     43a:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_wr_char>
     43e:	03 c0       	rjmp	.+6      	; 0x446 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     440:	c4 30       	cpi	r28, 0x04	; 4
     442:	d1 05       	cpc	r29, r1
     444:	b9 f4       	brne	.+46     	; 0x474 <lcd_print+0x74>
	{
		temp = value/1000;
     446:	c8 01       	movw	r24, r16
     448:	68 ee       	ldi	r22, 0xE8	; 232
     44a:	73 e0       	ldi	r23, 0x03	; 3
     44c:	0e 94 3d 08 	call	0x107a	; 0x107a <__udivmodhi4>
     450:	cb 01       	movw	r24, r22
     452:	70 93 29 02 	sts	0x0229, r23
     456:	60 93 28 02 	sts	0x0228, r22
		thousand = temp%10 + 48;
     45a:	6a e0       	ldi	r22, 0x0A	; 10
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	0e 94 3d 08 	call	0x107a	; 0x107a <__udivmodhi4>
     462:	c0 96       	adiw	r24, 0x30	; 48
     464:	90 93 40 02 	sts	0x0240, r25
     468:	80 93 3f 02 	sts	0x023F, r24
		lcd_wr_char(thousand);
     46c:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_wr_char>
		flag=1;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	01 c0       	rjmp	.+2      	; 0x476 <lcd_print+0x76>
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     474:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     476:	c3 30       	cpi	r28, 0x03	; 3
     478:	d1 05       	cpc	r29, r1
     47a:	11 f0       	breq	.+4      	; 0x480 <lcd_print+0x80>
     47c:	81 30       	cpi	r24, 0x01	; 1
     47e:	b1 f4       	brne	.+44     	; 0x4ac <lcd_print+0xac>
	{
		temp = value/100;
     480:	c8 01       	movw	r24, r16
     482:	64 e6       	ldi	r22, 0x64	; 100
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	0e 94 3d 08 	call	0x107a	; 0x107a <__udivmodhi4>
     48a:	cb 01       	movw	r24, r22
     48c:	70 93 29 02 	sts	0x0229, r23
     490:	60 93 28 02 	sts	0x0228, r22
		hundred = temp%10 + 48;
     494:	6a e0       	ldi	r22, 0x0A	; 10
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	0e 94 3d 08 	call	0x107a	; 0x107a <__udivmodhi4>
     49c:	c0 96       	adiw	r24, 0x30	; 48
     49e:	90 93 38 02 	sts	0x0238, r25
     4a2:	80 93 37 02 	sts	0x0237, r24
		lcd_wr_char(hundred);
     4a6:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_wr_char>
		flag=1;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     4ac:	c2 30       	cpi	r28, 0x02	; 2
     4ae:	d1 05       	cpc	r29, r1
     4b0:	11 f0       	breq	.+4      	; 0x4b6 <lcd_print+0xb6>
     4b2:	81 30       	cpi	r24, 0x01	; 1
     4b4:	b1 f4       	brne	.+44     	; 0x4e2 <lcd_print+0xe2>
	{
		temp = value/10;
     4b6:	2a e0       	ldi	r18, 0x0A	; 10
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	c8 01       	movw	r24, r16
     4bc:	b9 01       	movw	r22, r18
     4be:	0e 94 3d 08 	call	0x107a	; 0x107a <__udivmodhi4>
     4c2:	cb 01       	movw	r24, r22
     4c4:	70 93 29 02 	sts	0x0229, r23
     4c8:	60 93 28 02 	sts	0x0228, r22
		tens = temp%10 + 48;
     4cc:	b9 01       	movw	r22, r18
     4ce:	0e 94 3d 08 	call	0x107a	; 0x107a <__udivmodhi4>
     4d2:	c0 96       	adiw	r24, 0x30	; 48
     4d4:	90 93 32 02 	sts	0x0232, r25
     4d8:	80 93 31 02 	sts	0x0231, r24
		lcd_wr_char(tens);
     4dc:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_wr_char>
		flag=1;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     4e2:	c1 30       	cpi	r28, 0x01	; 1
     4e4:	d1 05       	cpc	r29, r1
     4e6:	11 f0       	breq	.+4      	; 0x4ec <lcd_print+0xec>
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	61 f4       	brne	.+24     	; 0x504 <lcd_print+0x104>
	{
		unit = value%10 + 48;
     4ec:	c8 01       	movw	r24, r16
     4ee:	6a e0       	ldi	r22, 0x0A	; 10
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	0e 94 3d 08 	call	0x107a	; 0x107a <__udivmodhi4>
     4f6:	c0 96       	adiw	r24, 0x30	; 48
     4f8:	90 93 3e 02 	sts	0x023E, r25
     4fc:	80 93 3d 02 	sts	0x023D, r24
		lcd_wr_char(unit);
     500:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_wr_char>
	}
	if(digits>5)
     504:	c6 30       	cpi	r28, 0x06	; 6
     506:	d1 05       	cpc	r29, r1
     508:	1c f0       	brlt	.+6      	; 0x510 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     50a:	85 e4       	ldi	r24, 0x45	; 69
     50c:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_wr_char>
	}
}
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	08 95       	ret

0000051a <display_clear>:
	

void display_clear(void)
{
	lcd_wr_command(0x01);
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_command>
}	
     520:	08 95       	ret

00000522 <lcd_port_config>:

//------------------------------------------------------------------------------
//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;      //all the LCD pin's direction set as output
     522:	87 b1       	in	r24, 0x07	; 7
     524:	87 6f       	ori	r24, 0xF7	; 247
     526:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;    // all the LCD pins are set to logic 0 except PORTC 7
     528:	88 b1       	in	r24, 0x08	; 8
     52a:	80 78       	andi	r24, 0x80	; 128
     52c:	88 b9       	out	0x08, r24	; 8
}
     52e:	08 95       	ret

00000530 <twi_init>:

//TWI initialize
// bit rate:72
void twi_init(void)
{
 TWCR = 0x00;   //disable twi
     530:	ec eb       	ldi	r30, 0xBC	; 188
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	10 82       	st	Z, r1
 TWBR = 0x10; //set bit rate
     536:	80 e1       	ldi	r24, 0x10	; 16
     538:	80 93 b8 00 	sts	0x00B8, r24
 TWSR = 0x00; //set prescale
     53c:	10 92 b9 00 	sts	0x00B9, r1
 TWAR = 0x00; //set slave address
     540:	10 92 ba 00 	sts	0x00BA, r1
 TWCR = 0x04; //enable twi
     544:	84 e0       	ldi	r24, 0x04	; 4
     546:	80 83       	st	Z, r24
}
     548:	08 95       	ret

0000054a <write_byte>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
     54a:	94 ea       	ldi	r25, 0xA4	; 164
     54c:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     550:	ec eb       	ldi	r30, 0xBC	; 188
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	90 81       	ld	r25, Z
     556:	99 23       	and	r25, r25
     558:	ec f7       	brge	.-6      	; 0x554 <write_byte+0xa>
     55a:	ef ef       	ldi	r30, 0xFF	; 255
     55c:	ff e8       	ldi	r31, 0x8F	; 143
     55e:	31 97       	sbiw	r30, 0x01	; 1
     560:	f1 f7       	brne	.-4      	; 0x55e <write_byte+0x14>
     562:	00 c0       	rjmp	.+0      	; 0x564 <write_byte+0x1a>
     564:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLA_W;                                     // load SLA_W into TWDR Register
     566:	96 ea       	ldi	r25, 0xA6	; 166
     568:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     56c:	94 e8       	ldi	r25, 0x84	; 132
     56e:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     572:	ec eb       	ldi	r30, 0xBC	; 188
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	90 81       	ld	r25, Z
     578:	99 23       	and	r25, r25
     57a:	ec f7       	brge	.-6      	; 0x576 <write_byte+0x2c>
     57c:	ef ef       	ldi	r30, 0xFF	; 255
     57e:	ff e8       	ldi	r31, 0x8F	; 143
     580:	31 97       	sbiw	r30, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <write_byte+0x36>
     584:	00 c0       	rjmp	.+0      	; 0x586 <write_byte+0x3c>
     586:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
     588:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
     58c:	94 e8       	ldi	r25, 0x84	; 132
     58e:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     592:	ec eb       	ldi	r30, 0xBC	; 188
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	90 81       	ld	r25, Z
     598:	99 23       	and	r25, r25
     59a:	ec f7       	brge	.-6      	; 0x596 <write_byte+0x4c>
     59c:	ef ef       	ldi	r30, 0xFF	; 255
     59e:	ff e8       	ldi	r31, 0x8F	; 143
     5a0:	31 97       	sbiw	r30, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <write_byte+0x56>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <write_byte+0x5c>
     5a6:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
     5a8:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
     5ac:	84 e8       	ldi	r24, 0x84	; 132
     5ae:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5b2:	ec eb       	ldi	r30, 0xBC	; 188
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	88 23       	and	r24, r24
     5ba:	ec f7       	brge	.-6      	; 0x5b6 <write_byte+0x6c>
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	9f e8       	ldi	r25, 0x8F	; 143
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <write_byte+0x76>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <write_byte+0x7c>
     5c6:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
     5c8:	84 e9       	ldi	r24, 0x94	; 148
     5ca:	80 93 bc 00 	sts	0x00BC, r24
}
     5ce:	08 95       	ret

000005d0 <read_byte>:
unsigned char read_byte(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
     5d0:	94 ea       	ldi	r25, 0xA4	; 164
     5d2:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5d6:	ec eb       	ldi	r30, 0xBC	; 188
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	90 81       	ld	r25, Z
     5dc:	99 23       	and	r25, r25
     5de:	ec f7       	brge	.-6      	; 0x5da <read_byte+0xa>

 

 TWDR = SLA_W;									   // load SLA_W into TWDR Register
     5e0:	96 ea       	ldi	r25, 0xA6	; 166
     5e2:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     5e6:	94 e8       	ldi	r25, 0x84	; 132
     5e8:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5ec:	ec eb       	ldi	r30, 0xBC	; 188
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	90 81       	ld	r25, Z
     5f2:	99 23       	and	r25, r25
     5f4:	ec f7       	brge	.-6      	; 0x5f0 <read_byte+0x20>

 TWDR = address;                                   // send address of register byte want to access register
     5f6:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     5fa:	84 e8       	ldi	r24, 0x84	; 132
     5fc:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     600:	ec eb       	ldi	r30, 0xBC	; 188
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	88 23       	and	r24, r24
     608:	ec f7       	brge	.-6      	; 0x604 <read_byte+0x34>
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
     60a:	84 ea       	ldi	r24, 0xA4	; 164
     60c:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     610:	ec eb       	ldi	r30, 0xBC	; 188
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	88 23       	and	r24, r24
     618:	ec f7       	brge	.-6      	; 0x614 <read_byte+0x44>


 
 TWDR = SLA_R;									   // load SLA_R into TWDR Register
     61a:	87 ea       	ldi	r24, 0xA7	; 167
     61c:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     620:	84 e8       	ldi	r24, 0x84	; 132
     622:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     626:	ec eb       	ldi	r30, 0xBC	; 188
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	88 23       	and	r24, r24
     62e:	ec f7       	brge	.-6      	; 0x62a <read_byte+0x5a>
 
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
     630:	84 e8       	ldi	r24, 0x84	; 132
     632:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     636:	ec eb       	ldi	r30, 0xBC	; 188
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	80 81       	ld	r24, Z
     63c:	88 23       	and	r24, r24
     63e:	ec f7       	brge	.-6      	; 0x63a <read_byte+0x6a>
 rtc_recv_data = TWDR;
     640:	eb eb       	ldi	r30, 0xBB	; 187
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	80 81       	ld	r24, Z
 
 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
     646:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
     648:	94 e8       	ldi	r25, 0x84	; 132
     64a:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     64e:	ec eb       	ldi	r30, 0xBC	; 188
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	90 81       	ld	r25, Z
     654:	99 23       	and	r25, r25
     656:	ec f7       	brge	.-6      	; 0x652 <read_byte+0x82>
  
 return(rtc_recv_data);                            // return the read value to called function
}
     658:	08 95       	ret

0000065a <init_devices>:


// initialise the devices 
void init_devices()
{
 cli();              // disable all interrupts 
     65a:	f8 94       	cli
 lcd_port_config();  // configure the LCD port 
     65c:	0e 94 91 02 	call	0x522	; 0x522 <lcd_port_config>
 lcd_set_4bit();
     660:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_set_4bit>
 lcd_init();
     664:	0e 94 93 01 	call	0x326	; 0x326 <lcd_init>
 twi_init();         // configur the I2cC, i.e TWI module 
     668:	0e 94 98 02 	call	0x530	; 0x530 <twi_init>
 sei();              // re-enable interrupts
     66c:	78 94       	sei
 //all peripherals are now initialized
}
     66e:	08 95       	ret

00000670 <pr_int>:

void pr_int(int a,int b,int c,int d) /* get negative values*/
{
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	c8 2f       	mov	r28, r24
     67e:	d6 2f       	mov	r29, r22
     680:	8a 01       	movw	r16, r20
     682:	79 01       	movw	r14, r18
	if (c<0)
     684:	55 23       	and	r21, r21
     686:	a4 f4       	brge	.+40     	; 0x6b0 <pr_int+0x40>
	{
		lcd_cursor(a,b);
     688:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <lcd_cursor>
		lcd_string("-");
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd_string>
		lcd_print(a,b+1,abs(c),d);
     694:	6d 2f       	mov	r22, r29
     696:	6f 5f       	subi	r22, 0xFF	; 255
     698:	a8 01       	movw	r20, r16
     69a:	11 23       	and	r17, r17
     69c:	24 f4       	brge	.+8      	; 0x6a6 <pr_int+0x36>
     69e:	44 27       	eor	r20, r20
     6a0:	55 27       	eor	r21, r21
     6a2:	40 1b       	sub	r20, r16
     6a4:	51 0b       	sbc	r21, r17
     6a6:	8c 2f       	mov	r24, r28
     6a8:	97 01       	movw	r18, r14
     6aa:	0e 94 00 02 	call	0x400	; 0x400 <lcd_print>
     6ae:	0d c0       	rjmp	.+26     	; 0x6ca <pr_int+0x5a>
	} 
	else
	{
		lcd_cursor(a,b);
     6b0:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <lcd_cursor>
		lcd_string("+");
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd_string>
		lcd_print(a,b+1,c,d);
     6bc:	6d 2f       	mov	r22, r29
     6be:	6f 5f       	subi	r22, 0xFF	; 255
     6c0:	8c 2f       	mov	r24, r28
     6c2:	a8 01       	movw	r20, r16
     6c4:	97 01       	movw	r18, r14
     6c6:	0e 94 00 02 	call	0x400	; 0x400 <lcd_print>
	}
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	08 95       	ret

000006d8 <sign>:
		return (n-65536);
	}
	else
		return n;
		
}
     6d8:	08 95       	ret

000006da <init_adxl>:
// Main Programme start here.
//-------------------------------------------------------------------------------
void init_adxl(void)
{   
 
 init_devices();
     6da:	0e 94 2d 03 	call	0x65a	; 0x65a <init_devices>

	write_byte(0x0,0x2D);
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	6d e2       	ldi	r22, 0x2D	; 45
     6e2:	0e 94 a5 02 	call	0x54a	; 0x54a <write_byte>
	write_byte(0x8,0x2D);
     6e6:	88 e0       	ldi	r24, 0x08	; 8
     6e8:	6d e2       	ldi	r22, 0x2D	; 45
     6ea:	0e 94 a5 02 	call	0x54a	; 0x54a <write_byte>
}
     6ee:	08 95       	ret

000006f0 <acc_angle>:

int acc_angle(void)
{
     6f0:	cf 92       	push	r12
     6f2:	df 92       	push	r13
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
		int x_acc,y_acc,z_acc;
		//long x,y,z;
		float angle;
 
	  
	   x_byte1 = read_byte(X1);
     700:	82 e3       	ldi	r24, 0x32	; 50
     702:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read_byte>
	   //x_byte1=(x_byte1*1000)/256;
	   //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte(X2);
     706:	83 e3       	ldi	r24, 0x33	; 51
     708:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read_byte>
	   //lcd_print(2,1,abs(x_byte2),3);
	   
	   y_byte1 = read_byte(Y1);
     70c:	84 e3       	ldi	r24, 0x34	; 52
     70e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read_byte>
     712:	08 2f       	mov	r16, r24
	   //lcd_print(1,6,y_byte1,3);
	   
	   y_byte2 = read_byte(Y2);
     714:	85 e3       	ldi	r24, 0x35	; 53
     716:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read_byte>
     71a:	d8 2f       	mov	r29, r24
	   //lcd_print(2,6,y_byte2,3);
	   
	   z_byte1 = read_byte(Z1);
     71c:	86 e3       	ldi	r24, 0x36	; 54
     71e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read_byte>
     722:	c8 2f       	mov	r28, r24
	   //lcd_print(1,10,z_byte1,3);
	   
	   z_byte2 = read_byte(Z2);
     724:	87 e3       	ldi	r24, 0x37	; 55
     726:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read_byte>
     72a:	c8 2e       	mov	r12, r24
	  x_acc=sign(x_byte);
	  
	  //pr_int(1,1,x_byte,3); 
	  
	  y_byte=y_byte2;
	  y_byte = (y_byte << 8);
     72c:	3d 2f       	mov	r19, r29
     72e:	20 e0       	ldi	r18, 0x00	; 0
	  y_byte |= y_byte1;
     730:	80 2f       	mov	r24, r16
     732:	90 e0       	ldi	r25, 0x00	; 0
	  y_acc=sign(y_byte);
     734:	82 2b       	or	r24, r18
     736:	93 2b       	or	r25, r19
     738:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <sign>
     73c:	8c 01       	movw	r16, r24
	  
	  //pr_int(2,5,y_byte,3); 	
	  
	  z_byte=z_byte2;
	  z_byte = (z_byte << 8);
     73e:	3c 2d       	mov	r19, r12
     740:	20 e0       	ldi	r18, 0x00	; 0
	  z_byte |= z_byte1;
     742:	8c 2f       	mov	r24, r28
     744:	90 e0       	ldi	r25, 0x00	; 0
	  z_acc=sign(z_byte);
     746:	82 2b       	or	r24, r18
     748:	93 2b       	or	r25, r19
     74a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <sign>
     74e:	ec 01       	movw	r28, r24
	  
	  
	  //pr_int(1,10,z_byte,3);  
	  
	  angle=(atan((y_acc*1.0)/(z_acc*1.0)));
     750:	b8 01       	movw	r22, r16
     752:	88 27       	eor	r24, r24
     754:	77 fd       	sbrc	r23, 7
     756:	80 95       	com	r24
     758:	98 2f       	mov	r25, r24
     75a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__floatsisf>
     75e:	6b 01       	movw	r12, r22
     760:	7c 01       	movw	r14, r24
     762:	be 01       	movw	r22, r28
     764:	88 27       	eor	r24, r24
     766:	77 fd       	sbrc	r23, 7
     768:	80 95       	com	r24
     76a:	98 2f       	mov	r25, r24
     76c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__floatsisf>
     770:	9b 01       	movw	r18, r22
     772:	ac 01       	movw	r20, r24
     774:	c7 01       	movw	r24, r14
     776:	b6 01       	movw	r22, r12
     778:	0e 94 84 06 	call	0xd08	; 0xd08 <__divsf3>
     77c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <atan>
	  angle *= 180.0/3.14;
     780:	23 ea       	ldi	r18, 0xA3	; 163
     782:	3c e4       	ldi	r19, 0x4C	; 76
     784:	45 e6       	ldi	r20, 0x65	; 101
     786:	52 e4       	ldi	r21, 0x42	; 66
     788:	0e 94 d7 07 	call	0xfae	; 0xfae <__mulsf3>
	  //pr_int(1,1,angle,3);
	  
	return angle;
     78c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fixsfsi>
}
     790:	86 2f       	mov	r24, r22
     792:	97 2f       	mov	r25, r23
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	ff 90       	pop	r15
     79e:	ef 90       	pop	r14
     7a0:	df 90       	pop	r13
     7a2:	cf 90       	pop	r12
     7a4:	08 95       	ret

000007a6 <Compute>:
double Input, Output, Setpoint;
double errSum, lastErr;
double kp, ki, kd; */
int SampleTime = 100 ; //100 msec
void Compute()
{
     7a6:	4f 92       	push	r4
     7a8:	5f 92       	push	r5
     7aa:	6f 92       	push	r6
     7ac:	7f 92       	push	r7
     7ae:	af 92       	push	r10
     7b0:	bf 92       	push	r11
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	2c 97       	sbiw	r28, 0x0c	; 12
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
	//unsigned long now = millis();
	int timeChange = millis();
     7d2:	0e 94 ed 00 	call	0x1da	; 0x1da <millis>
     7d6:	6c 01       	movw	r12, r24
	if(timeChange>=SampleTime)
     7d8:	80 91 04 02 	lds	r24, 0x0204
     7dc:	90 91 05 02 	lds	r25, 0x0205
     7e0:	c8 16       	cp	r12, r24
     7e2:	d9 06       	cpc	r13, r25
     7e4:	0c f4       	brge	.+2      	; 0x7e8 <Compute+0x42>
     7e6:	02 c1       	rjmp	.+516    	; 0x9ec <Compute+0x246>
	{
		/*Compute all the working error variables*/
		double error = Setpoint - Input;
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	cb 01       	movw	r24, r22
     7ee:	20 91 39 02 	lds	r18, 0x0239
     7f2:	30 91 3a 02 	lds	r19, 0x023A
     7f6:	40 91 3b 02 	lds	r20, 0x023B
     7fa:	50 91 3c 02 	lds	r21, 0x023C
     7fe:	0e 94 f7 05 	call	0xbee	; 0xbee <__subsf3>
     802:	06 2f       	mov	r16, r22
     804:	17 2f       	mov	r17, r23
     806:	b8 2e       	mov	r11, r24
     808:	a9 2e       	mov	r10, r25
		errSum = (error*timeChange)+(lastErr*lastTime)+(lastErr2*lastTime2);
     80a:	b6 01       	movw	r22, r12
     80c:	88 27       	eor	r24, r24
     80e:	77 fd       	sbrc	r23, 7
     810:	80 95       	com	r24
     812:	98 2f       	mov	r25, r24
     814:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__floatsisf>
     818:	69 83       	std	Y+1, r22	; 0x01
     81a:	7a 83       	std	Y+2, r23	; 0x02
     81c:	8b 83       	std	Y+3, r24	; 0x03
     81e:	9c 83       	std	Y+4, r25	; 0x04
     820:	80 91 0e 02 	lds	r24, 0x020E
     824:	90 91 0f 02 	lds	r25, 0x020F
     828:	a0 91 10 02 	lds	r26, 0x0210
     82c:	b0 91 11 02 	lds	r27, 0x0211
     830:	8d 83       	std	Y+5, r24	; 0x05
     832:	9e 83       	std	Y+6, r25	; 0x06
     834:	af 83       	std	Y+7, r26	; 0x07
     836:	b8 87       	std	Y+8, r27	; 0x08
     838:	80 91 1e 02 	lds	r24, 0x021E
     83c:	90 91 1f 02 	lds	r25, 0x021F
     840:	a0 91 20 02 	lds	r26, 0x0220
     844:	b0 91 21 02 	lds	r27, 0x0221
     848:	89 87       	std	Y+9, r24	; 0x09
     84a:	9a 87       	std	Y+10, r25	; 0x0a
     84c:	ab 87       	std	Y+11, r26	; 0x0b
     84e:	bc 87       	std	Y+12, r27	; 0x0c
     850:	69 81       	ldd	r22, Y+1	; 0x01
     852:	7a 81       	ldd	r23, Y+2	; 0x02
     854:	8b 81       	ldd	r24, Y+3	; 0x03
     856:	9c 81       	ldd	r25, Y+4	; 0x04
     858:	c0 2e       	mov	r12, r16
     85a:	d1 2e       	mov	r13, r17
     85c:	eb 2c       	mov	r14, r11
     85e:	fa 2c       	mov	r15, r10
     860:	a7 01       	movw	r20, r14
     862:	96 01       	movw	r18, r12
     864:	0e 94 d7 07 	call	0xfae	; 0xfae <__mulsf3>
     868:	6b 01       	movw	r12, r22
     86a:	7c 01       	movw	r14, r24
     86c:	6d 81       	ldd	r22, Y+5	; 0x05
     86e:	7e 81       	ldd	r23, Y+6	; 0x06
     870:	8f 81       	ldd	r24, Y+7	; 0x07
     872:	98 85       	ldd	r25, Y+8	; 0x08
     874:	29 85       	ldd	r18, Y+9	; 0x09
     876:	3a 85       	ldd	r19, Y+10	; 0x0a
     878:	4b 85       	ldd	r20, Y+11	; 0x0b
     87a:	5c 85       	ldd	r21, Y+12	; 0x0c
     87c:	0e 94 d7 07 	call	0xfae	; 0xfae <__mulsf3>
     880:	9b 01       	movw	r18, r22
     882:	ac 01       	movw	r20, r24
     884:	c7 01       	movw	r24, r14
     886:	b6 01       	movw	r22, r12
     888:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__addsf3>
     88c:	6b 01       	movw	r12, r22
     88e:	7c 01       	movw	r14, r24
     890:	60 91 0a 02 	lds	r22, 0x020A
     894:	70 91 0b 02 	lds	r23, 0x020B
     898:	80 91 0c 02 	lds	r24, 0x020C
     89c:	90 91 0d 02 	lds	r25, 0x020D
     8a0:	20 91 1a 02 	lds	r18, 0x021A
     8a4:	30 91 1b 02 	lds	r19, 0x021B
     8a8:	40 91 1c 02 	lds	r20, 0x021C
     8ac:	50 91 1d 02 	lds	r21, 0x021D
     8b0:	0e 94 d7 07 	call	0xfae	; 0xfae <__mulsf3>
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__addsf3>
     8c0:	f6 2e       	mov	r15, r22
     8c2:	d7 2e       	mov	r13, r23
     8c4:	c8 2e       	mov	r12, r24
     8c6:	e9 2e       	mov	r14, r25
     8c8:	86 2f       	mov	r24, r22
     8ca:	9d 2d       	mov	r25, r13
     8cc:	ac 2d       	mov	r26, r12
     8ce:	be 2d       	mov	r27, r14
     8d0:	80 93 12 02 	sts	0x0212, r24
     8d4:	90 93 13 02 	sts	0x0213, r25
     8d8:	a0 93 14 02 	sts	0x0214, r26
     8dc:	b0 93 15 02 	sts	0x0215, r27
		double dErr =(error-lastErr)/timeChange;
		
		/*Compute PID Output*/
		Output = kp * error + ki * errSum + kd * dErr;
     8e0:	80 2f       	mov	r24, r16
     8e2:	91 2f       	mov	r25, r17
     8e4:	ab 2d       	mov	r26, r11
     8e6:	ba 2d       	mov	r27, r10
     8e8:	bc 01       	movw	r22, r24
     8ea:	cd 01       	movw	r24, r26
     8ec:	20 91 41 02 	lds	r18, 0x0241
     8f0:	30 91 42 02 	lds	r19, 0x0242
     8f4:	40 91 43 02 	lds	r20, 0x0243
     8f8:	50 91 44 02 	lds	r21, 0x0244
     8fc:	0e 94 d7 07 	call	0xfae	; 0xfae <__mulsf3>
     900:	2b 01       	movw	r4, r22
     902:	3c 01       	movw	r6, r24
     904:	8f 2d       	mov	r24, r15
     906:	9d 2d       	mov	r25, r13
     908:	ac 2d       	mov	r26, r12
     90a:	be 2d       	mov	r27, r14
     90c:	bc 01       	movw	r22, r24
     90e:	cd 01       	movw	r24, r26
     910:	20 91 33 02 	lds	r18, 0x0233
     914:	30 91 34 02 	lds	r19, 0x0234
     918:	40 91 35 02 	lds	r20, 0x0235
     91c:	50 91 36 02 	lds	r21, 0x0236
     920:	0e 94 d7 07 	call	0xfae	; 0xfae <__mulsf3>
     924:	9b 01       	movw	r18, r22
     926:	ac 01       	movw	r20, r24
     928:	c3 01       	movw	r24, r6
     92a:	b2 01       	movw	r22, r4
     92c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__addsf3>
     930:	6b 01       	movw	r12, r22
     932:	7c 01       	movw	r14, r24
	if(timeChange>=SampleTime)
	{
		/*Compute all the working error variables*/
		double error = Setpoint - Input;
		errSum = (error*timeChange)+(lastErr*lastTime)+(lastErr2*lastTime2);
		double dErr =(error-lastErr)/timeChange;
     934:	80 2f       	mov	r24, r16
     936:	91 2f       	mov	r25, r17
     938:	ab 2d       	mov	r26, r11
     93a:	ba 2d       	mov	r27, r10
     93c:	bc 01       	movw	r22, r24
     93e:	cd 01       	movw	r24, r26
     940:	2d 81       	ldd	r18, Y+5	; 0x05
     942:	3e 81       	ldd	r19, Y+6	; 0x06
     944:	4f 81       	ldd	r20, Y+7	; 0x07
     946:	58 85       	ldd	r21, Y+8	; 0x08
     948:	0e 94 f7 05 	call	0xbee	; 0xbee <__subsf3>
     94c:	29 81       	ldd	r18, Y+1	; 0x01
     94e:	3a 81       	ldd	r19, Y+2	; 0x02
     950:	4b 81       	ldd	r20, Y+3	; 0x03
     952:	5c 81       	ldd	r21, Y+4	; 0x04
     954:	0e 94 84 06 	call	0xd08	; 0xd08 <__divsf3>
		
		/*Compute PID Output*/
		Output = kp * error + ki * errSum + kd * dErr;
     958:	20 91 22 02 	lds	r18, 0x0222
     95c:	30 91 23 02 	lds	r19, 0x0223
     960:	40 91 24 02 	lds	r20, 0x0224
     964:	50 91 25 02 	lds	r21, 0x0225
     968:	0e 94 d7 07 	call	0xfae	; 0xfae <__mulsf3>
     96c:	9b 01       	movw	r18, r22
     96e:	ac 01       	movw	r20, r24
     970:	c7 01       	movw	r24, r14
     972:	b6 01       	movw	r22, r12
     974:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__addsf3>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	80 93 2d 02 	sts	0x022D, r24
     980:	90 93 2e 02 	sts	0x022E, r25
     984:	a0 93 2f 02 	sts	0x022F, r26
     988:	b0 93 30 02 	sts	0x0230, r27
		
		/*Remember some variables for next time*/
		lastErr2 = lastErr;
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	9e 81       	ldd	r25, Y+6	; 0x06
     990:	af 81       	ldd	r26, Y+7	; 0x07
     992:	b8 85       	ldd	r27, Y+8	; 0x08
     994:	80 93 0a 02 	sts	0x020A, r24
     998:	90 93 0b 02 	sts	0x020B, r25
     99c:	a0 93 0c 02 	sts	0x020C, r26
     9a0:	b0 93 0d 02 	sts	0x020D, r27
		lastErr = error;
     9a4:	80 2f       	mov	r24, r16
     9a6:	91 2f       	mov	r25, r17
     9a8:	ab 2d       	mov	r26, r11
     9aa:	ba 2d       	mov	r27, r10
     9ac:	80 93 0e 02 	sts	0x020E, r24
     9b0:	90 93 0f 02 	sts	0x020F, r25
     9b4:	a0 93 10 02 	sts	0x0210, r26
     9b8:	b0 93 11 02 	sts	0x0211, r27
		lastTime2 = lastTime;
     9bc:	89 85       	ldd	r24, Y+9	; 0x09
     9be:	9a 85       	ldd	r25, Y+10	; 0x0a
     9c0:	ab 85       	ldd	r26, Y+11	; 0x0b
     9c2:	bc 85       	ldd	r27, Y+12	; 0x0c
     9c4:	80 93 1a 02 	sts	0x021A, r24
     9c8:	90 93 1b 02 	sts	0x021B, r25
     9cc:	a0 93 1c 02 	sts	0x021C, r26
     9d0:	b0 93 1d 02 	sts	0x021D, r27
		lastTime = timeChange;
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	9a 81       	ldd	r25, Y+2	; 0x02
     9d8:	ab 81       	ldd	r26, Y+3	; 0x03
     9da:	bc 81       	ldd	r27, Y+4	; 0x04
     9dc:	80 93 1e 02 	sts	0x021E, r24
     9e0:	90 93 1f 02 	sts	0x021F, r25
     9e4:	a0 93 20 02 	sts	0x0220, r26
     9e8:	b0 93 21 02 	sts	0x0221, r27
	}
}
     9ec:	2c 96       	adiw	r28, 0x0c	; 12
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	bf 90       	pop	r11
     a0a:	af 90       	pop	r10
     a0c:	7f 90       	pop	r7
     a0e:	6f 90       	pop	r6
     a10:	5f 90       	pop	r5
     a12:	4f 90       	pop	r4
     a14:	08 95       	ret

00000a16 <SetTunings>:

void SetTunings(double Kp, double Ki, double Kd)
{
     a16:	8f 92       	push	r8
     a18:	9f 92       	push	r9
     a1a:	af 92       	push	r10
     a1c:	bf 92       	push	r11
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	4b 01       	movw	r8, r22
     a28:	5c 01       	movw	r10, r24
     a2a:	da 01       	movw	r26, r20
     a2c:	c9 01       	movw	r24, r18
	//double SampleTimeInSec = ((double)SampleTime)/1000;
	//kp = Kp;
	//ki = Ki * SampleTimeInSec;
	//kd = Kd / SampleTimeInSec;
	kp=Kp;
     a2e:	80 92 41 02 	sts	0x0241, r8
     a32:	90 92 42 02 	sts	0x0242, r9
     a36:	a0 92 43 02 	sts	0x0243, r10
     a3a:	b0 92 44 02 	sts	0x0244, r11
	ki=Ki;
     a3e:	80 93 33 02 	sts	0x0233, r24
     a42:	90 93 34 02 	sts	0x0234, r25
     a46:	a0 93 35 02 	sts	0x0235, r26
     a4a:	b0 93 36 02 	sts	0x0236, r27
	kd=Kd;
     a4e:	e0 92 22 02 	sts	0x0222, r14
     a52:	f0 92 23 02 	sts	0x0223, r15
     a56:	00 93 24 02 	sts	0x0224, r16
     a5a:	10 93 25 02 	sts	0x0225, r17
}
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	ff 90       	pop	r15
     a64:	ef 90       	pop	r14
     a66:	bf 90       	pop	r11
     a68:	af 90       	pop	r10
     a6a:	9f 90       	pop	r9
     a6c:	8f 90       	pop	r8
     a6e:	08 95       	ret

00000a70 <motion_pin_config>:
	}
}*/

void motion_pin_config (void)
{
	DDRL = DDRL | 0xE4;    //set direction of the PORTL2.5,6,7 pins as output
     a70:	aa e0       	ldi	r26, 0x0A	; 10
     a72:	b1 e0       	ldi	r27, 0x01	; 1
     a74:	8c 91       	ld	r24, X
     a76:	84 6e       	ori	r24, 0xE4	; 228
     a78:	8c 93       	st	X, r24
	PORTL = PORTL & 0x18;  //set initial value of the PORTL2.5,6,7 pins to logic 0
     a7a:	eb e0       	ldi	r30, 0x0B	; 11
     a7c:	f1 e0       	ldi	r31, 0x01	; 1
     a7e:	80 81       	ld	r24, Z
     a80:	88 71       	andi	r24, 0x18	; 24
     a82:	80 83       	st	Z, r24
	DDRL = DDRL | 0x18;    //Setting PL3 and PL4 pins as output for PWM generation
     a84:	8c 91       	ld	r24, X
     a86:	88 61       	ori	r24, 0x18	; 24
     a88:	8c 93       	st	X, r24
	PORTL = PORTL | 0x18;  //PL3 and PL4 pins are for velocity control using PWM
     a8a:	80 81       	ld	r24, Z
     a8c:	88 61       	ori	r24, 0x18	; 24
     a8e:	80 83       	st	Z, r24
}
     a90:	08 95       	ret

00000a92 <port_init>:

//Function to initialize ports
void port_init()
{
	motion_pin_config();
     a92:	0e 94 38 05 	call	0xa70	; 0xa70 <motion_pin_config>
}
     a96:	08 95       	ret

00000a98 <timer5_init>:
// TIMER5 initialize - prescale:1024
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// timer5 value: 56.250Hz
void timer5_init(void)
{
	TCCR5B = 0x00; //stop
     a98:	e1 e2       	ldi	r30, 0x21	; 33
     a9a:	f1 e0       	ldi	r31, 0x01	; 1
     a9c:	10 82       	st	Z, r1
	TCNT5H = 0xFF; //setup
     a9e:	8f ef       	ldi	r24, 0xFF	; 255
     aa0:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;
     aaa:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;
     aae:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
     ab2:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;
     ab6:	80 93 2a 01 	sts	0x012A, r24
	TCCR5A = 0xA1;
     aba:	81 ea       	ldi	r24, 0xA1	; 161
     abc:	80 93 20 01 	sts	0x0120, r24
	TCCR5C = 0x00;
     ac0:	10 92 22 01 	sts	0x0122, r1
	TCCR5B = 0x0D; //start Timer
     ac4:	8d e0       	ldi	r24, 0x0D	; 13
     ac6:	80 83       	st	Z, r24
}
     ac8:	08 95       	ret

00000aca <set_PWM_value>:

// Function for robot velocity control
void set_PWM_value(unsigned char value) 	//set 8 bit PWM value
{
	OCR5AH = 0x00;
     aca:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = value;
     ace:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
     ad2:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = value;
     ad6:	80 93 2a 01 	sts	0x012A, r24
}
     ada:	08 95       	ret

00000adc <motion_set>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortLRestore = 0;

	PortLRestore = PORTL; 			// reading the PORTL's original status
     adc:	eb e0       	ldi	r30, 0x0B	; 11
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	90 81       	ld	r25, Z
	PortLRestore &= 0x18; 			// setting lower direction nibbel to 0
     ae2:	98 71       	andi	r25, 0x18	; 24
	PortLRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTL status
     ae4:	89 2b       	or	r24, r25
	PORTL = PortLRestore; 			// setting the command to the port
     ae6:	80 83       	st	Z, r24
}
     ae8:	08 95       	ret

00000aea <forward>:

void forward (void) 		//both inputs forward
{
	motion_set(0xA0);
     aea:	80 ea       	ldi	r24, 0xA0	; 160
     aec:	0e 94 6e 05 	call	0xadc	; 0xadc <motion_set>
}
     af0:	08 95       	ret

00000af2 <back>:

void back (void) 			//both inputs backward
{
	motion_set(0x44);
     af2:	84 e4       	ldi	r24, 0x44	; 68
     af4:	0e 94 6e 05 	call	0xadc	; 0xadc <motion_set>
}
     af8:	08 95       	ret

00000afa <left>:

void left (void) 			//input12 backward, input34 forward
{
	motion_set(0x84);
     afa:	84 e8       	ldi	r24, 0x84	; 132
     afc:	0e 94 6e 05 	call	0xadc	; 0xadc <motion_set>
}
     b00:	08 95       	ret

00000b02 <right>:

void right (void) 			//input34 backward, input12 forward
{
	motion_set(0x60);
     b02:	80 e6       	ldi	r24, 0x60	; 96
     b04:	0e 94 6e 05 	call	0xadc	; 0xadc <motion_set>
}
     b08:	08 95       	ret

00000b0a <soft_left>:

void soft_left (void) 		//input12 stationary, input34 forward
{
	motion_set(0x80);
     b0a:	80 e8       	ldi	r24, 0x80	; 128
     b0c:	0e 94 6e 05 	call	0xadc	; 0xadc <motion_set>
}
     b10:	08 95       	ret

00000b12 <soft_right>:

void soft_right (void)      //input12 forward, input34 stationary
{
	motion_set(0x20);
     b12:	80 e2       	ldi	r24, 0x20	; 32
     b14:	0e 94 6e 05 	call	0xadc	; 0xadc <motion_set>
}
     b18:	08 95       	ret

00000b1a <soft_left_2>:

void soft_left_2 (void)     //input12 backward, input34 stationary
{
	motion_set(0x40);
     b1a:	80 e4       	ldi	r24, 0x40	; 64
     b1c:	0e 94 6e 05 	call	0xadc	; 0xadc <motion_set>
}
     b20:	08 95       	ret

00000b22 <soft_right_2>:

void soft_right_2 (void)    //input12 stationary, input34 backward
{
	motion_set(0x04);
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	0e 94 6e 05 	call	0xadc	; 0xadc <motion_set>
}
     b28:	08 95       	ret

00000b2a <stop>:

void stop (void)            // both input stationary
{
	motion_set(0x00);
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 6e 05 	call	0xadc	; 0xadc <motion_set>
}
     b30:	08 95       	ret

00000b32 <init_devices1>:

void init_devices1 (void)
{
	cli(); //Clears the global interrupts
     b32:	f8 94       	cli
	
	lcd_port_config();  // configure the LCD port
     b34:	0e 94 91 02 	call	0x522	; 0x522 <lcd_port_config>
	lcd_set_4bit();
     b38:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_set_4bit>
	lcd_init();
     b3c:	0e 94 93 01 	call	0x326	; 0x326 <lcd_init>
	port_init();
     b40:	0e 94 49 05 	call	0xa92	; 0xa92 <port_init>
	timer5_init();
     b44:	0e 94 4c 05 	call	0xa98	; 0xa98 <timer5_init>
	sei(); //Enables the global interrupts
     b48:	78 94       	sei
}
     b4a:	08 95       	ret

00000b4c <main>:

int main(void)
{
	//int acc_Angle;
	unsigned char pwm_value = 0;   // variable for velocity control 
	init_adxl();
     b4c:	0e 94 6d 03 	call	0x6da	; 0x6da <init_adxl>
	init_devices1();
     b50:	0e 94 99 05 	call	0xb32	; 0xb32 <init_devices1>
	SetTunings(1,1,1);
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	80 e8       	ldi	r24, 0x80	; 128
     b5a:	9f e3       	ldi	r25, 0x3F	; 63
     b5c:	9b 01       	movw	r18, r22
     b5e:	ac 01       	movw	r20, r24
     b60:	7b 01       	movw	r14, r22
     b62:	8c 01       	movw	r16, r24
     b64:	0e 94 0b 05 	call	0xa16	; 0xa16 <SetTunings>
	start_timer4();
     b68:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>
	while(1)
	{
		Input = (double)acc_angle();
     b6c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <acc_angle>
     b70:	9c 01       	movw	r18, r24
     b72:	b9 01       	movw	r22, r18
     b74:	88 27       	eor	r24, r24
     b76:	77 fd       	sbrc	r23, 7
     b78:	80 95       	com	r24
     b7a:	98 2f       	mov	r25, r24
     b7c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__floatsisf>
     b80:	dc 01       	movw	r26, r24
     b82:	cb 01       	movw	r24, r22
     b84:	80 93 39 02 	sts	0x0239, r24
     b88:	90 93 3a 02 	sts	0x023A, r25
     b8c:	a0 93 3b 02 	sts	0x023B, r26
     b90:	b0 93 3c 02 	sts	0x023C, r27
		Compute();
     b94:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Compute>
		pr_int(1,1,Input,3);
     b98:	60 91 39 02 	lds	r22, 0x0239
     b9c:	70 91 3a 02 	lds	r23, 0x023A
     ba0:	80 91 3b 02 	lds	r24, 0x023B
     ba4:	90 91 3c 02 	lds	r25, 0x023C
     ba8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fixsfsi>
     bac:	8b 01       	movw	r16, r22
     bae:	9c 01       	movw	r18, r24
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	a8 01       	movw	r20, r16
     bba:	23 e0       	ldi	r18, 0x03	; 3
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	0e 94 38 03 	call	0x670	; 0x670 <pr_int>
		pr_int(2,1,Output,5);
     bc2:	60 91 2d 02 	lds	r22, 0x022D
     bc6:	70 91 2e 02 	lds	r23, 0x022E
     bca:	80 91 2f 02 	lds	r24, 0x022F
     bce:	90 91 30 02 	lds	r25, 0x0230
     bd2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fixsfsi>
     bd6:	8b 01       	movw	r16, r22
     bd8:	9c 01       	movw	r18, r24
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	a8 01       	movw	r20, r16
     be4:	25 e0       	ldi	r18, 0x05	; 5
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	0e 94 38 03 	call	0x670	; 0x670 <pr_int>
     bec:	bf cf       	rjmp	.-130    	; 0xb6c <main+0x20>

00000bee <__subsf3>:
     bee:	50 58       	subi	r21, 0x80	; 128

00000bf0 <__addsf3>:
     bf0:	bb 27       	eor	r27, r27
     bf2:	aa 27       	eor	r26, r26
     bf4:	0e d0       	rcall	.+28     	; 0xc12 <__addsf3x>
     bf6:	9a c1       	rjmp	.+820    	; 0xf2c <__fp_round>
     bf8:	8b d1       	rcall	.+790    	; 0xf10 <__fp_pscA>
     bfa:	30 f0       	brcs	.+12     	; 0xc08 <__addsf3+0x18>
     bfc:	90 d1       	rcall	.+800    	; 0xf1e <__fp_pscB>
     bfe:	20 f0       	brcs	.+8      	; 0xc08 <__addsf3+0x18>
     c00:	31 f4       	brne	.+12     	; 0xc0e <__addsf3+0x1e>
     c02:	9f 3f       	cpi	r25, 0xFF	; 255
     c04:	11 f4       	brne	.+4      	; 0xc0a <__addsf3+0x1a>
     c06:	1e f4       	brtc	.+6      	; 0xc0e <__addsf3+0x1e>
     c08:	5b c1       	rjmp	.+694    	; 0xec0 <__fp_nan>
     c0a:	0e f4       	brtc	.+2      	; 0xc0e <__addsf3+0x1e>
     c0c:	e0 95       	com	r30
     c0e:	e7 fb       	bst	r30, 7
     c10:	51 c1       	rjmp	.+674    	; 0xeb4 <__fp_inf>

00000c12 <__addsf3x>:
     c12:	e9 2f       	mov	r30, r25
     c14:	9c d1       	rcall	.+824    	; 0xf4e <__fp_split3>
     c16:	80 f3       	brcs	.-32     	; 0xbf8 <__addsf3+0x8>
     c18:	ba 17       	cp	r27, r26
     c1a:	62 07       	cpc	r22, r18
     c1c:	73 07       	cpc	r23, r19
     c1e:	84 07       	cpc	r24, r20
     c20:	95 07       	cpc	r25, r21
     c22:	18 f0       	brcs	.+6      	; 0xc2a <__addsf3x+0x18>
     c24:	71 f4       	brne	.+28     	; 0xc42 <__addsf3x+0x30>
     c26:	9e f5       	brtc	.+102    	; 0xc8e <__addsf3x+0x7c>
     c28:	b4 c1       	rjmp	.+872    	; 0xf92 <__fp_zero>
     c2a:	0e f4       	brtc	.+2      	; 0xc2e <__addsf3x+0x1c>
     c2c:	e0 95       	com	r30
     c2e:	0b 2e       	mov	r0, r27
     c30:	ba 2f       	mov	r27, r26
     c32:	a0 2d       	mov	r26, r0
     c34:	0b 01       	movw	r0, r22
     c36:	b9 01       	movw	r22, r18
     c38:	90 01       	movw	r18, r0
     c3a:	0c 01       	movw	r0, r24
     c3c:	ca 01       	movw	r24, r20
     c3e:	a0 01       	movw	r20, r0
     c40:	11 24       	eor	r1, r1
     c42:	ff 27       	eor	r31, r31
     c44:	59 1b       	sub	r21, r25
     c46:	99 f0       	breq	.+38     	; 0xc6e <__addsf3x+0x5c>
     c48:	59 3f       	cpi	r21, 0xF9	; 249
     c4a:	50 f4       	brcc	.+20     	; 0xc60 <__addsf3x+0x4e>
     c4c:	50 3e       	cpi	r21, 0xE0	; 224
     c4e:	68 f1       	brcs	.+90     	; 0xcaa <__addsf3x+0x98>
     c50:	1a 16       	cp	r1, r26
     c52:	f0 40       	sbci	r31, 0x00	; 0
     c54:	a2 2f       	mov	r26, r18
     c56:	23 2f       	mov	r18, r19
     c58:	34 2f       	mov	r19, r20
     c5a:	44 27       	eor	r20, r20
     c5c:	58 5f       	subi	r21, 0xF8	; 248
     c5e:	f3 cf       	rjmp	.-26     	; 0xc46 <__addsf3x+0x34>
     c60:	46 95       	lsr	r20
     c62:	37 95       	ror	r19
     c64:	27 95       	ror	r18
     c66:	a7 95       	ror	r26
     c68:	f0 40       	sbci	r31, 0x00	; 0
     c6a:	53 95       	inc	r21
     c6c:	c9 f7       	brne	.-14     	; 0xc60 <__addsf3x+0x4e>
     c6e:	7e f4       	brtc	.+30     	; 0xc8e <__addsf3x+0x7c>
     c70:	1f 16       	cp	r1, r31
     c72:	ba 0b       	sbc	r27, r26
     c74:	62 0b       	sbc	r22, r18
     c76:	73 0b       	sbc	r23, r19
     c78:	84 0b       	sbc	r24, r20
     c7a:	ba f0       	brmi	.+46     	; 0xcaa <__addsf3x+0x98>
     c7c:	91 50       	subi	r25, 0x01	; 1
     c7e:	a1 f0       	breq	.+40     	; 0xca8 <__addsf3x+0x96>
     c80:	ff 0f       	add	r31, r31
     c82:	bb 1f       	adc	r27, r27
     c84:	66 1f       	adc	r22, r22
     c86:	77 1f       	adc	r23, r23
     c88:	88 1f       	adc	r24, r24
     c8a:	c2 f7       	brpl	.-16     	; 0xc7c <__addsf3x+0x6a>
     c8c:	0e c0       	rjmp	.+28     	; 0xcaa <__addsf3x+0x98>
     c8e:	ba 0f       	add	r27, r26
     c90:	62 1f       	adc	r22, r18
     c92:	73 1f       	adc	r23, r19
     c94:	84 1f       	adc	r24, r20
     c96:	48 f4       	brcc	.+18     	; 0xcaa <__addsf3x+0x98>
     c98:	87 95       	ror	r24
     c9a:	77 95       	ror	r23
     c9c:	67 95       	ror	r22
     c9e:	b7 95       	ror	r27
     ca0:	f7 95       	ror	r31
     ca2:	9e 3f       	cpi	r25, 0xFE	; 254
     ca4:	08 f0       	brcs	.+2      	; 0xca8 <__addsf3x+0x96>
     ca6:	b3 cf       	rjmp	.-154    	; 0xc0e <__addsf3+0x1e>
     ca8:	93 95       	inc	r25
     caa:	88 0f       	add	r24, r24
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <__addsf3x+0x9e>
     cae:	99 27       	eor	r25, r25
     cb0:	ee 0f       	add	r30, r30
     cb2:	97 95       	ror	r25
     cb4:	87 95       	ror	r24
     cb6:	08 95       	ret

00000cb8 <atan>:
     cb8:	df 93       	push	r29
     cba:	dd 27       	eor	r29, r29
     cbc:	b9 2f       	mov	r27, r25
     cbe:	bf 77       	andi	r27, 0x7F	; 127
     cc0:	40 e8       	ldi	r20, 0x80	; 128
     cc2:	5f e3       	ldi	r21, 0x3F	; 63
     cc4:	16 16       	cp	r1, r22
     cc6:	17 06       	cpc	r1, r23
     cc8:	48 07       	cpc	r20, r24
     cca:	5b 07       	cpc	r21, r27
     ccc:	10 f4       	brcc	.+4      	; 0xcd2 <atan+0x1a>
     cce:	d9 2f       	mov	r29, r25
     cd0:	67 d1       	rcall	.+718    	; 0xfa0 <inverse>
     cd2:	9f 93       	push	r25
     cd4:	8f 93       	push	r24
     cd6:	7f 93       	push	r23
     cd8:	6f 93       	push	r22
     cda:	cc d1       	rcall	.+920    	; 0x1074 <square>
     cdc:	e4 ee       	ldi	r30, 0xE4	; 228
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	f2 d0       	rcall	.+484    	; 0xec6 <__fp_powser>
     ce2:	24 d1       	rcall	.+584    	; 0xf2c <__fp_round>
     ce4:	2f 91       	pop	r18
     ce6:	3f 91       	pop	r19
     ce8:	4f 91       	pop	r20
     cea:	5f 91       	pop	r21
     cec:	6c d1       	rcall	.+728    	; 0xfc6 <__mulsf3x>
     cee:	dd 23       	and	r29, r29
     cf0:	49 f0       	breq	.+18     	; 0xd04 <atan+0x4c>
     cf2:	90 58       	subi	r25, 0x80	; 128
     cf4:	a2 ea       	ldi	r26, 0xA2	; 162
     cf6:	2a ed       	ldi	r18, 0xDA	; 218
     cf8:	3f e0       	ldi	r19, 0x0F	; 15
     cfa:	49 ec       	ldi	r20, 0xC9	; 201
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	d0 78       	andi	r29, 0x80	; 128
     d00:	5d 27       	eor	r21, r29
     d02:	87 df       	rcall	.-242    	; 0xc12 <__addsf3x>
     d04:	df 91       	pop	r29
     d06:	12 c1       	rjmp	.+548    	; 0xf2c <__fp_round>

00000d08 <__divsf3>:
     d08:	0c d0       	rcall	.+24     	; 0xd22 <__divsf3x>
     d0a:	10 c1       	rjmp	.+544    	; 0xf2c <__fp_round>
     d0c:	08 d1       	rcall	.+528    	; 0xf1e <__fp_pscB>
     d0e:	40 f0       	brcs	.+16     	; 0xd20 <__divsf3+0x18>
     d10:	ff d0       	rcall	.+510    	; 0xf10 <__fp_pscA>
     d12:	30 f0       	brcs	.+12     	; 0xd20 <__divsf3+0x18>
     d14:	21 f4       	brne	.+8      	; 0xd1e <__divsf3+0x16>
     d16:	5f 3f       	cpi	r21, 0xFF	; 255
     d18:	19 f0       	breq	.+6      	; 0xd20 <__divsf3+0x18>
     d1a:	cc c0       	rjmp	.+408    	; 0xeb4 <__fp_inf>
     d1c:	51 11       	cpse	r21, r1
     d1e:	3a c1       	rjmp	.+628    	; 0xf94 <__fp_szero>
     d20:	cf c0       	rjmp	.+414    	; 0xec0 <__fp_nan>

00000d22 <__divsf3x>:
     d22:	15 d1       	rcall	.+554    	; 0xf4e <__fp_split3>
     d24:	98 f3       	brcs	.-26     	; 0xd0c <__divsf3+0x4>

00000d26 <__divsf3_pse>:
     d26:	99 23       	and	r25, r25
     d28:	c9 f3       	breq	.-14     	; 0xd1c <__divsf3+0x14>
     d2a:	55 23       	and	r21, r21
     d2c:	b1 f3       	breq	.-20     	; 0xd1a <__divsf3+0x12>
     d2e:	95 1b       	sub	r25, r21
     d30:	55 0b       	sbc	r21, r21
     d32:	bb 27       	eor	r27, r27
     d34:	aa 27       	eor	r26, r26
     d36:	62 17       	cp	r22, r18
     d38:	73 07       	cpc	r23, r19
     d3a:	84 07       	cpc	r24, r20
     d3c:	38 f0       	brcs	.+14     	; 0xd4c <__divsf3_pse+0x26>
     d3e:	9f 5f       	subi	r25, 0xFF	; 255
     d40:	5f 4f       	sbci	r21, 0xFF	; 255
     d42:	22 0f       	add	r18, r18
     d44:	33 1f       	adc	r19, r19
     d46:	44 1f       	adc	r20, r20
     d48:	aa 1f       	adc	r26, r26
     d4a:	a9 f3       	breq	.-22     	; 0xd36 <__divsf3_pse+0x10>
     d4c:	33 d0       	rcall	.+102    	; 0xdb4 <__divsf3_pse+0x8e>
     d4e:	0e 2e       	mov	r0, r30
     d50:	3a f0       	brmi	.+14     	; 0xd60 <__divsf3_pse+0x3a>
     d52:	e0 e8       	ldi	r30, 0x80	; 128
     d54:	30 d0       	rcall	.+96     	; 0xdb6 <__divsf3_pse+0x90>
     d56:	91 50       	subi	r25, 0x01	; 1
     d58:	50 40       	sbci	r21, 0x00	; 0
     d5a:	e6 95       	lsr	r30
     d5c:	00 1c       	adc	r0, r0
     d5e:	ca f7       	brpl	.-14     	; 0xd52 <__divsf3_pse+0x2c>
     d60:	29 d0       	rcall	.+82     	; 0xdb4 <__divsf3_pse+0x8e>
     d62:	fe 2f       	mov	r31, r30
     d64:	27 d0       	rcall	.+78     	; 0xdb4 <__divsf3_pse+0x8e>
     d66:	66 0f       	add	r22, r22
     d68:	77 1f       	adc	r23, r23
     d6a:	88 1f       	adc	r24, r24
     d6c:	bb 1f       	adc	r27, r27
     d6e:	26 17       	cp	r18, r22
     d70:	37 07       	cpc	r19, r23
     d72:	48 07       	cpc	r20, r24
     d74:	ab 07       	cpc	r26, r27
     d76:	b0 e8       	ldi	r27, 0x80	; 128
     d78:	09 f0       	breq	.+2      	; 0xd7c <__divsf3_pse+0x56>
     d7a:	bb 0b       	sbc	r27, r27
     d7c:	80 2d       	mov	r24, r0
     d7e:	bf 01       	movw	r22, r30
     d80:	ff 27       	eor	r31, r31
     d82:	93 58       	subi	r25, 0x83	; 131
     d84:	5f 4f       	sbci	r21, 0xFF	; 255
     d86:	2a f0       	brmi	.+10     	; 0xd92 <__divsf3_pse+0x6c>
     d88:	9e 3f       	cpi	r25, 0xFE	; 254
     d8a:	51 05       	cpc	r21, r1
     d8c:	68 f0       	brcs	.+26     	; 0xda8 <__divsf3_pse+0x82>
     d8e:	92 c0       	rjmp	.+292    	; 0xeb4 <__fp_inf>
     d90:	01 c1       	rjmp	.+514    	; 0xf94 <__fp_szero>
     d92:	5f 3f       	cpi	r21, 0xFF	; 255
     d94:	ec f3       	brlt	.-6      	; 0xd90 <__divsf3_pse+0x6a>
     d96:	98 3e       	cpi	r25, 0xE8	; 232
     d98:	dc f3       	brlt	.-10     	; 0xd90 <__divsf3_pse+0x6a>
     d9a:	86 95       	lsr	r24
     d9c:	77 95       	ror	r23
     d9e:	67 95       	ror	r22
     da0:	b7 95       	ror	r27
     da2:	f7 95       	ror	r31
     da4:	9f 5f       	subi	r25, 0xFF	; 255
     da6:	c9 f7       	brne	.-14     	; 0xd9a <__divsf3_pse+0x74>
     da8:	88 0f       	add	r24, r24
     daa:	91 1d       	adc	r25, r1
     dac:	96 95       	lsr	r25
     dae:	87 95       	ror	r24
     db0:	97 f9       	bld	r25, 7
     db2:	08 95       	ret
     db4:	e1 e0       	ldi	r30, 0x01	; 1
     db6:	66 0f       	add	r22, r22
     db8:	77 1f       	adc	r23, r23
     dba:	88 1f       	adc	r24, r24
     dbc:	bb 1f       	adc	r27, r27
     dbe:	62 17       	cp	r22, r18
     dc0:	73 07       	cpc	r23, r19
     dc2:	84 07       	cpc	r24, r20
     dc4:	ba 07       	cpc	r27, r26
     dc6:	20 f0       	brcs	.+8      	; 0xdd0 <__divsf3_pse+0xaa>
     dc8:	62 1b       	sub	r22, r18
     dca:	73 0b       	sbc	r23, r19
     dcc:	84 0b       	sbc	r24, r20
     dce:	ba 0b       	sbc	r27, r26
     dd0:	ee 1f       	adc	r30, r30
     dd2:	88 f7       	brcc	.-30     	; 0xdb6 <__divsf3_pse+0x90>
     dd4:	e0 95       	com	r30
     dd6:	08 95       	ret

00000dd8 <__fixsfsi>:
     dd8:	04 d0       	rcall	.+8      	; 0xde2 <__fixunssfsi>
     dda:	68 94       	set
     ddc:	b1 11       	cpse	r27, r1
     dde:	da c0       	rjmp	.+436    	; 0xf94 <__fp_szero>
     de0:	08 95       	ret

00000de2 <__fixunssfsi>:
     de2:	bd d0       	rcall	.+378    	; 0xf5e <__fp_splitA>
     de4:	88 f0       	brcs	.+34     	; 0xe08 <__fixunssfsi+0x26>
     de6:	9f 57       	subi	r25, 0x7F	; 127
     de8:	90 f0       	brcs	.+36     	; 0xe0e <__fixunssfsi+0x2c>
     dea:	b9 2f       	mov	r27, r25
     dec:	99 27       	eor	r25, r25
     dee:	b7 51       	subi	r27, 0x17	; 23
     df0:	a0 f0       	brcs	.+40     	; 0xe1a <__fixunssfsi+0x38>
     df2:	d1 f0       	breq	.+52     	; 0xe28 <__fixunssfsi+0x46>
     df4:	66 0f       	add	r22, r22
     df6:	77 1f       	adc	r23, r23
     df8:	88 1f       	adc	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	1a f0       	brmi	.+6      	; 0xe04 <__fixunssfsi+0x22>
     dfe:	ba 95       	dec	r27
     e00:	c9 f7       	brne	.-14     	; 0xdf4 <__fixunssfsi+0x12>
     e02:	12 c0       	rjmp	.+36     	; 0xe28 <__fixunssfsi+0x46>
     e04:	b1 30       	cpi	r27, 0x01	; 1
     e06:	81 f0       	breq	.+32     	; 0xe28 <__fixunssfsi+0x46>
     e08:	c4 d0       	rcall	.+392    	; 0xf92 <__fp_zero>
     e0a:	b1 e0       	ldi	r27, 0x01	; 1
     e0c:	08 95       	ret
     e0e:	c1 c0       	rjmp	.+386    	; 0xf92 <__fp_zero>
     e10:	67 2f       	mov	r22, r23
     e12:	78 2f       	mov	r23, r24
     e14:	88 27       	eor	r24, r24
     e16:	b8 5f       	subi	r27, 0xF8	; 248
     e18:	39 f0       	breq	.+14     	; 0xe28 <__fixunssfsi+0x46>
     e1a:	b9 3f       	cpi	r27, 0xF9	; 249
     e1c:	cc f3       	brlt	.-14     	; 0xe10 <__fixunssfsi+0x2e>
     e1e:	86 95       	lsr	r24
     e20:	77 95       	ror	r23
     e22:	67 95       	ror	r22
     e24:	b3 95       	inc	r27
     e26:	d9 f7       	brne	.-10     	; 0xe1e <__fixunssfsi+0x3c>
     e28:	3e f4       	brtc	.+14     	; 0xe38 <__fixunssfsi+0x56>
     e2a:	90 95       	com	r25
     e2c:	80 95       	com	r24
     e2e:	70 95       	com	r23
     e30:	61 95       	neg	r22
     e32:	7f 4f       	sbci	r23, 0xFF	; 255
     e34:	8f 4f       	sbci	r24, 0xFF	; 255
     e36:	9f 4f       	sbci	r25, 0xFF	; 255
     e38:	08 95       	ret

00000e3a <__floatunsisf>:
     e3a:	e8 94       	clt
     e3c:	09 c0       	rjmp	.+18     	; 0xe50 <__floatsisf+0x12>

00000e3e <__floatsisf>:
     e3e:	97 fb       	bst	r25, 7
     e40:	3e f4       	brtc	.+14     	; 0xe50 <__floatsisf+0x12>
     e42:	90 95       	com	r25
     e44:	80 95       	com	r24
     e46:	70 95       	com	r23
     e48:	61 95       	neg	r22
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	8f 4f       	sbci	r24, 0xFF	; 255
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	99 23       	and	r25, r25
     e52:	a9 f0       	breq	.+42     	; 0xe7e <__floatsisf+0x40>
     e54:	f9 2f       	mov	r31, r25
     e56:	96 e9       	ldi	r25, 0x96	; 150
     e58:	bb 27       	eor	r27, r27
     e5a:	93 95       	inc	r25
     e5c:	f6 95       	lsr	r31
     e5e:	87 95       	ror	r24
     e60:	77 95       	ror	r23
     e62:	67 95       	ror	r22
     e64:	b7 95       	ror	r27
     e66:	f1 11       	cpse	r31, r1
     e68:	f8 cf       	rjmp	.-16     	; 0xe5a <__floatsisf+0x1c>
     e6a:	fa f4       	brpl	.+62     	; 0xeaa <__floatsisf+0x6c>
     e6c:	bb 0f       	add	r27, r27
     e6e:	11 f4       	brne	.+4      	; 0xe74 <__floatsisf+0x36>
     e70:	60 ff       	sbrs	r22, 0
     e72:	1b c0       	rjmp	.+54     	; 0xeaa <__floatsisf+0x6c>
     e74:	6f 5f       	subi	r22, 0xFF	; 255
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	8f 4f       	sbci	r24, 0xFF	; 255
     e7a:	9f 4f       	sbci	r25, 0xFF	; 255
     e7c:	16 c0       	rjmp	.+44     	; 0xeaa <__floatsisf+0x6c>
     e7e:	88 23       	and	r24, r24
     e80:	11 f0       	breq	.+4      	; 0xe86 <__floatsisf+0x48>
     e82:	96 e9       	ldi	r25, 0x96	; 150
     e84:	11 c0       	rjmp	.+34     	; 0xea8 <__floatsisf+0x6a>
     e86:	77 23       	and	r23, r23
     e88:	21 f0       	breq	.+8      	; 0xe92 <__floatsisf+0x54>
     e8a:	9e e8       	ldi	r25, 0x8E	; 142
     e8c:	87 2f       	mov	r24, r23
     e8e:	76 2f       	mov	r23, r22
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <__floatsisf+0x5e>
     e92:	66 23       	and	r22, r22
     e94:	71 f0       	breq	.+28     	; 0xeb2 <__floatsisf+0x74>
     e96:	96 e8       	ldi	r25, 0x86	; 134
     e98:	86 2f       	mov	r24, r22
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	2a f0       	brmi	.+10     	; 0xeaa <__floatsisf+0x6c>
     ea0:	9a 95       	dec	r25
     ea2:	66 0f       	add	r22, r22
     ea4:	77 1f       	adc	r23, r23
     ea6:	88 1f       	adc	r24, r24
     ea8:	da f7       	brpl	.-10     	; 0xea0 <__floatsisf+0x62>
     eaa:	88 0f       	add	r24, r24
     eac:	96 95       	lsr	r25
     eae:	87 95       	ror	r24
     eb0:	97 f9       	bld	r25, 7
     eb2:	08 95       	ret

00000eb4 <__fp_inf>:
     eb4:	97 f9       	bld	r25, 7
     eb6:	9f 67       	ori	r25, 0x7F	; 127
     eb8:	80 e8       	ldi	r24, 0x80	; 128
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	08 95       	ret

00000ec0 <__fp_nan>:
     ec0:	9f ef       	ldi	r25, 0xFF	; 255
     ec2:	80 ec       	ldi	r24, 0xC0	; 192
     ec4:	08 95       	ret

00000ec6 <__fp_powser>:
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	1f 93       	push	r17
     ecc:	0f 93       	push	r16
     ece:	ff 92       	push	r15
     ed0:	ef 92       	push	r14
     ed2:	df 92       	push	r13
     ed4:	7b 01       	movw	r14, r22
     ed6:	8c 01       	movw	r16, r24
     ed8:	68 94       	set
     eda:	05 c0       	rjmp	.+10     	; 0xee6 <__fp_powser+0x20>
     edc:	da 2e       	mov	r13, r26
     ede:	ef 01       	movw	r28, r30
     ee0:	72 d0       	rcall	.+228    	; 0xfc6 <__mulsf3x>
     ee2:	fe 01       	movw	r30, r28
     ee4:	e8 94       	clt
     ee6:	a5 91       	lpm	r26, Z+
     ee8:	25 91       	lpm	r18, Z+
     eea:	35 91       	lpm	r19, Z+
     eec:	45 91       	lpm	r20, Z+
     eee:	55 91       	lpm	r21, Z+
     ef0:	ae f3       	brts	.-22     	; 0xedc <__fp_powser+0x16>
     ef2:	ef 01       	movw	r28, r30
     ef4:	8e de       	rcall	.-740    	; 0xc12 <__addsf3x>
     ef6:	fe 01       	movw	r30, r28
     ef8:	97 01       	movw	r18, r14
     efa:	a8 01       	movw	r20, r16
     efc:	da 94       	dec	r13
     efe:	79 f7       	brne	.-34     	; 0xede <__fp_powser+0x18>
     f00:	df 90       	pop	r13
     f02:	ef 90       	pop	r14
     f04:	ff 90       	pop	r15
     f06:	0f 91       	pop	r16
     f08:	1f 91       	pop	r17
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <__fp_pscA>:
     f10:	00 24       	eor	r0, r0
     f12:	0a 94       	dec	r0
     f14:	16 16       	cp	r1, r22
     f16:	17 06       	cpc	r1, r23
     f18:	18 06       	cpc	r1, r24
     f1a:	09 06       	cpc	r0, r25
     f1c:	08 95       	ret

00000f1e <__fp_pscB>:
     f1e:	00 24       	eor	r0, r0
     f20:	0a 94       	dec	r0
     f22:	12 16       	cp	r1, r18
     f24:	13 06       	cpc	r1, r19
     f26:	14 06       	cpc	r1, r20
     f28:	05 06       	cpc	r0, r21
     f2a:	08 95       	ret

00000f2c <__fp_round>:
     f2c:	09 2e       	mov	r0, r25
     f2e:	03 94       	inc	r0
     f30:	00 0c       	add	r0, r0
     f32:	11 f4       	brne	.+4      	; 0xf38 <__fp_round+0xc>
     f34:	88 23       	and	r24, r24
     f36:	52 f0       	brmi	.+20     	; 0xf4c <__fp_round+0x20>
     f38:	bb 0f       	add	r27, r27
     f3a:	40 f4       	brcc	.+16     	; 0xf4c <__fp_round+0x20>
     f3c:	bf 2b       	or	r27, r31
     f3e:	11 f4       	brne	.+4      	; 0xf44 <__fp_round+0x18>
     f40:	60 ff       	sbrs	r22, 0
     f42:	04 c0       	rjmp	.+8      	; 0xf4c <__fp_round+0x20>
     f44:	6f 5f       	subi	r22, 0xFF	; 255
     f46:	7f 4f       	sbci	r23, 0xFF	; 255
     f48:	8f 4f       	sbci	r24, 0xFF	; 255
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	08 95       	ret

00000f4e <__fp_split3>:
     f4e:	57 fd       	sbrc	r21, 7
     f50:	90 58       	subi	r25, 0x80	; 128
     f52:	44 0f       	add	r20, r20
     f54:	55 1f       	adc	r21, r21
     f56:	59 f0       	breq	.+22     	; 0xf6e <__fp_splitA+0x10>
     f58:	5f 3f       	cpi	r21, 0xFF	; 255
     f5a:	71 f0       	breq	.+28     	; 0xf78 <__fp_splitA+0x1a>
     f5c:	47 95       	ror	r20

00000f5e <__fp_splitA>:
     f5e:	88 0f       	add	r24, r24
     f60:	97 fb       	bst	r25, 7
     f62:	99 1f       	adc	r25, r25
     f64:	61 f0       	breq	.+24     	; 0xf7e <__fp_splitA+0x20>
     f66:	9f 3f       	cpi	r25, 0xFF	; 255
     f68:	79 f0       	breq	.+30     	; 0xf88 <__fp_splitA+0x2a>
     f6a:	87 95       	ror	r24
     f6c:	08 95       	ret
     f6e:	12 16       	cp	r1, r18
     f70:	13 06       	cpc	r1, r19
     f72:	14 06       	cpc	r1, r20
     f74:	55 1f       	adc	r21, r21
     f76:	f2 cf       	rjmp	.-28     	; 0xf5c <__fp_split3+0xe>
     f78:	46 95       	lsr	r20
     f7a:	f1 df       	rcall	.-30     	; 0xf5e <__fp_splitA>
     f7c:	08 c0       	rjmp	.+16     	; 0xf8e <__fp_splitA+0x30>
     f7e:	16 16       	cp	r1, r22
     f80:	17 06       	cpc	r1, r23
     f82:	18 06       	cpc	r1, r24
     f84:	99 1f       	adc	r25, r25
     f86:	f1 cf       	rjmp	.-30     	; 0xf6a <__fp_splitA+0xc>
     f88:	86 95       	lsr	r24
     f8a:	71 05       	cpc	r23, r1
     f8c:	61 05       	cpc	r22, r1
     f8e:	08 94       	sec
     f90:	08 95       	ret

00000f92 <__fp_zero>:
     f92:	e8 94       	clt

00000f94 <__fp_szero>:
     f94:	bb 27       	eor	r27, r27
     f96:	66 27       	eor	r22, r22
     f98:	77 27       	eor	r23, r23
     f9a:	cb 01       	movw	r24, r22
     f9c:	97 f9       	bld	r25, 7
     f9e:	08 95       	ret

00000fa0 <inverse>:
     fa0:	9b 01       	movw	r18, r22
     fa2:	ac 01       	movw	r20, r24
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	80 e8       	ldi	r24, 0x80	; 128
     faa:	9f e3       	ldi	r25, 0x3F	; 63
     fac:	ad ce       	rjmp	.-678    	; 0xd08 <__divsf3>

00000fae <__mulsf3>:
     fae:	0b d0       	rcall	.+22     	; 0xfc6 <__mulsf3x>
     fb0:	bd cf       	rjmp	.-134    	; 0xf2c <__fp_round>
     fb2:	ae df       	rcall	.-164    	; 0xf10 <__fp_pscA>
     fb4:	28 f0       	brcs	.+10     	; 0xfc0 <__mulsf3+0x12>
     fb6:	b3 df       	rcall	.-154    	; 0xf1e <__fp_pscB>
     fb8:	18 f0       	brcs	.+6      	; 0xfc0 <__mulsf3+0x12>
     fba:	95 23       	and	r25, r21
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <__mulsf3+0x12>
     fbe:	7a cf       	rjmp	.-268    	; 0xeb4 <__fp_inf>
     fc0:	7f cf       	rjmp	.-258    	; 0xec0 <__fp_nan>
     fc2:	11 24       	eor	r1, r1
     fc4:	e7 cf       	rjmp	.-50     	; 0xf94 <__fp_szero>

00000fc6 <__mulsf3x>:
     fc6:	c3 df       	rcall	.-122    	; 0xf4e <__fp_split3>
     fc8:	a0 f3       	brcs	.-24     	; 0xfb2 <__mulsf3+0x4>

00000fca <__mulsf3_pse>:
     fca:	95 9f       	mul	r25, r21
     fcc:	d1 f3       	breq	.-12     	; 0xfc2 <__mulsf3+0x14>
     fce:	95 0f       	add	r25, r21
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	55 1f       	adc	r21, r21
     fd4:	62 9f       	mul	r22, r18
     fd6:	f0 01       	movw	r30, r0
     fd8:	72 9f       	mul	r23, r18
     fda:	bb 27       	eor	r27, r27
     fdc:	f0 0d       	add	r31, r0
     fde:	b1 1d       	adc	r27, r1
     fe0:	63 9f       	mul	r22, r19
     fe2:	aa 27       	eor	r26, r26
     fe4:	f0 0d       	add	r31, r0
     fe6:	b1 1d       	adc	r27, r1
     fe8:	aa 1f       	adc	r26, r26
     fea:	64 9f       	mul	r22, r20
     fec:	66 27       	eor	r22, r22
     fee:	b0 0d       	add	r27, r0
     ff0:	a1 1d       	adc	r26, r1
     ff2:	66 1f       	adc	r22, r22
     ff4:	82 9f       	mul	r24, r18
     ff6:	22 27       	eor	r18, r18
     ff8:	b0 0d       	add	r27, r0
     ffa:	a1 1d       	adc	r26, r1
     ffc:	62 1f       	adc	r22, r18
     ffe:	73 9f       	mul	r23, r19
    1000:	b0 0d       	add	r27, r0
    1002:	a1 1d       	adc	r26, r1
    1004:	62 1f       	adc	r22, r18
    1006:	83 9f       	mul	r24, r19
    1008:	a0 0d       	add	r26, r0
    100a:	61 1d       	adc	r22, r1
    100c:	22 1f       	adc	r18, r18
    100e:	74 9f       	mul	r23, r20
    1010:	33 27       	eor	r19, r19
    1012:	a0 0d       	add	r26, r0
    1014:	61 1d       	adc	r22, r1
    1016:	23 1f       	adc	r18, r19
    1018:	84 9f       	mul	r24, r20
    101a:	60 0d       	add	r22, r0
    101c:	21 1d       	adc	r18, r1
    101e:	82 2f       	mov	r24, r18
    1020:	76 2f       	mov	r23, r22
    1022:	6a 2f       	mov	r22, r26
    1024:	11 24       	eor	r1, r1
    1026:	9f 57       	subi	r25, 0x7F	; 127
    1028:	50 40       	sbci	r21, 0x00	; 0
    102a:	8a f0       	brmi	.+34     	; 0x104e <__mulsf3_pse+0x84>
    102c:	e1 f0       	breq	.+56     	; 0x1066 <__mulsf3_pse+0x9c>
    102e:	88 23       	and	r24, r24
    1030:	4a f0       	brmi	.+18     	; 0x1044 <__mulsf3_pse+0x7a>
    1032:	ee 0f       	add	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	bb 1f       	adc	r27, r27
    1038:	66 1f       	adc	r22, r22
    103a:	77 1f       	adc	r23, r23
    103c:	88 1f       	adc	r24, r24
    103e:	91 50       	subi	r25, 0x01	; 1
    1040:	50 40       	sbci	r21, 0x00	; 0
    1042:	a9 f7       	brne	.-22     	; 0x102e <__mulsf3_pse+0x64>
    1044:	9e 3f       	cpi	r25, 0xFE	; 254
    1046:	51 05       	cpc	r21, r1
    1048:	70 f0       	brcs	.+28     	; 0x1066 <__mulsf3_pse+0x9c>
    104a:	34 cf       	rjmp	.-408    	; 0xeb4 <__fp_inf>
    104c:	a3 cf       	rjmp	.-186    	; 0xf94 <__fp_szero>
    104e:	5f 3f       	cpi	r21, 0xFF	; 255
    1050:	ec f3       	brlt	.-6      	; 0x104c <__mulsf3_pse+0x82>
    1052:	98 3e       	cpi	r25, 0xE8	; 232
    1054:	dc f3       	brlt	.-10     	; 0x104c <__mulsf3_pse+0x82>
    1056:	86 95       	lsr	r24
    1058:	77 95       	ror	r23
    105a:	67 95       	ror	r22
    105c:	b7 95       	ror	r27
    105e:	f7 95       	ror	r31
    1060:	e7 95       	ror	r30
    1062:	9f 5f       	subi	r25, 0xFF	; 255
    1064:	c1 f7       	brne	.-16     	; 0x1056 <__mulsf3_pse+0x8c>
    1066:	fe 2b       	or	r31, r30
    1068:	88 0f       	add	r24, r24
    106a:	91 1d       	adc	r25, r1
    106c:	96 95       	lsr	r25
    106e:	87 95       	ror	r24
    1070:	97 f9       	bld	r25, 7
    1072:	08 95       	ret

00001074 <square>:
    1074:	9b 01       	movw	r18, r22
    1076:	ac 01       	movw	r20, r24
    1078:	9a cf       	rjmp	.-204    	; 0xfae <__mulsf3>

0000107a <__udivmodhi4>:
    107a:	aa 1b       	sub	r26, r26
    107c:	bb 1b       	sub	r27, r27
    107e:	51 e1       	ldi	r21, 0x11	; 17
    1080:	07 c0       	rjmp	.+14     	; 0x1090 <__udivmodhi4_ep>

00001082 <__udivmodhi4_loop>:
    1082:	aa 1f       	adc	r26, r26
    1084:	bb 1f       	adc	r27, r27
    1086:	a6 17       	cp	r26, r22
    1088:	b7 07       	cpc	r27, r23
    108a:	10 f0       	brcs	.+4      	; 0x1090 <__udivmodhi4_ep>
    108c:	a6 1b       	sub	r26, r22
    108e:	b7 0b       	sbc	r27, r23

00001090 <__udivmodhi4_ep>:
    1090:	88 1f       	adc	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	5a 95       	dec	r21
    1096:	a9 f7       	brne	.-22     	; 0x1082 <__udivmodhi4_loop>
    1098:	80 95       	com	r24
    109a:	90 95       	com	r25
    109c:	bc 01       	movw	r22, r24
    109e:	cd 01       	movw	r24, r26
    10a0:	08 95       	ret

000010a2 <_exit>:
    10a2:	f8 94       	cli

000010a4 <__stop_program>:
    10a4:	ff cf       	rjmp	.-2      	; 0x10a4 <__stop_program>
